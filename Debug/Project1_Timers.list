
Project1_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003420  08003420  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003420  08003420  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003420  08003420  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002350  20000068  08003490  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023b8  08003490  000223b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002921  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000950  00000000  00000000  000229fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00023350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000185  00000000  00000000  00023578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002588b  00000000  00000000  000236fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002eda  00000000  00000000  00048f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7276  00000000  00000000  0004be62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013cc  00000000  00000000  001330d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001344a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080030b4 	.word	0x080030b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080030b4 	.word	0x080030b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <clock_init>:

#include "stm32l476xx.h"

//static uint32_t prescaleVal = 15;

void clock_init(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <clock_init+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <clock_init+0x68>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000baa:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000bac:	bf00      	nop
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <clock_init+0x68>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <clock_init+0x68>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <clock_init+0x68>)
 8000bc0:	f023 0303 	bic.w	r3, r3, #3
 8000bc4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <clock_init+0x68>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <clock_init+0x68>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 8000bd2:	bf00      	nop
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <clock_init+0x68>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f9      	beq.n	8000bd4 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <clock_init+0x68>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <clock_init+0x68>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <clock_init+0x68>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <clock_init+0x68>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <TIM_Init>:

void TIM_Init(void){
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	 // Enable clock for GPIOA peripheral
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <TIM_Init+0x198>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a63      	ldr	r2, [pc, #396]	; (8000da0 <TIM_Init+0x198>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure GPIOA0 in alternate function mode
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
 8000c1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c24:	f023 0303 	bic.w	r3, r3, #3
 8000c28:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER0_1;
 8000c2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6013      	str	r3, [r2, #0]

	// Select the desired alternate function (AF) for the pin
	// This depends on the specific function generator and the pin's datasheet
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL0;
 8000c3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c44:	f023 030f 	bic.w	r3, r3, #15
 8000c48:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (uint32_t)0x01; // Set alternate function to TIM2
 8000c4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6213      	str	r3, [r2, #32]
	//Calculate Prescaler based on System Core clock
	uint32_t prescaler = SystemCoreClock/1000000 - 1;
 8000c5a:	4b52      	ldr	r3, [pc, #328]	; (8000da4 <TIM_Init+0x19c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a52      	ldr	r2, [pc, #328]	; (8000da8 <TIM_Init+0x1a0>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0c9b      	lsrs	r3, r3, #18
 8000c66:	3b01      	subs	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
	//Print statement to start init

	// Enable TIM2 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000c6a:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <TIM_Init+0x198>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <TIM_Init+0x198>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6593      	str	r3, [r2, #88]	; 0x58

	//Disable TIM2
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6013      	str	r3, [r2, #0]

	// Set prescaler
	TIM2->PSC = prescaler;
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6293      	str	r3, [r2, #40]	; 0x28

	//Write CC1S bits to 01 to select TI1
	TIM2->CCMR1 &= ~TIM_CCMR1_CC1S;
 8000c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	f023 0303 	bic.w	r3, r3, #3
 8000c9c:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
	//Select polarity for TI1FP1. CC1P = 0, CC1NP = 0
	TIM2->CCER &= ~TIM_CCER_CC1P;
 8000cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	f023 0302 	bic.w	r3, r3, #2
 8000cbc:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC1NP;         //Set for rising edge
 8000cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc8:	f023 0308 	bic.w	r3, r3, #8
 8000ccc:	6213      	str	r3, [r2, #32]

	//Wreite CC2S bits to 10 to select TI1
	TIM2->CCMR1 &= ~TIM_CCMR1_CC2S;
 8000cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cdc:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC2S_1;
 8000cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cec:	6193      	str	r3, [r2, #24]

	//Select polarity for TI1FP2. CC2P = 1, CC2NP = 0
	TIM2->CCER |= TIM_CCER_CC2P;
 8000cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC2NP;         //Set for falling edge
 8000cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d0c:	6213      	str	r3, [r2, #32]

	//Select valid trigger input: write TS bits to 101
	TIM2->SMCR &= ~TIM_SMCR_TS;
 8000d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d1c:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_TS_2;
 8000d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_TS_0;
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	6093      	str	r3, [r2, #8]

	//Write SMS bits to 100 for slave mode
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4c:	f023 0307 	bic.w	r3, r3, #7
 8000d50:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_SMS_2;
 8000d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6093      	str	r3, [r2, #8]

	//Enable capture/compare 1 and 2
	TIM2->CCER |= TIM_CCER_CC1E;
 8000d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC2E;
 8000d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	6213      	str	r3, [r2, #32]

	// Enable the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 8000d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6013      	str	r3, [r2, #0]
	return;
 8000d92:	bf00      	nop

}
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	431bde83 	.word	0x431bde83

08000dac <main>:
//////////////////////////////////////////////////////////////
// Embedded code usually consists of 2 components
//  - The init section is run once at startup and initializes all low level drivers and modules
//  - A main loop that runs forever that calls the application tasks repeatedly.
////////////////
int main(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

    // Initialization executed once at startup
//    UART_Init();
    TIM_Init();
 8000db0:	f7ff ff2a 	bl	8000c08 <TIM_Init>
	USART2_Init(9600);			// Initialize USART for terminal
 8000db4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000db8:	f000 fe0e 	bl	80019d8 <USART2_Init>
	clock_init();				// Initialize clock
 8000dbc:	f7ff feee 	bl	8000b9c <clock_init>
	Start_Timer();
 8000dc0:	f000 fade 	bl	8001380 <Start_Timer>
    while( power_on_self_test() == false)
 8000dc4:	bf00      	nop
 8000dc6:	f000 f95b 	bl	8001080 <power_on_self_test>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f7      	bne.n	8000dc6 <main+0x1a>
    // Main loop runs forever
    while(1)
    {

    	//Get User input
    	UserInputs();
 8000dd6:	f000 fc3d 	bl	8001654 <UserInputs>

        while( set_timer_base() == 0 )
 8000dda:	bf00      	nop
 8000ddc:	f000 f822 	bl	8000e24 <set_timer_base>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0fa      	beq.n	8000ddc <main+0x30>
          ;

        //Collect Period Data
        Start_Timer();
 8000de6:	f000 facb 	bl	8001380 <Start_Timer>
        init_measurement(lowerLimit);
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <main+0x74>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f978 	bl	80010e4 <init_measurement>
    	make_measurements(lowerLimit);
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <main+0x74>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f995 	bl	8001128 <make_measurements>
    	print_measurements(lowerLimit);
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <main+0x74>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f9fc 	bl	8001200 <print_measurements>
    	Stop_Timer();
 8000e08:	f000 fad0 	bl	80013ac <Stop_Timer>

    	//Collect Duty Data
    	Start_Timer();
 8000e0c:	f000 fab8 	bl	8001380 <Start_Timer>
    	TIM_Duty();
 8000e10:	f000 fae2 	bl	80013d8 <TIM_Duty>
    	Stop_Timer();
 8000e14:	f000 faca 	bl	80013ac <Stop_Timer>
    	print_duty();
 8000e18:	f000 fa4e 	bl	80012b8 <print_duty>
    	UserInputs();
 8000e1c:	e7db      	b.n	8000dd6 <main+0x2a>
 8000e1e:	bf00      	nop
 8000e20:	20000000 	.word	0x20000000

08000e24 <set_timer_base>:
        // 4. print out results

    }
}

int set_timer_base( void ){
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	return lowerLimit;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <set_timer_base+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <printString>:

void printString(char* string){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	n = sprintf((char *)buffer, "%s", string);
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4909      	ldr	r1, [pc, #36]	; (8000e6c <printString+0x30>)
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <printString+0x34>)
 8000e4a:	f001 f9a5 	bl	8002198 <siprintf>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <printString+0x38>)
 8000e52:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <printString+0x38>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4905      	ldr	r1, [pc, #20]	; (8000e70 <printString+0x34>)
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <printString+0x3c>)
 8000e5e:	f000 fea6 	bl	8001bae <USART_Write>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	080030cc 	.word	0x080030cc
 8000e70:	20000120 	.word	0x20000120
 8000e74:	20000318 	.word	0x20000318
 8000e78:	40004400 	.word	0x40004400

08000e7c <initialize_map>:

struct KeyValue* initialize_map(int size) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    struct KeyValue* map = (struct KeyValue*)calloc(size * sizeof(struct KeyValue), 0);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 feee 	bl	8001c6c <calloc>
 8000e90:	4603      	mov	r3, r0
 8000e92:	60bb      	str	r3, [r7, #8]
    if(map == NULL){
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10a      	bne.n	8000eb0 <initialize_map+0x34>
    	fprintf(stderr, "Error allocating for map");
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <initialize_map+0x6c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2218      	movs	r2, #24
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4811      	ldr	r0, [pc, #68]	; (8000eec <initialize_map+0x70>)
 8000ea6:	f001 f957 	bl	8002158 <fwrite>
    	exit(99);
 8000eaa:	2063      	movs	r0, #99	; 0x63
 8000eac:	f000 fefc 	bl	8001ca8 <exit>
    }
    for (int i = 0; i < size; i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e00e      	b.n	8000ed4 <initialize_map+0x58>
        map[i].key = 0;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
        map[i].value = 0;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	4413      	add	r3, r2
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbec      	blt.n	8000eb6 <initialize_map+0x3a>
    }
    return map;
 8000edc:	68bb      	ldr	r3, [r7, #8]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000064 	.word	0x20000064
 8000eec:	080030d0 	.word	0x080030d0

08000ef0 <update_map>:
 * @int *numbers: The pointer to the array of measurements
 *
 * @int size: The amount of entries to be entered into the dictionary
 *
 */
void update_map(struct KeyValue* map, int* numbers, int size) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	e036      	b.n	8000f70 <update_map+0x80>
    	// Grab a data entry
        int number = numbers[i];
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	4413      	add	r3, r2
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < size; j++) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	e026      	b.n	8000f62 <update_map+0x72>
        	//If it is already in the map, increment the count
            if (map[j].key == number) {
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d107      	bne.n	8000f34 <update_map+0x44>
                map[j].value++;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	3201      	adds	r2, #1
 8000f30:	605a      	str	r2, [r3, #4]
                break;
 8000f32:	e01a      	b.n	8000f6a <update_map+0x7a>
            }
            //Otherwise add it to the map
            if (map[j].key == 0) {
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10c      	bne.n	8000f5c <update_map+0x6c>
                map[j].key = number;
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4413      	add	r3, r2
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	601a      	str	r2, [r3, #0]
                map[j].value = 1;
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	2201      	movs	r2, #1
 8000f58:	605a      	str	r2, [r3, #4]
                break;
 8000f5a:	e006      	b.n	8000f6a <update_map+0x7a>
        for (int j = 0; j < size; j++) {
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	dbd4      	blt.n	8000f14 <update_map+0x24>
    for (int i = 0; i < size; i++) {
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbc4      	blt.n	8000f02 <update_map+0x12>
            }
        }
    }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <swap>:

/*A helper function that swaps to entries in a dictionary
 *
 */
void swap(struct KeyValue* a, struct KeyValue* b) {
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
    struct KeyValue temp = *a;
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9a:	e883 0003 	stmia.w	r3, {r0, r1}
    *a = *b;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa6:	e883 0003 	stmia.w	r3, {r0, r1}
    *b = temp;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fb6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <sort_dictionary>:

/*Sorts the dictionary in ascending order
 *
 */
void sort_dictionary(struct KeyValue* arr, size_t arrSize) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < arrSize - 1; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e028      	b.n	8001028 <sort_dictionary+0x62>
        for (size_t j = 0; j < arrSize - i - 1; j++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	e01b      	b.n	8001014 <sort_dictionary+0x4e>
            if (arr[j].key > arr[j + 1].key) {
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	440b      	add	r3, r1
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dd0b      	ble.n	800100e <sort_dictionary+0x48>
                swap(&arr[j], &arr[j + 1]);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	18d0      	adds	r0, r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	3301      	adds	r3, #1
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff ffbc 	bl	8000f86 <swap>
        for (size_t j = 0; j < arrSize - i - 1; j++) {
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3301      	adds	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	3b01      	subs	r3, #1
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3dc      	bcc.n	8000fdc <sort_dictionary+0x16>
    for (size_t i = 0; i < arrSize - 1; i++) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3d1      	bcc.n	8000fd6 <sort_dictionary+0x10>
            }
        }
    }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <printChar>:

void printChar(char ch){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	n = sprintf((char *)buffer, "%c", ch);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	461a      	mov	r2, r3
 800104a:	4909      	ldr	r1, [pc, #36]	; (8001070 <printChar+0x34>)
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <printChar+0x38>)
 800104e:	f001 f8a3 	bl	8002198 <siprintf>
 8001052:	4603      	mov	r3, r0
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <printChar+0x3c>)
 8001056:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <printChar+0x3c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4905      	ldr	r1, [pc, #20]	; (8001074 <printChar+0x38>)
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <printChar+0x40>)
 8001062:	f000 fda4 	bl	8001bae <USART_Write>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	080030ec 	.word	0x080030ec
 8001074:	20000120 	.word	0x20000120
 8001078:	20000318 	.word	0x20000318
 800107c:	40004400 	.word	0x40004400

08001080 <power_on_self_test>:

_Bool power_on_self_test(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	    //POST Pass if it saw a signal
	  while((TIM2->SR & (TIM_SR_CC1IF|| TIM_SR_CC2IF))){
 8001084:	bf00      	nop
 8001086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00a      	beq.n	80010aa <power_on_self_test+0x2a>
		  pulseDetected = true;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <power_on_self_test+0x50>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
		  sprintf(lineBuffer, "Post Passed!\r\n");
 800109a:	490e      	ldr	r1, [pc, #56]	; (80010d4 <power_on_self_test+0x54>)
 800109c:	480e      	ldr	r0, [pc, #56]	; (80010d8 <power_on_self_test+0x58>)
 800109e:	f001 f87b 	bl	8002198 <siprintf>
		  printFunct(lineBuffer);
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <power_on_self_test+0x58>)
 80010a4:	f000 f898 	bl	80011d8 <printFunct>
		  break;
 80010a8:	bf00      	nop
	  }
	  if(check == 0){
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <power_on_self_test+0x5c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <power_on_self_test+0x46>
		  sprintf(lineBuffer, "Post Failed, restart board or wait for post to pass\r\n");
 80010b2:	490b      	ldr	r1, [pc, #44]	; (80010e0 <power_on_self_test+0x60>)
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <power_on_self_test+0x58>)
 80010b6:	f001 f86f 	bl	8002198 <siprintf>
		  printFunct(lineBuffer);
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <power_on_self_test+0x58>)
 80010bc:	f000 f88c 	bl	80011d8 <printFunct>
		  check = 1;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <power_on_self_test+0x5c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
	  }
	  return pulseDetected;
 80010c6:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <power_on_self_test+0x50>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3

}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000011a 	.word	0x2000011a
 80010d4:	080030f0 	.word	0x080030f0
 80010d8:	20000084 	.word	0x20000084
 80010dc:	20002264 	.word	0x20002264
 80010e0:	08003100 	.word	0x08003100

080010e4 <init_measurement>:
	// Clear the CC1F flag
//	TIM2->SR &= ~TIM_SR_CC1IF;
	return diff;
}

int init_measurement( uint32_t limit ) {
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 101; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e007      	b.n	8001102 <init_measurement+0x1e>
		buckets[i] = 0;
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <init_measurement+0x38>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2100      	movs	r1, #0
 80010f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 101; i++) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b64      	cmp	r3, #100	; 0x64
 8001106:	ddf4      	ble.n	80010f2 <init_measurement+0xe>
	}
	lastCapture = 0;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <init_measurement+0x3c>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
	return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000184 	.word	0x20000184
 8001120:	2000011c 	.word	0x2000011c
 8001124:	00000000 	.word	0x00000000

08001128 <make_measurements>:

void make_measurements( uint32_t limit ) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	  int idx = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
	  //int PrevMeas = 0;
	  TIM2->CNT = 0;
 8001134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
	  while(idx != 1000){
 800113c:	e036      	b.n	80011ac <make_measurements+0x84>
		 if((TIM2->SR & 0x02)){	//We read a signal in
 800113e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d02f      	beq.n	80011ac <make_measurements+0x84>
			 //This is our first ever measurement
				 //Add the measurement to the array IF it is in bounds
				 int MS = (int)((TIM2->CCR1 / 4000000.0) * 1000000.0); //- PrevMeas;
 800114c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9e6 	bl	8000524 <__aeabi_ui2d>
 8001158:	a31b      	add	r3, pc, #108	; (adr r3, 80011c8 <make_measurements+0xa0>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fb85 	bl	800086c <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	a319      	add	r3, pc, #100	; (adr r3, 80011d0 <make_measurements+0xa8>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa52 	bl	8000618 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fce6 	bl	8000b4c <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]
				 //PrevMeas = (int)((TIM2->CCR1 / 4000000.0) * 1000000.0);
				 if(MS >= lowerLimit && MS <= (lowerLimit + 100)){
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <make_measurements+0x98>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d30e      	bcc.n	80011ac <make_measurements+0x84>
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <make_measurements+0x98>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	429a      	cmp	r2, r3
 800119a:	d307      	bcc.n	80011ac <make_measurements+0x84>
					 meas[idx] = MS;
 800119c:	4909      	ldr	r1, [pc, #36]	; (80011c4 <make_measurements+0x9c>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					 idx ++;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3301      	adds	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
	  while(idx != 1000){
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b2:	d1c4      	bne.n	800113e <make_measurements+0x16>

				 }
			 }
	  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000000 	.word	0x20000000
 80011c4:	2000031c 	.word	0x2000031c
 80011c8:	00000000 	.word	0x00000000
 80011cc:	414e8480 	.word	0x414e8480
 80011d0:	00000000 	.word	0x00000000
 80011d4:	412e8480 	.word	0x412e8480

080011d8 <printFunct>:

void printFunct(char* printBuffer) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	USART_Write(USART2, (uint8_t*)printBuffer, strlen(printBuffer)); // simple print solution
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7fe ffff 	bl	80001e4 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <printFunct+0x24>)
 80011ee:	f000 fcde 	bl	8001bae <USART_Write>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40004400 	.word	0x40004400

08001200 <print_measurements>:

void print_measurements( uint32_t limit ) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	//first, prepare for printing
	  struct KeyValue* Measures = initialize_map(1000);
 8001208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120c:	f7ff fe36 	bl	8000e7c <initialize_map>
 8001210:	60b8      	str	r0, [r7, #8]
	  update_map(Measures, meas, 1000);
 8001212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001216:	4923      	ldr	r1, [pc, #140]	; (80012a4 <print_measurements+0xa4>)
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f7ff fe69 	bl	8000ef0 <update_map>
	  //Sort the dictionary in ascending order
	  sort_dictionary(Measures, 1000);
 800121e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f7ff fecf 	bl	8000fc6 <sort_dictionary>

	  sprintf(lineBuffer, "Period Calculation\r\n");
 8001228:	491f      	ldr	r1, [pc, #124]	; (80012a8 <print_measurements+0xa8>)
 800122a:	4820      	ldr	r0, [pc, #128]	; (80012ac <print_measurements+0xac>)
 800122c:	f000 ffb4 	bl	8002198 <siprintf>
	  printFunct(lineBuffer);
 8001230:	481e      	ldr	r0, [pc, #120]	; (80012ac <print_measurements+0xac>)
 8001232:	f7ff ffd1 	bl	80011d8 <printFunct>

	for (int i = 0; i < 1001; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e029      	b.n	8001290 <print_measurements+0x90>
		if ((Measures[i].key > (lowerLimit)) && (Measures[i].key < (lowerLimit + 101))) {
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <print_measurements+0xb0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d91c      	bls.n	800128a <print_measurements+0x8a>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	4413      	add	r3, r2
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <print_measurements+0xb0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3365      	adds	r3, #101	; 0x65
 8001262:	429a      	cmp	r2, r3
 8001264:	d211      	bcs.n	800128a <print_measurements+0x8a>
			sprintf(lineBuffer, " Period: %d Count: %d \r\n",Measures[i].key, Measures[i].value);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	4413      	add	r3, r2
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	4413      	add	r3, r2
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	460a      	mov	r2, r1
 800127c:	490d      	ldr	r1, [pc, #52]	; (80012b4 <print_measurements+0xb4>)
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <print_measurements+0xac>)
 8001280:	f000 ff8a 	bl	8002198 <siprintf>
//			USART_Write(USART2, (uint8_t*) lineBuffer, n);
			printFunct(lineBuffer);
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <print_measurements+0xac>)
 8001286:	f7ff ffa7 	bl	80011d8 <printFunct>
	for (int i = 0; i < 1001; i++) {
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001296:	ddd1      	ble.n	800123c <print_measurements+0x3c>
		}
	}

}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000031c 	.word	0x2000031c
 80012a8:	08003138 	.word	0x08003138
 80012ac:	20000084 	.word	0x20000084
 80012b0:	20000000 	.word	0x20000000
 80012b4:	08003150 	.word	0x08003150

080012b8 <print_duty>:

void print_duty(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
	int index;
	 struct KeyValue* map = initialize_map(1001);
 80012be:	f240 30e9 	movw	r0, #1001	; 0x3e9
 80012c2:	f7ff fddb 	bl	8000e7c <initialize_map>
 80012c6:	60f8      	str	r0, [r7, #12]
	  update_map(map, dutys, 1001);
 80012c8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80012cc:	4927      	ldr	r1, [pc, #156]	; (800136c <print_duty+0xb4>)
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff fe0e 	bl	8000ef0 <update_map>
	  //Sort the dict in ascending order
	  sort_dictionary(map, 1001);
 80012d4:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7ff fe74 	bl	8000fc6 <sort_dictionary>


	  index = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
	  //Print out each value and it's count
	 for (int i = 0; i < 1001 ; i++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	e038      	b.n	800135a <print_duty+0xa2>
		  if(map[i].value > 0 && map[i].key < 10000){
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dd2b      	ble.n	800134e <print_duty+0x96>
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f242 720f 	movw	r2, #9999	; 0x270f
 8001304:	4293      	cmp	r3, r2
 8001306:	dc22      	bgt.n	800134e <print_duty+0x96>
			  int  DutyCycle= map[i].key ;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60bb      	str	r3, [r7, #8]
			  int count = map[i].value;
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	607b      	str	r3, [r7, #4]
			  sprintf(lineBuffer, "\r\n");
 8001320:	4913      	ldr	r1, [pc, #76]	; (8001370 <print_duty+0xb8>)
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <print_duty+0xbc>)
 8001324:	f000 ff38 	bl	8002198 <siprintf>
			  printFunct(lineBuffer);
 8001328:	4812      	ldr	r0, [pc, #72]	; (8001374 <print_duty+0xbc>)
 800132a:	f7ff ff55 	bl	80011d8 <printFunct>
			  sprintf(lineBuffer, "Duty Cycle Calculation\r\n");
 800132e:	4912      	ldr	r1, [pc, #72]	; (8001378 <print_duty+0xc0>)
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <print_duty+0xbc>)
 8001332:	f000 ff31 	bl	8002198 <siprintf>
			  printFunct(lineBuffer);
 8001336:	480f      	ldr	r0, [pc, #60]	; (8001374 <print_duty+0xbc>)
 8001338:	f7ff ff4e 	bl	80011d8 <printFunct>
			  sprintf(lineBuffer, " Duty: %d Count: %d \r\n",DutyCycle, count );
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	490e      	ldr	r1, [pc, #56]	; (800137c <print_duty+0xc4>)
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <print_duty+0xbc>)
 8001344:	f000 ff28 	bl	8002198 <siprintf>
			  printFunct(lineBuffer);
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <print_duty+0xbc>)
 800134a:	f7ff ff45 	bl	80011d8 <printFunct>
		  }
		  index++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
	 for (int i = 0; i < 1001 ; i++) {
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	3301      	adds	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001360:	ddc2      	ble.n	80012e8 <print_duty+0x30>
	  }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200012c0 	.word	0x200012c0
 8001370:	0800316c 	.word	0x0800316c
 8001374:	20000084 	.word	0x20000084
 8001378:	08003170 	.word	0x08003170
 800137c:	0800318c 	.word	0x0800318c

08001380 <Start_Timer>:

void Start_Timer(void) {
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
    // Start the timer by enabling the counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8001384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6013      	str	r3, [r2, #0]
    TIM2->CNT &= 0;
 8001394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <Stop_Timer>:

void Stop_Timer(void) {
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
    // Stop the timer by disabling the counter
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]
    TIM2->CNT &= 0;
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <TIM_Duty>:

void TIM_Duty(void){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0
	    	  double tFall = 0.0;
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	    	  double tRise = 0.0;
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	    	  double tEnd  = 0.0;
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    	  // Stop TIM2 Channel 1
	    	  TIM2->CCER &= ~TIM_CCER_CC1E;
 8001402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]

	    	  // Stop TIM2 Channel 2
	    	  TIM2->CCER &= ~TIM_CCER_CC2E;
 8001412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800141c:	f023 0310 	bic.w	r3, r3, #16
 8001420:	6213      	str	r3, [r2, #32]
	    	  TIM2->CNT = 0;
 8001422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
			// Start TIM2 Channel 1
			TIM2->CCER |= TIM_CCER_CC1E;
 800142a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]

			// Start TIM2 Channel 2
			TIM2->CCER |= TIM_CCER_CC2E;
 800143a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	6213      	str	r3, [r2, #32]
	    	  int ind = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
	    	  while(ind != 1001){
 800144e:	e0ba      	b.n	80015c6 <TIM_Duty+0x1ee>
	    		  if((TIM2->SR & 0x02)){
 8001450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d029      	beq.n	80014b2 <TIM_Duty+0xda>
	    			  if(tRise == 0.0){
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800146a:	f7ff fb3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00f      	beq.n	8001494 <TIM_Duty+0xbc>
	    				  tRise = TIM2->CCR1 / 4000000.0 ;
 8001474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f852 	bl	8000524 <__aeabi_ui2d>
 8001480:	a372      	add	r3, pc, #456	; (adr r3, 800164c <TIM_Duty+0x274>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f9f1 	bl	800086c <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001492:	e00e      	b.n	80014b2 <TIM_Duty+0xda>
	    			  }
	    			  else{
	    				  tEnd = TIM2->CCR1 / 4000000.0 ;
 8001494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f842 	bl	8000524 <__aeabi_ui2d>
 80014a0:	a36a      	add	r3, pc, #424	; (adr r3, 800164c <TIM_Duty+0x274>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f9e1 	bl	800086c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    			  }
	    		  }
	    		  if((TIM2->SR & 0x04)){
 80014b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00f      	beq.n	80014e0 <TIM_Duty+0x108>
	    			  	  tFall = (TIM2->CCR2 / 4000000.0) ;
 80014c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f82c 	bl	8000524 <__aeabi_ui2d>
 80014cc:	a35f      	add	r3, pc, #380	; (adr r3, 800164c <TIM_Duty+0x274>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9cb 	bl	800086c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	    			  	  continue;
 80014de:	e072      	b.n	80015c6 <TIM_Duty+0x1ee>
	    		  }
	    		  //We can calculate the duty cycle
	    		  if((tFall != 0.0) && (tRise != 0.0) && (tEnd != 0.0)){
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014ec:	f7ff fafc 	bl	8000ae8 <__aeabi_dcmpeq>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d000      	beq.n	80014f8 <TIM_Duty+0x120>
 80014f6:	e066      	b.n	80015c6 <TIM_Duty+0x1ee>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001504:	f7ff faf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d000      	beq.n	8001510 <TIM_Duty+0x138>
 800150e:	e05a      	b.n	80015c6 <TIM_Duty+0x1ee>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800151c:	f7ff fae4 	bl	8000ae8 <__aeabi_dcmpeq>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d000      	beq.n	8001528 <TIM_Duty+0x150>
 8001526:	e04e      	b.n	80015c6 <TIM_Duty+0x1ee>
	    			  //double tOn = tFall - tRise;
	    			  //double tOff = tEnd - tFall;
	    			  double prevDuty = .5;
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <TIM_Duty+0x268>)
 800152e:	e9c7 2300 	strd	r2, r3, [r7]
	    			  double DutyCyc = tFall / tRise;
 8001532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001536:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800153a:	f7ff f997 	bl	800086c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    			  //We throw out the first measurement because it hasnt seen the next pulse yet
	    			  if(ind != 0){
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d029      	beq.n	80015a0 <TIM_Duty+0x1c8>
	    				  if(DutyCyc > (prevDuty + .01)){
 800154c:	a33a      	add	r3, pc, #232	; (adr r3, 8001638 <TIM_Duty+0x260>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f7fe fea9 	bl	80002ac <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001562:	f7ff fae9 	bl	8000b38 <__aeabi_dcmpgt>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <TIM_Duty+0x19c>
	    					  DutyCyc = prevDuty;
 800156c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001570:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    				  }
	    			  prevDuty = DutyCyc;
 8001574:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001578:	e9c7 2300 	strd	r2, r3, [r7]
	    			  dutys[ind] = DutyCyc * 100;
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <TIM_Duty+0x26c>)
 8001582:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001586:	f7ff f847 	bl	8000618 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fadb 	bl	8000b4c <__aeabi_d2iz>
 8001596:	4602      	mov	r2, r0
 8001598:	492b      	ldr	r1, [pc, #172]	; (8001648 <TIM_Duty+0x270>)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    			  }

	    			  //reset the fall and end times
	    			  tFall = 0.0;
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	    			  tRise = tEnd;
 80015ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	    			  tEnd = 0.0;
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
					  ind ++;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	3301      	adds	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
	    	  while(ind != 1001){
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80015cc:	4293      	cmp	r3, r2
 80015ce:	f47f af3f 	bne.w	8001450 <TIM_Duty+0x78>

	    		  }

	    	  }
	    	  for(int i = 0; i < 1001; i ++){
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e015      	b.n	8001604 <TIM_Duty+0x22c>
	    		  if(dutys[i] > 10000){
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <TIM_Duty+0x270>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80015e4:	4293      	cmp	r3, r2
 80015e6:	dd0a      	ble.n	80015fe <TIM_Duty+0x226>
	    			  // Adjust for extremely high freq
	    			  dutys[i] = dutys[i] - 10000;
 80015e8:	4a17      	ldr	r2, [pc, #92]	; (8001648 <TIM_Duty+0x270>)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80015f4:	3b10      	subs	r3, #16
 80015f6:	4914      	ldr	r1, [pc, #80]	; (8001648 <TIM_Duty+0x270>)
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	    	  for(int i = 0; i < 1001; i ++){
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160a:	dde5      	ble.n	80015d8 <TIM_Duty+0x200>
	    		  }
	    	  }
	    	  ind = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
	    	  if((dutys[1] > dutys[2]) || dutys[1] < dutys[2]){
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <TIM_Duty+0x270>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <TIM_Duty+0x270>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	dc05      	bgt.n	8001628 <TIM_Duty+0x250>
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <TIM_Duty+0x270>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <TIM_Duty+0x270>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	429a      	cmp	r2, r3
 8001626:	da03      	bge.n	8001630 <TIM_Duty+0x258>
	    		  dutys[1] = dutys[2];
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <TIM_Duty+0x270>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <TIM_Duty+0x270>)
 800162e:	6053      	str	r3, [r2, #4]
	    	  }
}
 8001630:	bf00      	nop
 8001632:	3738      	adds	r7, #56	; 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	47ae147b 	.word	0x47ae147b
 800163c:	3f847ae1 	.word	0x3f847ae1
 8001640:	3fe00000 	.word	0x3fe00000
 8001644:	40590000 	.word	0x40590000
 8001648:	200012c0 	.word	0x200012c0
 800164c:	00000000 	.word	0x00000000
 8001650:	414e8480 	.word	0x414e8480

08001654 <UserInputs>:

void UserInputs(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
	uint8_t command[5];			// buffer for input command
	// 1. Print “Enter expected period or <CR> if no change”. Wait for user response

	    	printString("\r\nWould you like to use the default limits:\r\nLower: 450\r\nUpper: 550\r\n");
 800165a:	486a      	ldr	r0, [pc, #424]	; (8001804 <UserInputs+0x1b0>)
 800165c:	f7ff fbee 	bl	8000e3c <printString>
	    	char rx = USART_Read(USART2);
 8001660:	4869      	ldr	r0, [pc, #420]	; (8001808 <UserInputs+0x1b4>)
 8001662:	f000 fa8f 	bl	8001b84 <USART_Read>
 8001666:	4603      	mov	r3, r0
 8001668:	75fb      	strb	r3, [r7, #23]
	    	int i = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]

	    	while (rx != '\r'){										// loop waits for the return command before processing input
 800166e:	e010      	b.n	8001692 <UserInputs+0x3e>
	    		printChar(rx);
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fce2 	bl	800103c <printChar>
				command[i] = rx;									// adds input to buffer to process command
 8001678:	1d3a      	adds	r2, r7, #4
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4413      	add	r3, r2
 800167e:	7dfa      	ldrb	r2, [r7, #23]
 8001680:	701a      	strb	r2, [r3, #0]
				i++;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	3301      	adds	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
				rx = USART_Read(USART2);							// reads next character
 8001688:	485f      	ldr	r0, [pc, #380]	; (8001808 <UserInputs+0x1b4>)
 800168a:	f000 fa7b 	bl	8001b84 <USART_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
	    	while (rx != '\r'){										// loop waits for the return command before processing input
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b0d      	cmp	r3, #13
 8001696:	d1eb      	bne.n	8001670 <UserInputs+0x1c>
	    	}
	    	command[i] = '\0';										// terminates inputed command
 8001698:	1d3a      	adds	r2, r7, #4
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]

	    	for (int index = 0; index < i; index++){
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e01a      	b.n	80016de <UserInputs+0x8a>
	    		command[index] = tolower(command[index]);			// makes command case insensitive
 80016a8:	1d3a      	adds	r2, r7, #4
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	72fb      	strb	r3, [r7, #11]
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a55      	ldr	r2, [pc, #340]	; (800180c <UserInputs+0x1b8>)
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <UserInputs+0x76>
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	3320      	adds	r3, #32
 80016c8:	e000      	b.n	80016cc <UserInputs+0x78>
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	b2d9      	uxtb	r1, r3
 80016ce:	1d3a      	adds	r2, r7, #4
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	460a      	mov	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
	    	for (int index = 0; index < i; index++){
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbe0      	blt.n	80016a8 <UserInputs+0x54>
	    	}


	    	if (strcmp("yes", (char *) command)){					// checks for custom limits
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4849      	ldr	r0, [pc, #292]	; (8001810 <UserInputs+0x1bc>)
 80016ec:	f7fe fd70 	bl	80001d0 <strcmp>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d07c      	beq.n	80017f0 <UserInputs+0x19c>
	    		printString("\r\nWhat would you like the lower limit to be? (must be between 50 and 9950): ");
 80016f6:	4847      	ldr	r0, [pc, #284]	; (8001814 <UserInputs+0x1c0>)
 80016f8:	f7ff fba0 	bl	8000e3c <printString>
	    		rx = USART_Read(USART2);
 80016fc:	4842      	ldr	r0, [pc, #264]	; (8001808 <UserInputs+0x1b4>)
 80016fe:	f000 fa41 	bl	8001b84 <USART_Read>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
	    		i = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]

	    		while (rx != '\r'){									// loop waits for the return command before processing input
 800170a:	e010      	b.n	800172e <UserInputs+0xda>
					printChar(rx);
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc94 	bl	800103c <printChar>
					command[i] = rx;								// adds input to buffer to process input limit
 8001714:	1d3a      	adds	r2, r7, #4
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4413      	add	r3, r2
 800171a:	7dfa      	ldrb	r2, [r7, #23]
 800171c:	701a      	strb	r2, [r3, #0]
					i++;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3301      	adds	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
					rx = USART_Read(USART2);						// reads next character
 8001724:	4838      	ldr	r0, [pc, #224]	; (8001808 <UserInputs+0x1b4>)
 8001726:	f000 fa2d 	bl	8001b84 <USART_Read>
 800172a:	4603      	mov	r3, r0
 800172c:	75fb      	strb	r3, [r7, #23]
	    		while (rx != '\r'){									// loop waits for the return command before processing input
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b0d      	cmp	r3, #13
 8001732:	d1eb      	bne.n	800170c <UserInputs+0xb8>
	    		}
	    		command[i] = '\0';									// terminates inputed string for processing
 8001734:	1d3a      	adds	r2, r7, #4
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4413      	add	r3, r2
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
	    		i = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
	    		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fa8c 	bl	8001c62 <atoi>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b32      	ldr	r3, [pc, #200]	; (8001818 <UserInputs+0x1c4>)
 8001750:	601a      	str	r2, [r3, #0]

				while (lowerLimit < 50 || lowerLimit > 9950){
 8001752:	e02b      	b.n	80017ac <UserInputs+0x158>

					printString("\r\nLower limit must be between 50 and 950. Please enter a new limit: ");
 8001754:	4831      	ldr	r0, [pc, #196]	; (800181c <UserInputs+0x1c8>)
 8001756:	f7ff fb71 	bl	8000e3c <printString>
					rx = USART_Read(USART2);
 800175a:	482b      	ldr	r0, [pc, #172]	; (8001808 <UserInputs+0x1b4>)
 800175c:	f000 fa12 	bl	8001b84 <USART_Read>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]

					while (rx != '\r'){									// loop waits for the return command before processing input
 8001764:	e010      	b.n	8001788 <UserInputs+0x134>
						printChar(rx);
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc67 	bl	800103c <printChar>
						command[i] = rx;								// adds input to buffer to process input limit
 800176e:	1d3a      	adds	r2, r7, #4
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4413      	add	r3, r2
 8001774:	7dfa      	ldrb	r2, [r7, #23]
 8001776:	701a      	strb	r2, [r3, #0]
						i++;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	3301      	adds	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
						rx = USART_Read(USART2);						// reads next character
 800177e:	4822      	ldr	r0, [pc, #136]	; (8001808 <UserInputs+0x1b4>)
 8001780:	f000 fa00 	bl	8001b84 <USART_Read>
 8001784:	4603      	mov	r3, r0
 8001786:	75fb      	strb	r3, [r7, #23]
					while (rx != '\r'){									// loop waits for the return command before processing input
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b0d      	cmp	r3, #13
 800178c:	d1eb      	bne.n	8001766 <UserInputs+0x112>
					}

			   		command[i] = '\0';									// terminates inputed string for processing
 800178e:	1d3a      	adds	r2, r7, #4
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4413      	add	r3, r2
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
			   		i = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
			   		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fa5f 	bl	8001c62 <atoi>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <UserInputs+0x1c4>)
 80017aa:	601a      	str	r2, [r3, #0]
				while (lowerLimit < 50 || lowerLimit > 9950){
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <UserInputs+0x1c4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b31      	cmp	r3, #49	; 0x31
 80017b2:	d9cf      	bls.n	8001754 <UserInputs+0x100>
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <UserInputs+0x1c4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f242 62de 	movw	r2, #9950	; 0x26de
 80017bc:	4293      	cmp	r3, r2
 80017be:	d8c9      	bhi.n	8001754 <UserInputs+0x100>
				}
				upperLimit = lowerLimit + 100;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <UserInputs+0x1c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3364      	adds	r3, #100	; 0x64
 80017c6:	4a16      	ldr	r2, [pc, #88]	; (8001820 <UserInputs+0x1cc>)
 80017c8:	6013      	str	r3, [r2, #0]
				printString((char *) printf("\r\nLower limit: %lu, Upper limit: %lu", lowerLimit, upperLimit));
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <UserInputs+0x1c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <UserInputs+0x1cc>)
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <UserInputs+0x1d0>)
 80017d6:	f000 fccd 	bl	8002174 <iprintf>
 80017da:	4603      	mov	r3, r0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fb2d 	bl	8000e3c <printString>
				USART_Write(USART2, buffer, n);
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <UserInputs+0x1d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4910      	ldr	r1, [pc, #64]	; (800182c <UserInputs+0x1d8>)
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <UserInputs+0x1b4>)
 80017ec:	f000 f9df 	bl	8001bae <USART_Write>
	    	}
	    	printString("\r\n");					// starts a new line (since input may have been last thing to print)
 80017f0:	480f      	ldr	r0, [pc, #60]	; (8001830 <UserInputs+0x1dc>)
 80017f2:	f7ff fb23 	bl	8000e3c <printString>

	    	printString("Limits are currently set, program can run to calculate\r\n\r\n");
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <UserInputs+0x1e0>)
 80017f8:	f7ff fb20 	bl	8000e3c <printString>
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	080031a4 	.word	0x080031a4
 8001808:	40004400 	.word	0x40004400
 800180c:	080032eb 	.word	0x080032eb
 8001810:	080031ec 	.word	0x080031ec
 8001814:	080031f0 	.word	0x080031f0
 8001818:	20000000 	.word	0x20000000
 800181c:	08003240 	.word	0x08003240
 8001820:	20000004 	.word	0x20000004
 8001824:	08003288 	.word	0x08003288
 8001828:	20000318 	.word	0x20000318
 800182c:	20000120 	.word	0x20000120
 8001830:	0800316c 	.word	0x0800316c
 8001834:	080032b0 	.word	0x080032b0

08001838 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001842:	f000 fdff 	bl	8002444 <__errno>
 8001846:	4603      	mov	r3, r0
 8001848:	2216      	movs	r2, #22
 800184a:	601a      	str	r2, [r3, #0]
  return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_exit>:

void _exit (int status)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffe7 	bl	8001838 <_kill>
  while (1) {}    /* Make sure we hang here */
 800186a:	e7fe      	b.n	800186a <_exit+0x12>

0800186c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	4601      	mov	r1, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf0      	blt.n	800187e <_read+0x12>
  }

  return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e009      	b.n	80018cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf1      	blt.n	80018b8 <_write+0x12>
  }
  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001906:	605a      	str	r2, [r3, #4]
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_isatty>:

int _isatty(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f000 fd64 	bl	8002444 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20018000 	.word	0x20018000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20002268 	.word	0x20002268
 80019b0:	200023b8 	.word	0x200023b8

080019b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <USART2_Init>:
// UART Ports:
// ===================================================
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	/* Init the low level hardware : GPIO, CLOCK */
	uint32_t tmpreg;
	(void) tmpreg;	/// avoid compiler warning

	// enable USART2 CLK
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80019e0:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <USART2_Init+0x1a0>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4a64      	ldr	r2, [pc, #400]	; (8001b78 <USART2_Init+0x1a0>)
 80019e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
	tmpreg = RCC->APB1ENR1 & RCC_APB1ENR1_USART2EN;	// Delay after an RCC peripheral clock enabling
 80019ec:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <USART2_Init+0x1a0>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	617b      	str	r3, [r7, #20]

	// enable GPIOA CLK
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80019f6:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <USART2_Init+0x1a0>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a5f      	ldr	r2, [pc, #380]	; (8001b78 <USART2_Init+0x1a0>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
	tmpreg = RCC->AHB2ENR & RCC_AHB2ENR_GPIOAEN;		// Delay after an RCC peripheral clock enabling
 8001a02:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <USART2_Init+0x1a0>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 8001a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a1a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 8001a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a26:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001a2a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 8001a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a3a:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 8001a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a46:	f023 030c 	bic.w	r3, r3, #12
 8001a4a:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 8001a4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5a:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 8001a5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a6a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 8001a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a7a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 8001a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a86:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001a8a:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 8001a8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a9a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 8001a9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001aa6:	f043 0320 	orr.w	r3, r3, #32
 8001aaa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 8001aac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aba:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <USART2_Init+0x1a4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <USART2_Init+0x1a4>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <USART2_Init+0x1a4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <USART2_Init+0x1a4>)
 8001ace:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 8001ad2:	f023 031c 	bic.w	r3, r3, #28
 8001ad6:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <USART2_Init+0x1a4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <USART2_Init+0x1a4>)
 8001ade:	f043 030c 	orr.w	r3, r3, #12
 8001ae2:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <USART2_Init+0x1a4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a24      	ldr	r2, [pc, #144]	; (8001b7c <USART2_Init+0x1a4>)
 8001aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aee:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <USART2_Init+0x1a4>)
 8001af2:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <USART2_Init+0x1a4>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <USART2_Init+0x1a4>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <USART2_Init+0x1a4>)
 8001afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001b02:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <USART2_Init+0x1a4>)
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <USART2_Init+0x1a4>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <USART2_Init+0x1a8>)
 8001b0e:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	085a      	lsrs	r2, r3, #1
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	441a      	add	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	60fb      	str	r3, [r7, #12]
	USART2->BRR = usartdiv;
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <USART2_Init+0x1a4>)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <USART2_Init+0x1a4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <USART2_Init+0x1a4>)
 8001b2e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b32:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <USART2_Init+0x1a4>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <USART2_Init+0x1a4>)
 8001b3a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b3e:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <USART2_Init+0x1a4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <USART2_Init+0x1a4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8001b4c:	bf00      	nop
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <USART2_Init+0x1a4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f9      	beq.n	8001b4e <USART2_Init+0x176>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8001b5a:	bf00      	nop
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <USART2_Init+0x1a4>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f9      	beq.n	8001b5c <USART2_Init+0x184>
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40004400 	.word	0x40004400
 8001b80:	00f42400 	.word	0x00f42400

08001b84 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8001b8c:	bf00      	nop
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f9      	beq.n	8001b8e <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001bae:	b480      	push	{r7}
 8001bb0:	b087      	sub	sp, #28
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e010      	b.n	8001be2 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001bc0:	bf00      	nop
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f9      	beq.n	8001bc2 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d8ea      	bhi.n	8001bc0 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001bea:	bf00      	nop
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f9      	beq.n	8001bec <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	61da      	str	r2, [r3, #28]
}   
 8001c04:	bf00      	nop
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c14:	f7ff fece 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	; (8001c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <LoopForever+0xe>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	; (8001c5c <LoopForever+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f000 fc07 	bl	8002450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c42:	f7ff f8b3 	bl	8000dac <main>

08001c46 <LoopForever>:

LoopForever:
    b LoopForever
 8001c46:	e7fe      	b.n	8001c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c54:	08003428 	.word	0x08003428
  ldr r2, =_sbss
 8001c58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c5c:	200023b8 	.word	0x200023b8

08001c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_2_IRQHandler>

08001c62 <atoi>:
 8001c62:	220a      	movs	r2, #10
 8001c64:	2100      	movs	r1, #0
 8001c66:	f000 b95f 	b.w	8001f28 <strtol>
	...

08001c6c <calloc>:
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <calloc+0xc>)
 8001c6e:	460a      	mov	r2, r1
 8001c70:	4601      	mov	r1, r0
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f000 b802 	b.w	8001c7c <_calloc_r>
 8001c78:	20000064 	.word	0x20000064

08001c7c <_calloc_r>:
 8001c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c7e:	fba1 2402 	umull	r2, r4, r1, r2
 8001c82:	b94c      	cbnz	r4, 8001c98 <_calloc_r+0x1c>
 8001c84:	4611      	mov	r1, r2
 8001c86:	9201      	str	r2, [sp, #4]
 8001c88:	f000 f840 	bl	8001d0c <_malloc_r>
 8001c8c:	9a01      	ldr	r2, [sp, #4]
 8001c8e:	4605      	mov	r5, r0
 8001c90:	b930      	cbnz	r0, 8001ca0 <_calloc_r+0x24>
 8001c92:	4628      	mov	r0, r5
 8001c94:	b003      	add	sp, #12
 8001c96:	bd30      	pop	{r4, r5, pc}
 8001c98:	220c      	movs	r2, #12
 8001c9a:	6002      	str	r2, [r0, #0]
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	e7f8      	b.n	8001c92 <_calloc_r+0x16>
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	f000 fb71 	bl	8002388 <memset>
 8001ca6:	e7f4      	b.n	8001c92 <_calloc_r+0x16>

08001ca8 <exit>:
 8001ca8:	b508      	push	{r3, lr}
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <exit+0x1c>)
 8001cac:	4604      	mov	r4, r0
 8001cae:	b113      	cbz	r3, 8001cb6 <exit+0xe>
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	f3af 8000 	nop.w
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <exit+0x20>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b103      	cbz	r3, 8001cbe <exit+0x16>
 8001cbc:	4798      	blx	r3
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fdca 	bl	8001858 <_exit>
 8001cc4:	00000000 	.word	0x00000000
 8001cc8:	200023ac 	.word	0x200023ac

08001ccc <sbrk_aligned>:
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	4e0e      	ldr	r6, [pc, #56]	; (8001d08 <sbrk_aligned+0x3c>)
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	6831      	ldr	r1, [r6, #0]
 8001cd4:	4605      	mov	r5, r0
 8001cd6:	b911      	cbnz	r1, 8001cde <sbrk_aligned+0x12>
 8001cd8:	f000 fb92 	bl	8002400 <_sbrk_r>
 8001cdc:	6030      	str	r0, [r6, #0]
 8001cde:	4621      	mov	r1, r4
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	f000 fb8d 	bl	8002400 <_sbrk_r>
 8001ce6:	1c43      	adds	r3, r0, #1
 8001ce8:	d00a      	beq.n	8001d00 <sbrk_aligned+0x34>
 8001cea:	1cc4      	adds	r4, r0, #3
 8001cec:	f024 0403 	bic.w	r4, r4, #3
 8001cf0:	42a0      	cmp	r0, r4
 8001cf2:	d007      	beq.n	8001d04 <sbrk_aligned+0x38>
 8001cf4:	1a21      	subs	r1, r4, r0
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f000 fb82 	bl	8002400 <_sbrk_r>
 8001cfc:	3001      	adds	r0, #1
 8001cfe:	d101      	bne.n	8001d04 <sbrk_aligned+0x38>
 8001d00:	f04f 34ff 	mov.w	r4, #4294967295
 8001d04:	4620      	mov	r0, r4
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	20002270 	.word	0x20002270

08001d0c <_malloc_r>:
 8001d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d10:	1ccd      	adds	r5, r1, #3
 8001d12:	f025 0503 	bic.w	r5, r5, #3
 8001d16:	3508      	adds	r5, #8
 8001d18:	2d0c      	cmp	r5, #12
 8001d1a:	bf38      	it	cc
 8001d1c:	250c      	movcc	r5, #12
 8001d1e:	2d00      	cmp	r5, #0
 8001d20:	4607      	mov	r7, r0
 8001d22:	db01      	blt.n	8001d28 <_malloc_r+0x1c>
 8001d24:	42a9      	cmp	r1, r5
 8001d26:	d905      	bls.n	8001d34 <_malloc_r+0x28>
 8001d28:	230c      	movs	r3, #12
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	4630      	mov	r0, r6
 8001d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001e08 <_malloc_r+0xfc>
 8001d38:	f000 f868 	bl	8001e0c <__malloc_lock>
 8001d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8001d40:	461c      	mov	r4, r3
 8001d42:	bb5c      	cbnz	r4, 8001d9c <_malloc_r+0x90>
 8001d44:	4629      	mov	r1, r5
 8001d46:	4638      	mov	r0, r7
 8001d48:	f7ff ffc0 	bl	8001ccc <sbrk_aligned>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	4604      	mov	r4, r0
 8001d50:	d155      	bne.n	8001dfe <_malloc_r+0xf2>
 8001d52:	f8d8 4000 	ldr.w	r4, [r8]
 8001d56:	4626      	mov	r6, r4
 8001d58:	2e00      	cmp	r6, #0
 8001d5a:	d145      	bne.n	8001de8 <_malloc_r+0xdc>
 8001d5c:	2c00      	cmp	r4, #0
 8001d5e:	d048      	beq.n	8001df2 <_malloc_r+0xe6>
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	4631      	mov	r1, r6
 8001d64:	4638      	mov	r0, r7
 8001d66:	eb04 0903 	add.w	r9, r4, r3
 8001d6a:	f000 fb49 	bl	8002400 <_sbrk_r>
 8001d6e:	4581      	cmp	r9, r0
 8001d70:	d13f      	bne.n	8001df2 <_malloc_r+0xe6>
 8001d72:	6821      	ldr	r1, [r4, #0]
 8001d74:	1a6d      	subs	r5, r5, r1
 8001d76:	4629      	mov	r1, r5
 8001d78:	4638      	mov	r0, r7
 8001d7a:	f7ff ffa7 	bl	8001ccc <sbrk_aligned>
 8001d7e:	3001      	adds	r0, #1
 8001d80:	d037      	beq.n	8001df2 <_malloc_r+0xe6>
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	442b      	add	r3, r5
 8001d86:	6023      	str	r3, [r4, #0]
 8001d88:	f8d8 3000 	ldr.w	r3, [r8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d038      	beq.n	8001e02 <_malloc_r+0xf6>
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	42a2      	cmp	r2, r4
 8001d94:	d12b      	bne.n	8001dee <_malloc_r+0xe2>
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e00f      	b.n	8001dbc <_malloc_r+0xb0>
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	1b52      	subs	r2, r2, r5
 8001da0:	d41f      	bmi.n	8001de2 <_malloc_r+0xd6>
 8001da2:	2a0b      	cmp	r2, #11
 8001da4:	d917      	bls.n	8001dd6 <_malloc_r+0xca>
 8001da6:	1961      	adds	r1, r4, r5
 8001da8:	42a3      	cmp	r3, r4
 8001daa:	6025      	str	r5, [r4, #0]
 8001dac:	bf18      	it	ne
 8001dae:	6059      	strne	r1, [r3, #4]
 8001db0:	6863      	ldr	r3, [r4, #4]
 8001db2:	bf08      	it	eq
 8001db4:	f8c8 1000 	streq.w	r1, [r8]
 8001db8:	5162      	str	r2, [r4, r5]
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	4638      	mov	r0, r7
 8001dbe:	f104 060b 	add.w	r6, r4, #11
 8001dc2:	f000 f829 	bl	8001e18 <__malloc_unlock>
 8001dc6:	f026 0607 	bic.w	r6, r6, #7
 8001dca:	1d23      	adds	r3, r4, #4
 8001dcc:	1af2      	subs	r2, r6, r3
 8001dce:	d0ae      	beq.n	8001d2e <_malloc_r+0x22>
 8001dd0:	1b9b      	subs	r3, r3, r6
 8001dd2:	50a3      	str	r3, [r4, r2]
 8001dd4:	e7ab      	b.n	8001d2e <_malloc_r+0x22>
 8001dd6:	42a3      	cmp	r3, r4
 8001dd8:	6862      	ldr	r2, [r4, #4]
 8001dda:	d1dd      	bne.n	8001d98 <_malloc_r+0x8c>
 8001ddc:	f8c8 2000 	str.w	r2, [r8]
 8001de0:	e7ec      	b.n	8001dbc <_malloc_r+0xb0>
 8001de2:	4623      	mov	r3, r4
 8001de4:	6864      	ldr	r4, [r4, #4]
 8001de6:	e7ac      	b.n	8001d42 <_malloc_r+0x36>
 8001de8:	4634      	mov	r4, r6
 8001dea:	6876      	ldr	r6, [r6, #4]
 8001dec:	e7b4      	b.n	8001d58 <_malloc_r+0x4c>
 8001dee:	4613      	mov	r3, r2
 8001df0:	e7cc      	b.n	8001d8c <_malloc_r+0x80>
 8001df2:	230c      	movs	r3, #12
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4638      	mov	r0, r7
 8001df8:	f000 f80e 	bl	8001e18 <__malloc_unlock>
 8001dfc:	e797      	b.n	8001d2e <_malloc_r+0x22>
 8001dfe:	6025      	str	r5, [r4, #0]
 8001e00:	e7dc      	b.n	8001dbc <_malloc_r+0xb0>
 8001e02:	605b      	str	r3, [r3, #4]
 8001e04:	deff      	udf	#255	; 0xff
 8001e06:	bf00      	nop
 8001e08:	2000226c 	.word	0x2000226c

08001e0c <__malloc_lock>:
 8001e0c:	4801      	ldr	r0, [pc, #4]	; (8001e14 <__malloc_lock+0x8>)
 8001e0e:	f000 bb44 	b.w	800249a <__retarget_lock_acquire_recursive>
 8001e12:	bf00      	nop
 8001e14:	200023b4 	.word	0x200023b4

08001e18 <__malloc_unlock>:
 8001e18:	4801      	ldr	r0, [pc, #4]	; (8001e20 <__malloc_unlock+0x8>)
 8001e1a:	f000 bb3f 	b.w	800249c <__retarget_lock_release_recursive>
 8001e1e:	bf00      	nop
 8001e20:	200023b4 	.word	0x200023b4

08001e24 <_strtol_l.constprop.0>:
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e2a:	d001      	beq.n	8001e30 <_strtol_l.constprop.0+0xc>
 8001e2c:	2b24      	cmp	r3, #36	; 0x24
 8001e2e:	d906      	bls.n	8001e3e <_strtol_l.constprop.0+0x1a>
 8001e30:	f000 fb08 	bl	8002444 <__errno>
 8001e34:	2316      	movs	r3, #22
 8001e36:	6003      	str	r3, [r0, #0]
 8001e38:	2000      	movs	r0, #0
 8001e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001f24 <_strtol_l.constprop.0+0x100>
 8001e42:	460d      	mov	r5, r1
 8001e44:	462e      	mov	r6, r5
 8001e46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001e4a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8001e4e:	f017 0708 	ands.w	r7, r7, #8
 8001e52:	d1f7      	bne.n	8001e44 <_strtol_l.constprop.0+0x20>
 8001e54:	2c2d      	cmp	r4, #45	; 0x2d
 8001e56:	d132      	bne.n	8001ebe <_strtol_l.constprop.0+0x9a>
 8001e58:	782c      	ldrb	r4, [r5, #0]
 8001e5a:	2701      	movs	r7, #1
 8001e5c:	1cb5      	adds	r5, r6, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d05b      	beq.n	8001f1a <_strtol_l.constprop.0+0xf6>
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d109      	bne.n	8001e7a <_strtol_l.constprop.0+0x56>
 8001e66:	2c30      	cmp	r4, #48	; 0x30
 8001e68:	d107      	bne.n	8001e7a <_strtol_l.constprop.0+0x56>
 8001e6a:	782c      	ldrb	r4, [r5, #0]
 8001e6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001e70:	2c58      	cmp	r4, #88	; 0x58
 8001e72:	d14d      	bne.n	8001f10 <_strtol_l.constprop.0+0xec>
 8001e74:	786c      	ldrb	r4, [r5, #1]
 8001e76:	2310      	movs	r3, #16
 8001e78:	3502      	adds	r5, #2
 8001e7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8001e7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8001e82:	f04f 0e00 	mov.w	lr, #0
 8001e86:	fbb8 f9f3 	udiv	r9, r8, r3
 8001e8a:	4676      	mov	r6, lr
 8001e8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8001e90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001e94:	f1bc 0f09 	cmp.w	ip, #9
 8001e98:	d816      	bhi.n	8001ec8 <_strtol_l.constprop.0+0xa4>
 8001e9a:	4664      	mov	r4, ip
 8001e9c:	42a3      	cmp	r3, r4
 8001e9e:	dd24      	ble.n	8001eea <_strtol_l.constprop.0+0xc6>
 8001ea0:	f1be 3fff 	cmp.w	lr, #4294967295
 8001ea4:	d008      	beq.n	8001eb8 <_strtol_l.constprop.0+0x94>
 8001ea6:	45b1      	cmp	r9, r6
 8001ea8:	d31c      	bcc.n	8001ee4 <_strtol_l.constprop.0+0xc0>
 8001eaa:	d101      	bne.n	8001eb0 <_strtol_l.constprop.0+0x8c>
 8001eac:	45a2      	cmp	sl, r4
 8001eae:	db19      	blt.n	8001ee4 <_strtol_l.constprop.0+0xc0>
 8001eb0:	fb06 4603 	mla	r6, r6, r3, r4
 8001eb4:	f04f 0e01 	mov.w	lr, #1
 8001eb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001ebc:	e7e8      	b.n	8001e90 <_strtol_l.constprop.0+0x6c>
 8001ebe:	2c2b      	cmp	r4, #43	; 0x2b
 8001ec0:	bf04      	itt	eq
 8001ec2:	782c      	ldrbeq	r4, [r5, #0]
 8001ec4:	1cb5      	addeq	r5, r6, #2
 8001ec6:	e7ca      	b.n	8001e5e <_strtol_l.constprop.0+0x3a>
 8001ec8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001ecc:	f1bc 0f19 	cmp.w	ip, #25
 8001ed0:	d801      	bhi.n	8001ed6 <_strtol_l.constprop.0+0xb2>
 8001ed2:	3c37      	subs	r4, #55	; 0x37
 8001ed4:	e7e2      	b.n	8001e9c <_strtol_l.constprop.0+0x78>
 8001ed6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001eda:	f1bc 0f19 	cmp.w	ip, #25
 8001ede:	d804      	bhi.n	8001eea <_strtol_l.constprop.0+0xc6>
 8001ee0:	3c57      	subs	r4, #87	; 0x57
 8001ee2:	e7db      	b.n	8001e9c <_strtol_l.constprop.0+0x78>
 8001ee4:	f04f 3eff 	mov.w	lr, #4294967295
 8001ee8:	e7e6      	b.n	8001eb8 <_strtol_l.constprop.0+0x94>
 8001eea:	f1be 3fff 	cmp.w	lr, #4294967295
 8001eee:	d105      	bne.n	8001efc <_strtol_l.constprop.0+0xd8>
 8001ef0:	2322      	movs	r3, #34	; 0x22
 8001ef2:	6003      	str	r3, [r0, #0]
 8001ef4:	4646      	mov	r6, r8
 8001ef6:	b942      	cbnz	r2, 8001f0a <_strtol_l.constprop.0+0xe6>
 8001ef8:	4630      	mov	r0, r6
 8001efa:	e79e      	b.n	8001e3a <_strtol_l.constprop.0+0x16>
 8001efc:	b107      	cbz	r7, 8001f00 <_strtol_l.constprop.0+0xdc>
 8001efe:	4276      	negs	r6, r6
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d0f9      	beq.n	8001ef8 <_strtol_l.constprop.0+0xd4>
 8001f04:	f1be 0f00 	cmp.w	lr, #0
 8001f08:	d000      	beq.n	8001f0c <_strtol_l.constprop.0+0xe8>
 8001f0a:	1e69      	subs	r1, r5, #1
 8001f0c:	6011      	str	r1, [r2, #0]
 8001f0e:	e7f3      	b.n	8001ef8 <_strtol_l.constprop.0+0xd4>
 8001f10:	2430      	movs	r4, #48	; 0x30
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1b1      	bne.n	8001e7a <_strtol_l.constprop.0+0x56>
 8001f16:	2308      	movs	r3, #8
 8001f18:	e7af      	b.n	8001e7a <_strtol_l.constprop.0+0x56>
 8001f1a:	2c30      	cmp	r4, #48	; 0x30
 8001f1c:	d0a5      	beq.n	8001e6a <_strtol_l.constprop.0+0x46>
 8001f1e:	230a      	movs	r3, #10
 8001f20:	e7ab      	b.n	8001e7a <_strtol_l.constprop.0+0x56>
 8001f22:	bf00      	nop
 8001f24:	080032ec 	.word	0x080032ec

08001f28 <strtol>:
 8001f28:	4613      	mov	r3, r2
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	4601      	mov	r1, r0
 8001f2e:	4802      	ldr	r0, [pc, #8]	; (8001f38 <strtol+0x10>)
 8001f30:	6800      	ldr	r0, [r0, #0]
 8001f32:	f7ff bf77 	b.w	8001e24 <_strtol_l.constprop.0>
 8001f36:	bf00      	nop
 8001f38:	20000064 	.word	0x20000064

08001f3c <std>:
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	4604      	mov	r4, r0
 8001f42:	e9c0 3300 	strd	r3, r3, [r0]
 8001f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f4a:	6083      	str	r3, [r0, #8]
 8001f4c:	8181      	strh	r1, [r0, #12]
 8001f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8001f50:	81c2      	strh	r2, [r0, #14]
 8001f52:	6183      	str	r3, [r0, #24]
 8001f54:	4619      	mov	r1, r3
 8001f56:	2208      	movs	r2, #8
 8001f58:	305c      	adds	r0, #92	; 0x5c
 8001f5a:	f000 fa15 	bl	8002388 <memset>
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <std+0x58>)
 8001f60:	6263      	str	r3, [r4, #36]	; 0x24
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <std+0x5c>)
 8001f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <std+0x60>)
 8001f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <std+0x64>)
 8001f6c:	6323      	str	r3, [r4, #48]	; 0x30
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <std+0x68>)
 8001f70:	6224      	str	r4, [r4, #32]
 8001f72:	429c      	cmp	r4, r3
 8001f74:	d006      	beq.n	8001f84 <std+0x48>
 8001f76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001f7a:	4294      	cmp	r4, r2
 8001f7c:	d002      	beq.n	8001f84 <std+0x48>
 8001f7e:	33d0      	adds	r3, #208	; 0xd0
 8001f80:	429c      	cmp	r4, r3
 8001f82:	d105      	bne.n	8001f90 <std+0x54>
 8001f84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f8c:	f000 ba84 	b.w	8002498 <__retarget_lock_init_recursive>
 8001f90:	bd10      	pop	{r4, pc}
 8001f92:	bf00      	nop
 8001f94:	080021d9 	.word	0x080021d9
 8001f98:	080021fb 	.word	0x080021fb
 8001f9c:	08002233 	.word	0x08002233
 8001fa0:	08002257 	.word	0x08002257
 8001fa4:	20002274 	.word	0x20002274

08001fa8 <stdio_exit_handler>:
 8001fa8:	4a02      	ldr	r2, [pc, #8]	; (8001fb4 <stdio_exit_handler+0xc>)
 8001faa:	4903      	ldr	r1, [pc, #12]	; (8001fb8 <stdio_exit_handler+0x10>)
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <stdio_exit_handler+0x14>)
 8001fae:	f000 b869 	b.w	8002084 <_fwalk_sglue>
 8001fb2:	bf00      	nop
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	08002e9d 	.word	0x08002e9d
 8001fbc:	20000018 	.word	0x20000018

08001fc0 <cleanup_stdio>:
 8001fc0:	6841      	ldr	r1, [r0, #4]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <cleanup_stdio+0x34>)
 8001fc4:	4299      	cmp	r1, r3
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	4604      	mov	r4, r0
 8001fca:	d001      	beq.n	8001fd0 <cleanup_stdio+0x10>
 8001fcc:	f000 ff66 	bl	8002e9c <_fflush_r>
 8001fd0:	68a1      	ldr	r1, [r4, #8]
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <cleanup_stdio+0x38>)
 8001fd4:	4299      	cmp	r1, r3
 8001fd6:	d002      	beq.n	8001fde <cleanup_stdio+0x1e>
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f000 ff5f 	bl	8002e9c <_fflush_r>
 8001fde:	68e1      	ldr	r1, [r4, #12]
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <cleanup_stdio+0x3c>)
 8001fe2:	4299      	cmp	r1, r3
 8001fe4:	d004      	beq.n	8001ff0 <cleanup_stdio+0x30>
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fec:	f000 bf56 	b.w	8002e9c <_fflush_r>
 8001ff0:	bd10      	pop	{r4, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20002274 	.word	0x20002274
 8001ff8:	200022dc 	.word	0x200022dc
 8001ffc:	20002344 	.word	0x20002344

08002000 <global_stdio_init.part.0>:
 8002000:	b510      	push	{r4, lr}
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <global_stdio_init.part.0+0x30>)
 8002004:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <global_stdio_init.part.0+0x34>)
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <global_stdio_init.part.0+0x38>)
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	4620      	mov	r0, r4
 800200c:	2200      	movs	r2, #0
 800200e:	2104      	movs	r1, #4
 8002010:	f7ff ff94 	bl	8001f3c <std>
 8002014:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002018:	2201      	movs	r2, #1
 800201a:	2109      	movs	r1, #9
 800201c:	f7ff ff8e 	bl	8001f3c <std>
 8002020:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002024:	2202      	movs	r2, #2
 8002026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800202a:	2112      	movs	r1, #18
 800202c:	f7ff bf86 	b.w	8001f3c <std>
 8002030:	200023ac 	.word	0x200023ac
 8002034:	20002274 	.word	0x20002274
 8002038:	08001fa9 	.word	0x08001fa9

0800203c <__sfp_lock_acquire>:
 800203c:	4801      	ldr	r0, [pc, #4]	; (8002044 <__sfp_lock_acquire+0x8>)
 800203e:	f000 ba2c 	b.w	800249a <__retarget_lock_acquire_recursive>
 8002042:	bf00      	nop
 8002044:	200023b5 	.word	0x200023b5

08002048 <__sfp_lock_release>:
 8002048:	4801      	ldr	r0, [pc, #4]	; (8002050 <__sfp_lock_release+0x8>)
 800204a:	f000 ba27 	b.w	800249c <__retarget_lock_release_recursive>
 800204e:	bf00      	nop
 8002050:	200023b5 	.word	0x200023b5

08002054 <__sinit>:
 8002054:	b510      	push	{r4, lr}
 8002056:	4604      	mov	r4, r0
 8002058:	f7ff fff0 	bl	800203c <__sfp_lock_acquire>
 800205c:	6a23      	ldr	r3, [r4, #32]
 800205e:	b11b      	cbz	r3, 8002068 <__sinit+0x14>
 8002060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002064:	f7ff bff0 	b.w	8002048 <__sfp_lock_release>
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__sinit+0x28>)
 800206a:	6223      	str	r3, [r4, #32]
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__sinit+0x2c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f5      	bne.n	8002060 <__sinit+0xc>
 8002074:	f7ff ffc4 	bl	8002000 <global_stdio_init.part.0>
 8002078:	e7f2      	b.n	8002060 <__sinit+0xc>
 800207a:	bf00      	nop
 800207c:	08001fc1 	.word	0x08001fc1
 8002080:	200023ac 	.word	0x200023ac

08002084 <_fwalk_sglue>:
 8002084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002088:	4607      	mov	r7, r0
 800208a:	4688      	mov	r8, r1
 800208c:	4614      	mov	r4, r2
 800208e:	2600      	movs	r6, #0
 8002090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002094:	f1b9 0901 	subs.w	r9, r9, #1
 8002098:	d505      	bpl.n	80020a6 <_fwalk_sglue+0x22>
 800209a:	6824      	ldr	r4, [r4, #0]
 800209c:	2c00      	cmp	r4, #0
 800209e:	d1f7      	bne.n	8002090 <_fwalk_sglue+0xc>
 80020a0:	4630      	mov	r0, r6
 80020a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020a6:	89ab      	ldrh	r3, [r5, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d907      	bls.n	80020bc <_fwalk_sglue+0x38>
 80020ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020b0:	3301      	adds	r3, #1
 80020b2:	d003      	beq.n	80020bc <_fwalk_sglue+0x38>
 80020b4:	4629      	mov	r1, r5
 80020b6:	4638      	mov	r0, r7
 80020b8:	47c0      	blx	r8
 80020ba:	4306      	orrs	r6, r0
 80020bc:	3568      	adds	r5, #104	; 0x68
 80020be:	e7e9      	b.n	8002094 <_fwalk_sglue+0x10>

080020c0 <_fwrite_r>:
 80020c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c4:	9c08      	ldr	r4, [sp, #32]
 80020c6:	468a      	mov	sl, r1
 80020c8:	4690      	mov	r8, r2
 80020ca:	fb02 f903 	mul.w	r9, r2, r3
 80020ce:	4606      	mov	r6, r0
 80020d0:	b118      	cbz	r0, 80020da <_fwrite_r+0x1a>
 80020d2:	6a03      	ldr	r3, [r0, #32]
 80020d4:	b90b      	cbnz	r3, 80020da <_fwrite_r+0x1a>
 80020d6:	f7ff ffbd 	bl	8002054 <__sinit>
 80020da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020dc:	07dd      	lsls	r5, r3, #31
 80020de:	d405      	bmi.n	80020ec <_fwrite_r+0x2c>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	0598      	lsls	r0, r3, #22
 80020e4:	d402      	bmi.n	80020ec <_fwrite_r+0x2c>
 80020e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020e8:	f000 f9d7 	bl	800249a <__retarget_lock_acquire_recursive>
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	0719      	lsls	r1, r3, #28
 80020f0:	d516      	bpl.n	8002120 <_fwrite_r+0x60>
 80020f2:	6923      	ldr	r3, [r4, #16]
 80020f4:	b1a3      	cbz	r3, 8002120 <_fwrite_r+0x60>
 80020f6:	2500      	movs	r5, #0
 80020f8:	454d      	cmp	r5, r9
 80020fa:	d01f      	beq.n	800213c <_fwrite_r+0x7c>
 80020fc:	68a7      	ldr	r7, [r4, #8]
 80020fe:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8002102:	3f01      	subs	r7, #1
 8002104:	2f00      	cmp	r7, #0
 8002106:	60a7      	str	r7, [r4, #8]
 8002108:	da04      	bge.n	8002114 <_fwrite_r+0x54>
 800210a:	69a3      	ldr	r3, [r4, #24]
 800210c:	429f      	cmp	r7, r3
 800210e:	db0f      	blt.n	8002130 <_fwrite_r+0x70>
 8002110:	290a      	cmp	r1, #10
 8002112:	d00d      	beq.n	8002130 <_fwrite_r+0x70>
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	6022      	str	r2, [r4, #0]
 800211a:	7019      	strb	r1, [r3, #0]
 800211c:	3501      	adds	r5, #1
 800211e:	e7eb      	b.n	80020f8 <_fwrite_r+0x38>
 8002120:	4621      	mov	r1, r4
 8002122:	4630      	mov	r0, r6
 8002124:	f000 f8d8 	bl	80022d8 <__swsetup_r>
 8002128:	2800      	cmp	r0, #0
 800212a:	d0e4      	beq.n	80020f6 <_fwrite_r+0x36>
 800212c:	2500      	movs	r5, #0
 800212e:	e005      	b.n	800213c <_fwrite_r+0x7c>
 8002130:	4622      	mov	r2, r4
 8002132:	4630      	mov	r0, r6
 8002134:	f000 f893 	bl	800225e <__swbuf_r>
 8002138:	3001      	adds	r0, #1
 800213a:	d1ef      	bne.n	800211c <_fwrite_r+0x5c>
 800213c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800213e:	07da      	lsls	r2, r3, #31
 8002140:	d405      	bmi.n	800214e <_fwrite_r+0x8e>
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	059b      	lsls	r3, r3, #22
 8002146:	d402      	bmi.n	800214e <_fwrite_r+0x8e>
 8002148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800214a:	f000 f9a7 	bl	800249c <__retarget_lock_release_recursive>
 800214e:	fbb5 f0f8 	udiv	r0, r5, r8
 8002152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002158 <fwrite>:
 8002158:	b507      	push	{r0, r1, r2, lr}
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	460a      	mov	r2, r1
 8002160:	4601      	mov	r1, r0
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <fwrite+0x18>)
 8002164:	6800      	ldr	r0, [r0, #0]
 8002166:	f7ff ffab 	bl	80020c0 <_fwrite_r>
 800216a:	b003      	add	sp, #12
 800216c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002170:	20000064 	.word	0x20000064

08002174 <iprintf>:
 8002174:	b40f      	push	{r0, r1, r2, r3}
 8002176:	b507      	push	{r0, r1, r2, lr}
 8002178:	4906      	ldr	r1, [pc, #24]	; (8002194 <iprintf+0x20>)
 800217a:	ab04      	add	r3, sp, #16
 800217c:	6808      	ldr	r0, [r1, #0]
 800217e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002182:	6881      	ldr	r1, [r0, #8]
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	f000 fb59 	bl	800283c <_vfiprintf_r>
 800218a:	b003      	add	sp, #12
 800218c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002190:	b004      	add	sp, #16
 8002192:	4770      	bx	lr
 8002194:	20000064 	.word	0x20000064

08002198 <siprintf>:
 8002198:	b40e      	push	{r1, r2, r3}
 800219a:	b500      	push	{lr}
 800219c:	b09c      	sub	sp, #112	; 0x70
 800219e:	ab1d      	add	r3, sp, #116	; 0x74
 80021a0:	9002      	str	r0, [sp, #8]
 80021a2:	9006      	str	r0, [sp, #24]
 80021a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021a8:	4809      	ldr	r0, [pc, #36]	; (80021d0 <siprintf+0x38>)
 80021aa:	9107      	str	r1, [sp, #28]
 80021ac:	9104      	str	r1, [sp, #16]
 80021ae:	4909      	ldr	r1, [pc, #36]	; (80021d4 <siprintf+0x3c>)
 80021b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80021b4:	9105      	str	r1, [sp, #20]
 80021b6:	6800      	ldr	r0, [r0, #0]
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	a902      	add	r1, sp, #8
 80021bc:	f000 fa16 	bl	80025ec <_svfiprintf_r>
 80021c0:	9b02      	ldr	r3, [sp, #8]
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	b01c      	add	sp, #112	; 0x70
 80021c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021cc:	b003      	add	sp, #12
 80021ce:	4770      	bx	lr
 80021d0:	20000064 	.word	0x20000064
 80021d4:	ffff0208 	.word	0xffff0208

080021d8 <__sread>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	460c      	mov	r4, r1
 80021dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e0:	f000 f8fc 	bl	80023dc <_read_r>
 80021e4:	2800      	cmp	r0, #0
 80021e6:	bfab      	itete	ge
 80021e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ea:	89a3      	ldrhlt	r3, [r4, #12]
 80021ec:	181b      	addge	r3, r3, r0
 80021ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021f2:	bfac      	ite	ge
 80021f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80021f6:	81a3      	strhlt	r3, [r4, #12]
 80021f8:	bd10      	pop	{r4, pc}

080021fa <__swrite>:
 80021fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fe:	461f      	mov	r7, r3
 8002200:	898b      	ldrh	r3, [r1, #12]
 8002202:	05db      	lsls	r3, r3, #23
 8002204:	4605      	mov	r5, r0
 8002206:	460c      	mov	r4, r1
 8002208:	4616      	mov	r6, r2
 800220a:	d505      	bpl.n	8002218 <__swrite+0x1e>
 800220c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002210:	2302      	movs	r3, #2
 8002212:	2200      	movs	r2, #0
 8002214:	f000 f8d0 	bl	80023b8 <_lseek_r>
 8002218:	89a3      	ldrh	r3, [r4, #12]
 800221a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800221e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002222:	81a3      	strh	r3, [r4, #12]
 8002224:	4632      	mov	r2, r6
 8002226:	463b      	mov	r3, r7
 8002228:	4628      	mov	r0, r5
 800222a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800222e:	f000 b8f7 	b.w	8002420 <_write_r>

08002232 <__sseek>:
 8002232:	b510      	push	{r4, lr}
 8002234:	460c      	mov	r4, r1
 8002236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800223a:	f000 f8bd 	bl	80023b8 <_lseek_r>
 800223e:	1c43      	adds	r3, r0, #1
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	bf15      	itete	ne
 8002244:	6560      	strne	r0, [r4, #84]	; 0x54
 8002246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800224a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800224e:	81a3      	strheq	r3, [r4, #12]
 8002250:	bf18      	it	ne
 8002252:	81a3      	strhne	r3, [r4, #12]
 8002254:	bd10      	pop	{r4, pc}

08002256 <__sclose>:
 8002256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225a:	f000 b89d 	b.w	8002398 <_close_r>

0800225e <__swbuf_r>:
 800225e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002260:	460e      	mov	r6, r1
 8002262:	4614      	mov	r4, r2
 8002264:	4605      	mov	r5, r0
 8002266:	b118      	cbz	r0, 8002270 <__swbuf_r+0x12>
 8002268:	6a03      	ldr	r3, [r0, #32]
 800226a:	b90b      	cbnz	r3, 8002270 <__swbuf_r+0x12>
 800226c:	f7ff fef2 	bl	8002054 <__sinit>
 8002270:	69a3      	ldr	r3, [r4, #24]
 8002272:	60a3      	str	r3, [r4, #8]
 8002274:	89a3      	ldrh	r3, [r4, #12]
 8002276:	071a      	lsls	r2, r3, #28
 8002278:	d525      	bpl.n	80022c6 <__swbuf_r+0x68>
 800227a:	6923      	ldr	r3, [r4, #16]
 800227c:	b31b      	cbz	r3, 80022c6 <__swbuf_r+0x68>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	6922      	ldr	r2, [r4, #16]
 8002282:	1a98      	subs	r0, r3, r2
 8002284:	6963      	ldr	r3, [r4, #20]
 8002286:	b2f6      	uxtb	r6, r6
 8002288:	4283      	cmp	r3, r0
 800228a:	4637      	mov	r7, r6
 800228c:	dc04      	bgt.n	8002298 <__swbuf_r+0x3a>
 800228e:	4621      	mov	r1, r4
 8002290:	4628      	mov	r0, r5
 8002292:	f000 fe03 	bl	8002e9c <_fflush_r>
 8002296:	b9e0      	cbnz	r0, 80022d2 <__swbuf_r+0x74>
 8002298:	68a3      	ldr	r3, [r4, #8]
 800229a:	3b01      	subs	r3, #1
 800229c:	60a3      	str	r3, [r4, #8]
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	6022      	str	r2, [r4, #0]
 80022a4:	701e      	strb	r6, [r3, #0]
 80022a6:	6962      	ldr	r2, [r4, #20]
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d004      	beq.n	80022b8 <__swbuf_r+0x5a>
 80022ae:	89a3      	ldrh	r3, [r4, #12]
 80022b0:	07db      	lsls	r3, r3, #31
 80022b2:	d506      	bpl.n	80022c2 <__swbuf_r+0x64>
 80022b4:	2e0a      	cmp	r6, #10
 80022b6:	d104      	bne.n	80022c2 <__swbuf_r+0x64>
 80022b8:	4621      	mov	r1, r4
 80022ba:	4628      	mov	r0, r5
 80022bc:	f000 fdee 	bl	8002e9c <_fflush_r>
 80022c0:	b938      	cbnz	r0, 80022d2 <__swbuf_r+0x74>
 80022c2:	4638      	mov	r0, r7
 80022c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c6:	4621      	mov	r1, r4
 80022c8:	4628      	mov	r0, r5
 80022ca:	f000 f805 	bl	80022d8 <__swsetup_r>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d0d5      	beq.n	800227e <__swbuf_r+0x20>
 80022d2:	f04f 37ff 	mov.w	r7, #4294967295
 80022d6:	e7f4      	b.n	80022c2 <__swbuf_r+0x64>

080022d8 <__swsetup_r>:
 80022d8:	b538      	push	{r3, r4, r5, lr}
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <__swsetup_r+0xac>)
 80022dc:	4605      	mov	r5, r0
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	460c      	mov	r4, r1
 80022e2:	b118      	cbz	r0, 80022ec <__swsetup_r+0x14>
 80022e4:	6a03      	ldr	r3, [r0, #32]
 80022e6:	b90b      	cbnz	r3, 80022ec <__swsetup_r+0x14>
 80022e8:	f7ff feb4 	bl	8002054 <__sinit>
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022f2:	0718      	lsls	r0, r3, #28
 80022f4:	d422      	bmi.n	800233c <__swsetup_r+0x64>
 80022f6:	06d9      	lsls	r1, r3, #27
 80022f8:	d407      	bmi.n	800230a <__swsetup_r+0x32>
 80022fa:	2309      	movs	r3, #9
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002302:	81a3      	strh	r3, [r4, #12]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	e034      	b.n	8002374 <__swsetup_r+0x9c>
 800230a:	0758      	lsls	r0, r3, #29
 800230c:	d512      	bpl.n	8002334 <__swsetup_r+0x5c>
 800230e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002310:	b141      	cbz	r1, 8002324 <__swsetup_r+0x4c>
 8002312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002316:	4299      	cmp	r1, r3
 8002318:	d002      	beq.n	8002320 <__swsetup_r+0x48>
 800231a:	4628      	mov	r0, r5
 800231c:	f000 f8c0 	bl	80024a0 <_free_r>
 8002320:	2300      	movs	r3, #0
 8002322:	6363      	str	r3, [r4, #52]	; 0x34
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800232a:	81a3      	strh	r3, [r4, #12]
 800232c:	2300      	movs	r3, #0
 800232e:	6063      	str	r3, [r4, #4]
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	6023      	str	r3, [r4, #0]
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	f043 0308 	orr.w	r3, r3, #8
 800233a:	81a3      	strh	r3, [r4, #12]
 800233c:	6923      	ldr	r3, [r4, #16]
 800233e:	b94b      	cbnz	r3, 8002354 <__swsetup_r+0x7c>
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234a:	d003      	beq.n	8002354 <__swsetup_r+0x7c>
 800234c:	4621      	mov	r1, r4
 800234e:	4628      	mov	r0, r5
 8002350:	f000 fdf2 	bl	8002f38 <__smakebuf_r>
 8002354:	89a0      	ldrh	r0, [r4, #12]
 8002356:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800235a:	f010 0301 	ands.w	r3, r0, #1
 800235e:	d00a      	beq.n	8002376 <__swsetup_r+0x9e>
 8002360:	2300      	movs	r3, #0
 8002362:	60a3      	str	r3, [r4, #8]
 8002364:	6963      	ldr	r3, [r4, #20]
 8002366:	425b      	negs	r3, r3
 8002368:	61a3      	str	r3, [r4, #24]
 800236a:	6923      	ldr	r3, [r4, #16]
 800236c:	b943      	cbnz	r3, 8002380 <__swsetup_r+0xa8>
 800236e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002372:	d1c4      	bne.n	80022fe <__swsetup_r+0x26>
 8002374:	bd38      	pop	{r3, r4, r5, pc}
 8002376:	0781      	lsls	r1, r0, #30
 8002378:	bf58      	it	pl
 800237a:	6963      	ldrpl	r3, [r4, #20]
 800237c:	60a3      	str	r3, [r4, #8]
 800237e:	e7f4      	b.n	800236a <__swsetup_r+0x92>
 8002380:	2000      	movs	r0, #0
 8002382:	e7f7      	b.n	8002374 <__swsetup_r+0x9c>
 8002384:	20000064 	.word	0x20000064

08002388 <memset>:
 8002388:	4402      	add	r2, r0
 800238a:	4603      	mov	r3, r0
 800238c:	4293      	cmp	r3, r2
 800238e:	d100      	bne.n	8002392 <memset+0xa>
 8002390:	4770      	bx	lr
 8002392:	f803 1b01 	strb.w	r1, [r3], #1
 8002396:	e7f9      	b.n	800238c <memset+0x4>

08002398 <_close_r>:
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	4d06      	ldr	r5, [pc, #24]	; (80023b4 <_close_r+0x1c>)
 800239c:	2300      	movs	r3, #0
 800239e:	4604      	mov	r4, r0
 80023a0:	4608      	mov	r0, r1
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	f7ff fa9b 	bl	80018de <_close>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d102      	bne.n	80023b2 <_close_r+0x1a>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	b103      	cbz	r3, 80023b2 <_close_r+0x1a>
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	200023b0 	.word	0x200023b0

080023b8 <_lseek_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4d07      	ldr	r5, [pc, #28]	; (80023d8 <_lseek_r+0x20>)
 80023bc:	4604      	mov	r4, r0
 80023be:	4608      	mov	r0, r1
 80023c0:	4611      	mov	r1, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	602a      	str	r2, [r5, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f7ff fab0 	bl	800192c <_lseek>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <_lseek_r+0x1e>
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	b103      	cbz	r3, 80023d6 <_lseek_r+0x1e>
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	200023b0 	.word	0x200023b0

080023dc <_read_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4d07      	ldr	r5, [pc, #28]	; (80023fc <_read_r+0x20>)
 80023e0:	4604      	mov	r4, r0
 80023e2:	4608      	mov	r0, r1
 80023e4:	4611      	mov	r1, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	602a      	str	r2, [r5, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff fa3e 	bl	800186c <_read>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_read_r+0x1e>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_read_r+0x1e>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	200023b0 	.word	0x200023b0

08002400 <_sbrk_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4d06      	ldr	r5, [pc, #24]	; (800241c <_sbrk_r+0x1c>)
 8002404:	2300      	movs	r3, #0
 8002406:	4604      	mov	r4, r0
 8002408:	4608      	mov	r0, r1
 800240a:	602b      	str	r3, [r5, #0]
 800240c:	f7ff fa9c 	bl	8001948 <_sbrk>
 8002410:	1c43      	adds	r3, r0, #1
 8002412:	d102      	bne.n	800241a <_sbrk_r+0x1a>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	b103      	cbz	r3, 800241a <_sbrk_r+0x1a>
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	200023b0 	.word	0x200023b0

08002420 <_write_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4d07      	ldr	r5, [pc, #28]	; (8002440 <_write_r+0x20>)
 8002424:	4604      	mov	r4, r0
 8002426:	4608      	mov	r0, r1
 8002428:	4611      	mov	r1, r2
 800242a:	2200      	movs	r2, #0
 800242c:	602a      	str	r2, [r5, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	f7ff fa39 	bl	80018a6 <_write>
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	d102      	bne.n	800243e <_write_r+0x1e>
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	b103      	cbz	r3, 800243e <_write_r+0x1e>
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	bd38      	pop	{r3, r4, r5, pc}
 8002440:	200023b0 	.word	0x200023b0

08002444 <__errno>:
 8002444:	4b01      	ldr	r3, [pc, #4]	; (800244c <__errno+0x8>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000064 	.word	0x20000064

08002450 <__libc_init_array>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	4d0d      	ldr	r5, [pc, #52]	; (8002488 <__libc_init_array+0x38>)
 8002454:	4c0d      	ldr	r4, [pc, #52]	; (800248c <__libc_init_array+0x3c>)
 8002456:	1b64      	subs	r4, r4, r5
 8002458:	10a4      	asrs	r4, r4, #2
 800245a:	2600      	movs	r6, #0
 800245c:	42a6      	cmp	r6, r4
 800245e:	d109      	bne.n	8002474 <__libc_init_array+0x24>
 8002460:	4d0b      	ldr	r5, [pc, #44]	; (8002490 <__libc_init_array+0x40>)
 8002462:	4c0c      	ldr	r4, [pc, #48]	; (8002494 <__libc_init_array+0x44>)
 8002464:	f000 fe26 	bl	80030b4 <_init>
 8002468:	1b64      	subs	r4, r4, r5
 800246a:	10a4      	asrs	r4, r4, #2
 800246c:	2600      	movs	r6, #0
 800246e:	42a6      	cmp	r6, r4
 8002470:	d105      	bne.n	800247e <__libc_init_array+0x2e>
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	f855 3b04 	ldr.w	r3, [r5], #4
 8002478:	4798      	blx	r3
 800247a:	3601      	adds	r6, #1
 800247c:	e7ee      	b.n	800245c <__libc_init_array+0xc>
 800247e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002482:	4798      	blx	r3
 8002484:	3601      	adds	r6, #1
 8002486:	e7f2      	b.n	800246e <__libc_init_array+0x1e>
 8002488:	08003420 	.word	0x08003420
 800248c:	08003420 	.word	0x08003420
 8002490:	08003420 	.word	0x08003420
 8002494:	08003424 	.word	0x08003424

08002498 <__retarget_lock_init_recursive>:
 8002498:	4770      	bx	lr

0800249a <__retarget_lock_acquire_recursive>:
 800249a:	4770      	bx	lr

0800249c <__retarget_lock_release_recursive>:
 800249c:	4770      	bx	lr
	...

080024a0 <_free_r>:
 80024a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024a2:	2900      	cmp	r1, #0
 80024a4:	d044      	beq.n	8002530 <_free_r+0x90>
 80024a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024aa:	9001      	str	r0, [sp, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f1a1 0404 	sub.w	r4, r1, #4
 80024b2:	bfb8      	it	lt
 80024b4:	18e4      	addlt	r4, r4, r3
 80024b6:	f7ff fca9 	bl	8001e0c <__malloc_lock>
 80024ba:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <_free_r+0x94>)
 80024bc:	9801      	ldr	r0, [sp, #4]
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	b933      	cbnz	r3, 80024d0 <_free_r+0x30>
 80024c2:	6063      	str	r3, [r4, #4]
 80024c4:	6014      	str	r4, [r2, #0]
 80024c6:	b003      	add	sp, #12
 80024c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024cc:	f7ff bca4 	b.w	8001e18 <__malloc_unlock>
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	d908      	bls.n	80024e6 <_free_r+0x46>
 80024d4:	6825      	ldr	r5, [r4, #0]
 80024d6:	1961      	adds	r1, r4, r5
 80024d8:	428b      	cmp	r3, r1
 80024da:	bf01      	itttt	eq
 80024dc:	6819      	ldreq	r1, [r3, #0]
 80024de:	685b      	ldreq	r3, [r3, #4]
 80024e0:	1949      	addeq	r1, r1, r5
 80024e2:	6021      	streq	r1, [r4, #0]
 80024e4:	e7ed      	b.n	80024c2 <_free_r+0x22>
 80024e6:	461a      	mov	r2, r3
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	b10b      	cbz	r3, 80024f0 <_free_r+0x50>
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	d9fa      	bls.n	80024e6 <_free_r+0x46>
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	1855      	adds	r5, r2, r1
 80024f4:	42a5      	cmp	r5, r4
 80024f6:	d10b      	bne.n	8002510 <_free_r+0x70>
 80024f8:	6824      	ldr	r4, [r4, #0]
 80024fa:	4421      	add	r1, r4
 80024fc:	1854      	adds	r4, r2, r1
 80024fe:	42a3      	cmp	r3, r4
 8002500:	6011      	str	r1, [r2, #0]
 8002502:	d1e0      	bne.n	80024c6 <_free_r+0x26>
 8002504:	681c      	ldr	r4, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6053      	str	r3, [r2, #4]
 800250a:	440c      	add	r4, r1
 800250c:	6014      	str	r4, [r2, #0]
 800250e:	e7da      	b.n	80024c6 <_free_r+0x26>
 8002510:	d902      	bls.n	8002518 <_free_r+0x78>
 8002512:	230c      	movs	r3, #12
 8002514:	6003      	str	r3, [r0, #0]
 8002516:	e7d6      	b.n	80024c6 <_free_r+0x26>
 8002518:	6825      	ldr	r5, [r4, #0]
 800251a:	1961      	adds	r1, r4, r5
 800251c:	428b      	cmp	r3, r1
 800251e:	bf04      	itt	eq
 8002520:	6819      	ldreq	r1, [r3, #0]
 8002522:	685b      	ldreq	r3, [r3, #4]
 8002524:	6063      	str	r3, [r4, #4]
 8002526:	bf04      	itt	eq
 8002528:	1949      	addeq	r1, r1, r5
 800252a:	6021      	streq	r1, [r4, #0]
 800252c:	6054      	str	r4, [r2, #4]
 800252e:	e7ca      	b.n	80024c6 <_free_r+0x26>
 8002530:	b003      	add	sp, #12
 8002532:	bd30      	pop	{r4, r5, pc}
 8002534:	2000226c 	.word	0x2000226c

08002538 <__ssputs_r>:
 8002538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800253c:	688e      	ldr	r6, [r1, #8]
 800253e:	461f      	mov	r7, r3
 8002540:	42be      	cmp	r6, r7
 8002542:	680b      	ldr	r3, [r1, #0]
 8002544:	4682      	mov	sl, r0
 8002546:	460c      	mov	r4, r1
 8002548:	4690      	mov	r8, r2
 800254a:	d82c      	bhi.n	80025a6 <__ssputs_r+0x6e>
 800254c:	898a      	ldrh	r2, [r1, #12]
 800254e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002552:	d026      	beq.n	80025a2 <__ssputs_r+0x6a>
 8002554:	6965      	ldr	r5, [r4, #20]
 8002556:	6909      	ldr	r1, [r1, #16]
 8002558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800255c:	eba3 0901 	sub.w	r9, r3, r1
 8002560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002564:	1c7b      	adds	r3, r7, #1
 8002566:	444b      	add	r3, r9
 8002568:	106d      	asrs	r5, r5, #1
 800256a:	429d      	cmp	r5, r3
 800256c:	bf38      	it	cc
 800256e:	461d      	movcc	r5, r3
 8002570:	0553      	lsls	r3, r2, #21
 8002572:	d527      	bpl.n	80025c4 <__ssputs_r+0x8c>
 8002574:	4629      	mov	r1, r5
 8002576:	f7ff fbc9 	bl	8001d0c <_malloc_r>
 800257a:	4606      	mov	r6, r0
 800257c:	b360      	cbz	r0, 80025d8 <__ssputs_r+0xa0>
 800257e:	6921      	ldr	r1, [r4, #16]
 8002580:	464a      	mov	r2, r9
 8002582:	f000 fd51 	bl	8003028 <memcpy>
 8002586:	89a3      	ldrh	r3, [r4, #12]
 8002588:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800258c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002590:	81a3      	strh	r3, [r4, #12]
 8002592:	6126      	str	r6, [r4, #16]
 8002594:	6165      	str	r5, [r4, #20]
 8002596:	444e      	add	r6, r9
 8002598:	eba5 0509 	sub.w	r5, r5, r9
 800259c:	6026      	str	r6, [r4, #0]
 800259e:	60a5      	str	r5, [r4, #8]
 80025a0:	463e      	mov	r6, r7
 80025a2:	42be      	cmp	r6, r7
 80025a4:	d900      	bls.n	80025a8 <__ssputs_r+0x70>
 80025a6:	463e      	mov	r6, r7
 80025a8:	6820      	ldr	r0, [r4, #0]
 80025aa:	4632      	mov	r2, r6
 80025ac:	4641      	mov	r1, r8
 80025ae:	f000 fcff 	bl	8002fb0 <memmove>
 80025b2:	68a3      	ldr	r3, [r4, #8]
 80025b4:	1b9b      	subs	r3, r3, r6
 80025b6:	60a3      	str	r3, [r4, #8]
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	4433      	add	r3, r6
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	2000      	movs	r0, #0
 80025c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025c4:	462a      	mov	r2, r5
 80025c6:	f000 fd3d 	bl	8003044 <_realloc_r>
 80025ca:	4606      	mov	r6, r0
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d1e0      	bne.n	8002592 <__ssputs_r+0x5a>
 80025d0:	6921      	ldr	r1, [r4, #16]
 80025d2:	4650      	mov	r0, sl
 80025d4:	f7ff ff64 	bl	80024a0 <_free_r>
 80025d8:	230c      	movs	r3, #12
 80025da:	f8ca 3000 	str.w	r3, [sl]
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e4:	81a3      	strh	r3, [r4, #12]
 80025e6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ea:	e7e9      	b.n	80025c0 <__ssputs_r+0x88>

080025ec <_svfiprintf_r>:
 80025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f0:	4698      	mov	r8, r3
 80025f2:	898b      	ldrh	r3, [r1, #12]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	b09d      	sub	sp, #116	; 0x74
 80025f8:	4607      	mov	r7, r0
 80025fa:	460d      	mov	r5, r1
 80025fc:	4614      	mov	r4, r2
 80025fe:	d50e      	bpl.n	800261e <_svfiprintf_r+0x32>
 8002600:	690b      	ldr	r3, [r1, #16]
 8002602:	b963      	cbnz	r3, 800261e <_svfiprintf_r+0x32>
 8002604:	2140      	movs	r1, #64	; 0x40
 8002606:	f7ff fb81 	bl	8001d0c <_malloc_r>
 800260a:	6028      	str	r0, [r5, #0]
 800260c:	6128      	str	r0, [r5, #16]
 800260e:	b920      	cbnz	r0, 800261a <_svfiprintf_r+0x2e>
 8002610:	230c      	movs	r3, #12
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	e0d0      	b.n	80027bc <_svfiprintf_r+0x1d0>
 800261a:	2340      	movs	r3, #64	; 0x40
 800261c:	616b      	str	r3, [r5, #20]
 800261e:	2300      	movs	r3, #0
 8002620:	9309      	str	r3, [sp, #36]	; 0x24
 8002622:	2320      	movs	r3, #32
 8002624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002628:	f8cd 800c 	str.w	r8, [sp, #12]
 800262c:	2330      	movs	r3, #48	; 0x30
 800262e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80027d4 <_svfiprintf_r+0x1e8>
 8002632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002636:	f04f 0901 	mov.w	r9, #1
 800263a:	4623      	mov	r3, r4
 800263c:	469a      	mov	sl, r3
 800263e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002642:	b10a      	cbz	r2, 8002648 <_svfiprintf_r+0x5c>
 8002644:	2a25      	cmp	r2, #37	; 0x25
 8002646:	d1f9      	bne.n	800263c <_svfiprintf_r+0x50>
 8002648:	ebba 0b04 	subs.w	fp, sl, r4
 800264c:	d00b      	beq.n	8002666 <_svfiprintf_r+0x7a>
 800264e:	465b      	mov	r3, fp
 8002650:	4622      	mov	r2, r4
 8002652:	4629      	mov	r1, r5
 8002654:	4638      	mov	r0, r7
 8002656:	f7ff ff6f 	bl	8002538 <__ssputs_r>
 800265a:	3001      	adds	r0, #1
 800265c:	f000 80a9 	beq.w	80027b2 <_svfiprintf_r+0x1c6>
 8002660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002662:	445a      	add	r2, fp
 8002664:	9209      	str	r2, [sp, #36]	; 0x24
 8002666:	f89a 3000 	ldrb.w	r3, [sl]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80a1 	beq.w	80027b2 <_svfiprintf_r+0x1c6>
 8002670:	2300      	movs	r3, #0
 8002672:	f04f 32ff 	mov.w	r2, #4294967295
 8002676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800267a:	f10a 0a01 	add.w	sl, sl, #1
 800267e:	9304      	str	r3, [sp, #16]
 8002680:	9307      	str	r3, [sp, #28]
 8002682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002686:	931a      	str	r3, [sp, #104]	; 0x68
 8002688:	4654      	mov	r4, sl
 800268a:	2205      	movs	r2, #5
 800268c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002690:	4850      	ldr	r0, [pc, #320]	; (80027d4 <_svfiprintf_r+0x1e8>)
 8002692:	f7fd fdb5 	bl	8000200 <memchr>
 8002696:	9a04      	ldr	r2, [sp, #16]
 8002698:	b9d8      	cbnz	r0, 80026d2 <_svfiprintf_r+0xe6>
 800269a:	06d0      	lsls	r0, r2, #27
 800269c:	bf44      	itt	mi
 800269e:	2320      	movmi	r3, #32
 80026a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026a4:	0711      	lsls	r1, r2, #28
 80026a6:	bf44      	itt	mi
 80026a8:	232b      	movmi	r3, #43	; 0x2b
 80026aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ae:	f89a 3000 	ldrb.w	r3, [sl]
 80026b2:	2b2a      	cmp	r3, #42	; 0x2a
 80026b4:	d015      	beq.n	80026e2 <_svfiprintf_r+0xf6>
 80026b6:	9a07      	ldr	r2, [sp, #28]
 80026b8:	4654      	mov	r4, sl
 80026ba:	2000      	movs	r0, #0
 80026bc:	f04f 0c0a 	mov.w	ip, #10
 80026c0:	4621      	mov	r1, r4
 80026c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026c6:	3b30      	subs	r3, #48	; 0x30
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	d94d      	bls.n	8002768 <_svfiprintf_r+0x17c>
 80026cc:	b1b0      	cbz	r0, 80026fc <_svfiprintf_r+0x110>
 80026ce:	9207      	str	r2, [sp, #28]
 80026d0:	e014      	b.n	80026fc <_svfiprintf_r+0x110>
 80026d2:	eba0 0308 	sub.w	r3, r0, r8
 80026d6:	fa09 f303 	lsl.w	r3, r9, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	9304      	str	r3, [sp, #16]
 80026de:	46a2      	mov	sl, r4
 80026e0:	e7d2      	b.n	8002688 <_svfiprintf_r+0x9c>
 80026e2:	9b03      	ldr	r3, [sp, #12]
 80026e4:	1d19      	adds	r1, r3, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	9103      	str	r1, [sp, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bfbb      	ittet	lt
 80026ee:	425b      	neglt	r3, r3
 80026f0:	f042 0202 	orrlt.w	r2, r2, #2
 80026f4:	9307      	strge	r3, [sp, #28]
 80026f6:	9307      	strlt	r3, [sp, #28]
 80026f8:	bfb8      	it	lt
 80026fa:	9204      	strlt	r2, [sp, #16]
 80026fc:	7823      	ldrb	r3, [r4, #0]
 80026fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002700:	d10c      	bne.n	800271c <_svfiprintf_r+0x130>
 8002702:	7863      	ldrb	r3, [r4, #1]
 8002704:	2b2a      	cmp	r3, #42	; 0x2a
 8002706:	d134      	bne.n	8002772 <_svfiprintf_r+0x186>
 8002708:	9b03      	ldr	r3, [sp, #12]
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	9203      	str	r2, [sp, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	bfb8      	it	lt
 8002714:	f04f 33ff 	movlt.w	r3, #4294967295
 8002718:	3402      	adds	r4, #2
 800271a:	9305      	str	r3, [sp, #20]
 800271c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80027e4 <_svfiprintf_r+0x1f8>
 8002720:	7821      	ldrb	r1, [r4, #0]
 8002722:	2203      	movs	r2, #3
 8002724:	4650      	mov	r0, sl
 8002726:	f7fd fd6b 	bl	8000200 <memchr>
 800272a:	b138      	cbz	r0, 800273c <_svfiprintf_r+0x150>
 800272c:	9b04      	ldr	r3, [sp, #16]
 800272e:	eba0 000a 	sub.w	r0, r0, sl
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	4082      	lsls	r2, r0
 8002736:	4313      	orrs	r3, r2
 8002738:	3401      	adds	r4, #1
 800273a:	9304      	str	r3, [sp, #16]
 800273c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002740:	4825      	ldr	r0, [pc, #148]	; (80027d8 <_svfiprintf_r+0x1ec>)
 8002742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002746:	2206      	movs	r2, #6
 8002748:	f7fd fd5a 	bl	8000200 <memchr>
 800274c:	2800      	cmp	r0, #0
 800274e:	d038      	beq.n	80027c2 <_svfiprintf_r+0x1d6>
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <_svfiprintf_r+0x1f0>)
 8002752:	bb1b      	cbnz	r3, 800279c <_svfiprintf_r+0x1b0>
 8002754:	9b03      	ldr	r3, [sp, #12]
 8002756:	3307      	adds	r3, #7
 8002758:	f023 0307 	bic.w	r3, r3, #7
 800275c:	3308      	adds	r3, #8
 800275e:	9303      	str	r3, [sp, #12]
 8002760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002762:	4433      	add	r3, r6
 8002764:	9309      	str	r3, [sp, #36]	; 0x24
 8002766:	e768      	b.n	800263a <_svfiprintf_r+0x4e>
 8002768:	fb0c 3202 	mla	r2, ip, r2, r3
 800276c:	460c      	mov	r4, r1
 800276e:	2001      	movs	r0, #1
 8002770:	e7a6      	b.n	80026c0 <_svfiprintf_r+0xd4>
 8002772:	2300      	movs	r3, #0
 8002774:	3401      	adds	r4, #1
 8002776:	9305      	str	r3, [sp, #20]
 8002778:	4619      	mov	r1, r3
 800277a:	f04f 0c0a 	mov.w	ip, #10
 800277e:	4620      	mov	r0, r4
 8002780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002784:	3a30      	subs	r2, #48	; 0x30
 8002786:	2a09      	cmp	r2, #9
 8002788:	d903      	bls.n	8002792 <_svfiprintf_r+0x1a6>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0c6      	beq.n	800271c <_svfiprintf_r+0x130>
 800278e:	9105      	str	r1, [sp, #20]
 8002790:	e7c4      	b.n	800271c <_svfiprintf_r+0x130>
 8002792:	fb0c 2101 	mla	r1, ip, r1, r2
 8002796:	4604      	mov	r4, r0
 8002798:	2301      	movs	r3, #1
 800279a:	e7f0      	b.n	800277e <_svfiprintf_r+0x192>
 800279c:	ab03      	add	r3, sp, #12
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	462a      	mov	r2, r5
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <_svfiprintf_r+0x1f4>)
 80027a4:	a904      	add	r1, sp, #16
 80027a6:	4638      	mov	r0, r7
 80027a8:	f3af 8000 	nop.w
 80027ac:	1c42      	adds	r2, r0, #1
 80027ae:	4606      	mov	r6, r0
 80027b0:	d1d6      	bne.n	8002760 <_svfiprintf_r+0x174>
 80027b2:	89ab      	ldrh	r3, [r5, #12]
 80027b4:	065b      	lsls	r3, r3, #25
 80027b6:	f53f af2d 	bmi.w	8002614 <_svfiprintf_r+0x28>
 80027ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027bc:	b01d      	add	sp, #116	; 0x74
 80027be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c2:	ab03      	add	r3, sp, #12
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	462a      	mov	r2, r5
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <_svfiprintf_r+0x1f4>)
 80027ca:	a904      	add	r1, sp, #16
 80027cc:	4638      	mov	r0, r7
 80027ce:	f000 f9bd 	bl	8002b4c <_printf_i>
 80027d2:	e7eb      	b.n	80027ac <_svfiprintf_r+0x1c0>
 80027d4:	080033ec 	.word	0x080033ec
 80027d8:	080033f6 	.word	0x080033f6
 80027dc:	00000000 	.word	0x00000000
 80027e0:	08002539 	.word	0x08002539
 80027e4:	080033f2 	.word	0x080033f2

080027e8 <__sfputc_r>:
 80027e8:	6893      	ldr	r3, [r2, #8]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	b410      	push	{r4}
 80027f0:	6093      	str	r3, [r2, #8]
 80027f2:	da08      	bge.n	8002806 <__sfputc_r+0x1e>
 80027f4:	6994      	ldr	r4, [r2, #24]
 80027f6:	42a3      	cmp	r3, r4
 80027f8:	db01      	blt.n	80027fe <__sfputc_r+0x16>
 80027fa:	290a      	cmp	r1, #10
 80027fc:	d103      	bne.n	8002806 <__sfputc_r+0x1e>
 80027fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002802:	f7ff bd2c 	b.w	800225e <__swbuf_r>
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	1c58      	adds	r0, r3, #1
 800280a:	6010      	str	r0, [r2, #0]
 800280c:	7019      	strb	r1, [r3, #0]
 800280e:	4608      	mov	r0, r1
 8002810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002814:	4770      	bx	lr

08002816 <__sfputs_r>:
 8002816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002818:	4606      	mov	r6, r0
 800281a:	460f      	mov	r7, r1
 800281c:	4614      	mov	r4, r2
 800281e:	18d5      	adds	r5, r2, r3
 8002820:	42ac      	cmp	r4, r5
 8002822:	d101      	bne.n	8002828 <__sfputs_r+0x12>
 8002824:	2000      	movs	r0, #0
 8002826:	e007      	b.n	8002838 <__sfputs_r+0x22>
 8002828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800282c:	463a      	mov	r2, r7
 800282e:	4630      	mov	r0, r6
 8002830:	f7ff ffda 	bl	80027e8 <__sfputc_r>
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	d1f3      	bne.n	8002820 <__sfputs_r+0xa>
 8002838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800283c <_vfiprintf_r>:
 800283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002840:	460d      	mov	r5, r1
 8002842:	b09d      	sub	sp, #116	; 0x74
 8002844:	4614      	mov	r4, r2
 8002846:	4698      	mov	r8, r3
 8002848:	4606      	mov	r6, r0
 800284a:	b118      	cbz	r0, 8002854 <_vfiprintf_r+0x18>
 800284c:	6a03      	ldr	r3, [r0, #32]
 800284e:	b90b      	cbnz	r3, 8002854 <_vfiprintf_r+0x18>
 8002850:	f7ff fc00 	bl	8002054 <__sinit>
 8002854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002856:	07d9      	lsls	r1, r3, #31
 8002858:	d405      	bmi.n	8002866 <_vfiprintf_r+0x2a>
 800285a:	89ab      	ldrh	r3, [r5, #12]
 800285c:	059a      	lsls	r2, r3, #22
 800285e:	d402      	bmi.n	8002866 <_vfiprintf_r+0x2a>
 8002860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002862:	f7ff fe1a 	bl	800249a <__retarget_lock_acquire_recursive>
 8002866:	89ab      	ldrh	r3, [r5, #12]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	d501      	bpl.n	8002870 <_vfiprintf_r+0x34>
 800286c:	692b      	ldr	r3, [r5, #16]
 800286e:	b99b      	cbnz	r3, 8002898 <_vfiprintf_r+0x5c>
 8002870:	4629      	mov	r1, r5
 8002872:	4630      	mov	r0, r6
 8002874:	f7ff fd30 	bl	80022d8 <__swsetup_r>
 8002878:	b170      	cbz	r0, 8002898 <_vfiprintf_r+0x5c>
 800287a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800287c:	07dc      	lsls	r4, r3, #31
 800287e:	d504      	bpl.n	800288a <_vfiprintf_r+0x4e>
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	b01d      	add	sp, #116	; 0x74
 8002886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288a:	89ab      	ldrh	r3, [r5, #12]
 800288c:	0598      	lsls	r0, r3, #22
 800288e:	d4f7      	bmi.n	8002880 <_vfiprintf_r+0x44>
 8002890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002892:	f7ff fe03 	bl	800249c <__retarget_lock_release_recursive>
 8002896:	e7f3      	b.n	8002880 <_vfiprintf_r+0x44>
 8002898:	2300      	movs	r3, #0
 800289a:	9309      	str	r3, [sp, #36]	; 0x24
 800289c:	2320      	movs	r3, #32
 800289e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80028a6:	2330      	movs	r3, #48	; 0x30
 80028a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002a5c <_vfiprintf_r+0x220>
 80028ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028b0:	f04f 0901 	mov.w	r9, #1
 80028b4:	4623      	mov	r3, r4
 80028b6:	469a      	mov	sl, r3
 80028b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028bc:	b10a      	cbz	r2, 80028c2 <_vfiprintf_r+0x86>
 80028be:	2a25      	cmp	r2, #37	; 0x25
 80028c0:	d1f9      	bne.n	80028b6 <_vfiprintf_r+0x7a>
 80028c2:	ebba 0b04 	subs.w	fp, sl, r4
 80028c6:	d00b      	beq.n	80028e0 <_vfiprintf_r+0xa4>
 80028c8:	465b      	mov	r3, fp
 80028ca:	4622      	mov	r2, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	4630      	mov	r0, r6
 80028d0:	f7ff ffa1 	bl	8002816 <__sfputs_r>
 80028d4:	3001      	adds	r0, #1
 80028d6:	f000 80a9 	beq.w	8002a2c <_vfiprintf_r+0x1f0>
 80028da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028dc:	445a      	add	r2, fp
 80028de:	9209      	str	r2, [sp, #36]	; 0x24
 80028e0:	f89a 3000 	ldrb.w	r3, [sl]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a1 	beq.w	8002a2c <_vfiprintf_r+0x1f0>
 80028ea:	2300      	movs	r3, #0
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028f4:	f10a 0a01 	add.w	sl, sl, #1
 80028f8:	9304      	str	r3, [sp, #16]
 80028fa:	9307      	str	r3, [sp, #28]
 80028fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002900:	931a      	str	r3, [sp, #104]	; 0x68
 8002902:	4654      	mov	r4, sl
 8002904:	2205      	movs	r2, #5
 8002906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800290a:	4854      	ldr	r0, [pc, #336]	; (8002a5c <_vfiprintf_r+0x220>)
 800290c:	f7fd fc78 	bl	8000200 <memchr>
 8002910:	9a04      	ldr	r2, [sp, #16]
 8002912:	b9d8      	cbnz	r0, 800294c <_vfiprintf_r+0x110>
 8002914:	06d1      	lsls	r1, r2, #27
 8002916:	bf44      	itt	mi
 8002918:	2320      	movmi	r3, #32
 800291a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800291e:	0713      	lsls	r3, r2, #28
 8002920:	bf44      	itt	mi
 8002922:	232b      	movmi	r3, #43	; 0x2b
 8002924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002928:	f89a 3000 	ldrb.w	r3, [sl]
 800292c:	2b2a      	cmp	r3, #42	; 0x2a
 800292e:	d015      	beq.n	800295c <_vfiprintf_r+0x120>
 8002930:	9a07      	ldr	r2, [sp, #28]
 8002932:	4654      	mov	r4, sl
 8002934:	2000      	movs	r0, #0
 8002936:	f04f 0c0a 	mov.w	ip, #10
 800293a:	4621      	mov	r1, r4
 800293c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002940:	3b30      	subs	r3, #48	; 0x30
 8002942:	2b09      	cmp	r3, #9
 8002944:	d94d      	bls.n	80029e2 <_vfiprintf_r+0x1a6>
 8002946:	b1b0      	cbz	r0, 8002976 <_vfiprintf_r+0x13a>
 8002948:	9207      	str	r2, [sp, #28]
 800294a:	e014      	b.n	8002976 <_vfiprintf_r+0x13a>
 800294c:	eba0 0308 	sub.w	r3, r0, r8
 8002950:	fa09 f303 	lsl.w	r3, r9, r3
 8002954:	4313      	orrs	r3, r2
 8002956:	9304      	str	r3, [sp, #16]
 8002958:	46a2      	mov	sl, r4
 800295a:	e7d2      	b.n	8002902 <_vfiprintf_r+0xc6>
 800295c:	9b03      	ldr	r3, [sp, #12]
 800295e:	1d19      	adds	r1, r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	9103      	str	r1, [sp, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	bfbb      	ittet	lt
 8002968:	425b      	neglt	r3, r3
 800296a:	f042 0202 	orrlt.w	r2, r2, #2
 800296e:	9307      	strge	r3, [sp, #28]
 8002970:	9307      	strlt	r3, [sp, #28]
 8002972:	bfb8      	it	lt
 8002974:	9204      	strlt	r2, [sp, #16]
 8002976:	7823      	ldrb	r3, [r4, #0]
 8002978:	2b2e      	cmp	r3, #46	; 0x2e
 800297a:	d10c      	bne.n	8002996 <_vfiprintf_r+0x15a>
 800297c:	7863      	ldrb	r3, [r4, #1]
 800297e:	2b2a      	cmp	r3, #42	; 0x2a
 8002980:	d134      	bne.n	80029ec <_vfiprintf_r+0x1b0>
 8002982:	9b03      	ldr	r3, [sp, #12]
 8002984:	1d1a      	adds	r2, r3, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	9203      	str	r2, [sp, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	bfb8      	it	lt
 800298e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002992:	3402      	adds	r4, #2
 8002994:	9305      	str	r3, [sp, #20]
 8002996:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a6c <_vfiprintf_r+0x230>
 800299a:	7821      	ldrb	r1, [r4, #0]
 800299c:	2203      	movs	r2, #3
 800299e:	4650      	mov	r0, sl
 80029a0:	f7fd fc2e 	bl	8000200 <memchr>
 80029a4:	b138      	cbz	r0, 80029b6 <_vfiprintf_r+0x17a>
 80029a6:	9b04      	ldr	r3, [sp, #16]
 80029a8:	eba0 000a 	sub.w	r0, r0, sl
 80029ac:	2240      	movs	r2, #64	; 0x40
 80029ae:	4082      	lsls	r2, r0
 80029b0:	4313      	orrs	r3, r2
 80029b2:	3401      	adds	r4, #1
 80029b4:	9304      	str	r3, [sp, #16]
 80029b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ba:	4829      	ldr	r0, [pc, #164]	; (8002a60 <_vfiprintf_r+0x224>)
 80029bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029c0:	2206      	movs	r2, #6
 80029c2:	f7fd fc1d 	bl	8000200 <memchr>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d03f      	beq.n	8002a4a <_vfiprintf_r+0x20e>
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <_vfiprintf_r+0x228>)
 80029cc:	bb1b      	cbnz	r3, 8002a16 <_vfiprintf_r+0x1da>
 80029ce:	9b03      	ldr	r3, [sp, #12]
 80029d0:	3307      	adds	r3, #7
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	3308      	adds	r3, #8
 80029d8:	9303      	str	r3, [sp, #12]
 80029da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029dc:	443b      	add	r3, r7
 80029de:	9309      	str	r3, [sp, #36]	; 0x24
 80029e0:	e768      	b.n	80028b4 <_vfiprintf_r+0x78>
 80029e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80029e6:	460c      	mov	r4, r1
 80029e8:	2001      	movs	r0, #1
 80029ea:	e7a6      	b.n	800293a <_vfiprintf_r+0xfe>
 80029ec:	2300      	movs	r3, #0
 80029ee:	3401      	adds	r4, #1
 80029f0:	9305      	str	r3, [sp, #20]
 80029f2:	4619      	mov	r1, r3
 80029f4:	f04f 0c0a 	mov.w	ip, #10
 80029f8:	4620      	mov	r0, r4
 80029fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029fe:	3a30      	subs	r2, #48	; 0x30
 8002a00:	2a09      	cmp	r2, #9
 8002a02:	d903      	bls.n	8002a0c <_vfiprintf_r+0x1d0>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0c6      	beq.n	8002996 <_vfiprintf_r+0x15a>
 8002a08:	9105      	str	r1, [sp, #20]
 8002a0a:	e7c4      	b.n	8002996 <_vfiprintf_r+0x15a>
 8002a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a10:	4604      	mov	r4, r0
 8002a12:	2301      	movs	r3, #1
 8002a14:	e7f0      	b.n	80029f8 <_vfiprintf_r+0x1bc>
 8002a16:	ab03      	add	r3, sp, #12
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	462a      	mov	r2, r5
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <_vfiprintf_r+0x22c>)
 8002a1e:	a904      	add	r1, sp, #16
 8002a20:	4630      	mov	r0, r6
 8002a22:	f3af 8000 	nop.w
 8002a26:	4607      	mov	r7, r0
 8002a28:	1c78      	adds	r0, r7, #1
 8002a2a:	d1d6      	bne.n	80029da <_vfiprintf_r+0x19e>
 8002a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a2e:	07d9      	lsls	r1, r3, #31
 8002a30:	d405      	bmi.n	8002a3e <_vfiprintf_r+0x202>
 8002a32:	89ab      	ldrh	r3, [r5, #12]
 8002a34:	059a      	lsls	r2, r3, #22
 8002a36:	d402      	bmi.n	8002a3e <_vfiprintf_r+0x202>
 8002a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a3a:	f7ff fd2f 	bl	800249c <__retarget_lock_release_recursive>
 8002a3e:	89ab      	ldrh	r3, [r5, #12]
 8002a40:	065b      	lsls	r3, r3, #25
 8002a42:	f53f af1d 	bmi.w	8002880 <_vfiprintf_r+0x44>
 8002a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a48:	e71c      	b.n	8002884 <_vfiprintf_r+0x48>
 8002a4a:	ab03      	add	r3, sp, #12
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	462a      	mov	r2, r5
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <_vfiprintf_r+0x22c>)
 8002a52:	a904      	add	r1, sp, #16
 8002a54:	4630      	mov	r0, r6
 8002a56:	f000 f879 	bl	8002b4c <_printf_i>
 8002a5a:	e7e4      	b.n	8002a26 <_vfiprintf_r+0x1ea>
 8002a5c:	080033ec 	.word	0x080033ec
 8002a60:	080033f6 	.word	0x080033f6
 8002a64:	00000000 	.word	0x00000000
 8002a68:	08002817 	.word	0x08002817
 8002a6c:	080033f2 	.word	0x080033f2

08002a70 <_printf_common>:
 8002a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a74:	4616      	mov	r6, r2
 8002a76:	4699      	mov	r9, r3
 8002a78:	688a      	ldr	r2, [r1, #8]
 8002a7a:	690b      	ldr	r3, [r1, #16]
 8002a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bfb8      	it	lt
 8002a84:	4613      	movlt	r3, r2
 8002a86:	6033      	str	r3, [r6, #0]
 8002a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a8c:	4607      	mov	r7, r0
 8002a8e:	460c      	mov	r4, r1
 8002a90:	b10a      	cbz	r2, 8002a96 <_printf_common+0x26>
 8002a92:	3301      	adds	r3, #1
 8002a94:	6033      	str	r3, [r6, #0]
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	0699      	lsls	r1, r3, #26
 8002a9a:	bf42      	ittt	mi
 8002a9c:	6833      	ldrmi	r3, [r6, #0]
 8002a9e:	3302      	addmi	r3, #2
 8002aa0:	6033      	strmi	r3, [r6, #0]
 8002aa2:	6825      	ldr	r5, [r4, #0]
 8002aa4:	f015 0506 	ands.w	r5, r5, #6
 8002aa8:	d106      	bne.n	8002ab8 <_printf_common+0x48>
 8002aaa:	f104 0a19 	add.w	sl, r4, #25
 8002aae:	68e3      	ldr	r3, [r4, #12]
 8002ab0:	6832      	ldr	r2, [r6, #0]
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	42ab      	cmp	r3, r5
 8002ab6:	dc26      	bgt.n	8002b06 <_printf_common+0x96>
 8002ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002abc:	1e13      	subs	r3, r2, #0
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	bf18      	it	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	0692      	lsls	r2, r2, #26
 8002ac6:	d42b      	bmi.n	8002b20 <_printf_common+0xb0>
 8002ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002acc:	4649      	mov	r1, r9
 8002ace:	4638      	mov	r0, r7
 8002ad0:	47c0      	blx	r8
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	d01e      	beq.n	8002b14 <_printf_common+0xa4>
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	6922      	ldr	r2, [r4, #16]
 8002ada:	f003 0306 	and.w	r3, r3, #6
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf02      	ittt	eq
 8002ae2:	68e5      	ldreq	r5, [r4, #12]
 8002ae4:	6833      	ldreq	r3, [r6, #0]
 8002ae6:	1aed      	subeq	r5, r5, r3
 8002ae8:	68a3      	ldr	r3, [r4, #8]
 8002aea:	bf0c      	ite	eq
 8002aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002af0:	2500      	movne	r5, #0
 8002af2:	4293      	cmp	r3, r2
 8002af4:	bfc4      	itt	gt
 8002af6:	1a9b      	subgt	r3, r3, r2
 8002af8:	18ed      	addgt	r5, r5, r3
 8002afa:	2600      	movs	r6, #0
 8002afc:	341a      	adds	r4, #26
 8002afe:	42b5      	cmp	r5, r6
 8002b00:	d11a      	bne.n	8002b38 <_printf_common+0xc8>
 8002b02:	2000      	movs	r0, #0
 8002b04:	e008      	b.n	8002b18 <_printf_common+0xa8>
 8002b06:	2301      	movs	r3, #1
 8002b08:	4652      	mov	r2, sl
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	4638      	mov	r0, r7
 8002b0e:	47c0      	blx	r8
 8002b10:	3001      	adds	r0, #1
 8002b12:	d103      	bne.n	8002b1c <_printf_common+0xac>
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1c:	3501      	adds	r5, #1
 8002b1e:	e7c6      	b.n	8002aae <_printf_common+0x3e>
 8002b20:	18e1      	adds	r1, r4, r3
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	2030      	movs	r0, #48	; 0x30
 8002b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b2a:	4422      	add	r2, r4
 8002b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b34:	3302      	adds	r3, #2
 8002b36:	e7c7      	b.n	8002ac8 <_printf_common+0x58>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	4638      	mov	r0, r7
 8002b40:	47c0      	blx	r8
 8002b42:	3001      	adds	r0, #1
 8002b44:	d0e6      	beq.n	8002b14 <_printf_common+0xa4>
 8002b46:	3601      	adds	r6, #1
 8002b48:	e7d9      	b.n	8002afe <_printf_common+0x8e>
	...

08002b4c <_printf_i>:
 8002b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b50:	7e0f      	ldrb	r7, [r1, #24]
 8002b52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b54:	2f78      	cmp	r7, #120	; 0x78
 8002b56:	4691      	mov	r9, r2
 8002b58:	4680      	mov	r8, r0
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	469a      	mov	sl, r3
 8002b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b62:	d807      	bhi.n	8002b74 <_printf_i+0x28>
 8002b64:	2f62      	cmp	r7, #98	; 0x62
 8002b66:	d80a      	bhi.n	8002b7e <_printf_i+0x32>
 8002b68:	2f00      	cmp	r7, #0
 8002b6a:	f000 80d4 	beq.w	8002d16 <_printf_i+0x1ca>
 8002b6e:	2f58      	cmp	r7, #88	; 0x58
 8002b70:	f000 80c0 	beq.w	8002cf4 <_printf_i+0x1a8>
 8002b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b7c:	e03a      	b.n	8002bf4 <_printf_i+0xa8>
 8002b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b82:	2b15      	cmp	r3, #21
 8002b84:	d8f6      	bhi.n	8002b74 <_printf_i+0x28>
 8002b86:	a101      	add	r1, pc, #4	; (adr r1, 8002b8c <_printf_i+0x40>)
 8002b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b8c:	08002be5 	.word	0x08002be5
 8002b90:	08002bf9 	.word	0x08002bf9
 8002b94:	08002b75 	.word	0x08002b75
 8002b98:	08002b75 	.word	0x08002b75
 8002b9c:	08002b75 	.word	0x08002b75
 8002ba0:	08002b75 	.word	0x08002b75
 8002ba4:	08002bf9 	.word	0x08002bf9
 8002ba8:	08002b75 	.word	0x08002b75
 8002bac:	08002b75 	.word	0x08002b75
 8002bb0:	08002b75 	.word	0x08002b75
 8002bb4:	08002b75 	.word	0x08002b75
 8002bb8:	08002cfd 	.word	0x08002cfd
 8002bbc:	08002c25 	.word	0x08002c25
 8002bc0:	08002cb7 	.word	0x08002cb7
 8002bc4:	08002b75 	.word	0x08002b75
 8002bc8:	08002b75 	.word	0x08002b75
 8002bcc:	08002d1f 	.word	0x08002d1f
 8002bd0:	08002b75 	.word	0x08002b75
 8002bd4:	08002c25 	.word	0x08002c25
 8002bd8:	08002b75 	.word	0x08002b75
 8002bdc:	08002b75 	.word	0x08002b75
 8002be0:	08002cbf 	.word	0x08002cbf
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	602a      	str	r2, [r5, #0]
 8002bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e09f      	b.n	8002d38 <_printf_i+0x1ec>
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	682b      	ldr	r3, [r5, #0]
 8002bfc:	0607      	lsls	r7, r0, #24
 8002bfe:	f103 0104 	add.w	r1, r3, #4
 8002c02:	6029      	str	r1, [r5, #0]
 8002c04:	d501      	bpl.n	8002c0a <_printf_i+0xbe>
 8002c06:	681e      	ldr	r6, [r3, #0]
 8002c08:	e003      	b.n	8002c12 <_printf_i+0xc6>
 8002c0a:	0646      	lsls	r6, r0, #25
 8002c0c:	d5fb      	bpl.n	8002c06 <_printf_i+0xba>
 8002c0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002c12:	2e00      	cmp	r6, #0
 8002c14:	da03      	bge.n	8002c1e <_printf_i+0xd2>
 8002c16:	232d      	movs	r3, #45	; 0x2d
 8002c18:	4276      	negs	r6, r6
 8002c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1e:	485a      	ldr	r0, [pc, #360]	; (8002d88 <_printf_i+0x23c>)
 8002c20:	230a      	movs	r3, #10
 8002c22:	e012      	b.n	8002c4a <_printf_i+0xfe>
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	6820      	ldr	r0, [r4, #0]
 8002c28:	1d19      	adds	r1, r3, #4
 8002c2a:	6029      	str	r1, [r5, #0]
 8002c2c:	0605      	lsls	r5, r0, #24
 8002c2e:	d501      	bpl.n	8002c34 <_printf_i+0xe8>
 8002c30:	681e      	ldr	r6, [r3, #0]
 8002c32:	e002      	b.n	8002c3a <_printf_i+0xee>
 8002c34:	0641      	lsls	r1, r0, #25
 8002c36:	d5fb      	bpl.n	8002c30 <_printf_i+0xe4>
 8002c38:	881e      	ldrh	r6, [r3, #0]
 8002c3a:	4853      	ldr	r0, [pc, #332]	; (8002d88 <_printf_i+0x23c>)
 8002c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8002c3e:	bf0c      	ite	eq
 8002c40:	2308      	moveq	r3, #8
 8002c42:	230a      	movne	r3, #10
 8002c44:	2100      	movs	r1, #0
 8002c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c4a:	6865      	ldr	r5, [r4, #4]
 8002c4c:	60a5      	str	r5, [r4, #8]
 8002c4e:	2d00      	cmp	r5, #0
 8002c50:	bfa2      	ittt	ge
 8002c52:	6821      	ldrge	r1, [r4, #0]
 8002c54:	f021 0104 	bicge.w	r1, r1, #4
 8002c58:	6021      	strge	r1, [r4, #0]
 8002c5a:	b90e      	cbnz	r6, 8002c60 <_printf_i+0x114>
 8002c5c:	2d00      	cmp	r5, #0
 8002c5e:	d04b      	beq.n	8002cf8 <_printf_i+0x1ac>
 8002c60:	4615      	mov	r5, r2
 8002c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c66:	fb03 6711 	mls	r7, r3, r1, r6
 8002c6a:	5dc7      	ldrb	r7, [r0, r7]
 8002c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c70:	4637      	mov	r7, r6
 8002c72:	42bb      	cmp	r3, r7
 8002c74:	460e      	mov	r6, r1
 8002c76:	d9f4      	bls.n	8002c62 <_printf_i+0x116>
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d10b      	bne.n	8002c94 <_printf_i+0x148>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	07de      	lsls	r6, r3, #31
 8002c80:	d508      	bpl.n	8002c94 <_printf_i+0x148>
 8002c82:	6923      	ldr	r3, [r4, #16]
 8002c84:	6861      	ldr	r1, [r4, #4]
 8002c86:	4299      	cmp	r1, r3
 8002c88:	bfde      	ittt	le
 8002c8a:	2330      	movle	r3, #48	; 0x30
 8002c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c94:	1b52      	subs	r2, r2, r5
 8002c96:	6122      	str	r2, [r4, #16]
 8002c98:	f8cd a000 	str.w	sl, [sp]
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	aa03      	add	r2, sp, #12
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	f7ff fee4 	bl	8002a70 <_printf_common>
 8002ca8:	3001      	adds	r0, #1
 8002caa:	d14a      	bne.n	8002d42 <_printf_i+0x1f6>
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	b004      	add	sp, #16
 8002cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	f043 0320 	orr.w	r3, r3, #32
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	4833      	ldr	r0, [pc, #204]	; (8002d8c <_printf_i+0x240>)
 8002cc0:	2778      	movs	r7, #120	; 0x78
 8002cc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	6829      	ldr	r1, [r5, #0]
 8002cca:	061f      	lsls	r7, r3, #24
 8002ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cd0:	d402      	bmi.n	8002cd8 <_printf_i+0x18c>
 8002cd2:	065f      	lsls	r7, r3, #25
 8002cd4:	bf48      	it	mi
 8002cd6:	b2b6      	uxthmi	r6, r6
 8002cd8:	07df      	lsls	r7, r3, #31
 8002cda:	bf48      	it	mi
 8002cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ce0:	6029      	str	r1, [r5, #0]
 8002ce2:	bf48      	it	mi
 8002ce4:	6023      	strmi	r3, [r4, #0]
 8002ce6:	b91e      	cbnz	r6, 8002cf0 <_printf_i+0x1a4>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	f023 0320 	bic.w	r3, r3, #32
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	e7a7      	b.n	8002c44 <_printf_i+0xf8>
 8002cf4:	4824      	ldr	r0, [pc, #144]	; (8002d88 <_printf_i+0x23c>)
 8002cf6:	e7e4      	b.n	8002cc2 <_printf_i+0x176>
 8002cf8:	4615      	mov	r5, r2
 8002cfa:	e7bd      	b.n	8002c78 <_printf_i+0x12c>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	6826      	ldr	r6, [r4, #0]
 8002d00:	6961      	ldr	r1, [r4, #20]
 8002d02:	1d18      	adds	r0, r3, #4
 8002d04:	6028      	str	r0, [r5, #0]
 8002d06:	0635      	lsls	r5, r6, #24
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	d501      	bpl.n	8002d10 <_printf_i+0x1c4>
 8002d0c:	6019      	str	r1, [r3, #0]
 8002d0e:	e002      	b.n	8002d16 <_printf_i+0x1ca>
 8002d10:	0670      	lsls	r0, r6, #25
 8002d12:	d5fb      	bpl.n	8002d0c <_printf_i+0x1c0>
 8002d14:	8019      	strh	r1, [r3, #0]
 8002d16:	2300      	movs	r3, #0
 8002d18:	6123      	str	r3, [r4, #16]
 8002d1a:	4615      	mov	r5, r2
 8002d1c:	e7bc      	b.n	8002c98 <_printf_i+0x14c>
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	1d1a      	adds	r2, r3, #4
 8002d22:	602a      	str	r2, [r5, #0]
 8002d24:	681d      	ldr	r5, [r3, #0]
 8002d26:	6862      	ldr	r2, [r4, #4]
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	f7fd fa68 	bl	8000200 <memchr>
 8002d30:	b108      	cbz	r0, 8002d36 <_printf_i+0x1ea>
 8002d32:	1b40      	subs	r0, r0, r5
 8002d34:	6060      	str	r0, [r4, #4]
 8002d36:	6863      	ldr	r3, [r4, #4]
 8002d38:	6123      	str	r3, [r4, #16]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d40:	e7aa      	b.n	8002c98 <_printf_i+0x14c>
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	462a      	mov	r2, r5
 8002d46:	4649      	mov	r1, r9
 8002d48:	4640      	mov	r0, r8
 8002d4a:	47d0      	blx	sl
 8002d4c:	3001      	adds	r0, #1
 8002d4e:	d0ad      	beq.n	8002cac <_printf_i+0x160>
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	079b      	lsls	r3, r3, #30
 8002d54:	d413      	bmi.n	8002d7e <_printf_i+0x232>
 8002d56:	68e0      	ldr	r0, [r4, #12]
 8002d58:	9b03      	ldr	r3, [sp, #12]
 8002d5a:	4298      	cmp	r0, r3
 8002d5c:	bfb8      	it	lt
 8002d5e:	4618      	movlt	r0, r3
 8002d60:	e7a6      	b.n	8002cb0 <_printf_i+0x164>
 8002d62:	2301      	movs	r3, #1
 8002d64:	4632      	mov	r2, r6
 8002d66:	4649      	mov	r1, r9
 8002d68:	4640      	mov	r0, r8
 8002d6a:	47d0      	blx	sl
 8002d6c:	3001      	adds	r0, #1
 8002d6e:	d09d      	beq.n	8002cac <_printf_i+0x160>
 8002d70:	3501      	adds	r5, #1
 8002d72:	68e3      	ldr	r3, [r4, #12]
 8002d74:	9903      	ldr	r1, [sp, #12]
 8002d76:	1a5b      	subs	r3, r3, r1
 8002d78:	42ab      	cmp	r3, r5
 8002d7a:	dcf2      	bgt.n	8002d62 <_printf_i+0x216>
 8002d7c:	e7eb      	b.n	8002d56 <_printf_i+0x20a>
 8002d7e:	2500      	movs	r5, #0
 8002d80:	f104 0619 	add.w	r6, r4, #25
 8002d84:	e7f5      	b.n	8002d72 <_printf_i+0x226>
 8002d86:	bf00      	nop
 8002d88:	080033fd 	.word	0x080033fd
 8002d8c:	0800340e 	.word	0x0800340e

08002d90 <__sflush_r>:
 8002d90:	898a      	ldrh	r2, [r1, #12]
 8002d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d96:	4605      	mov	r5, r0
 8002d98:	0710      	lsls	r0, r2, #28
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	d458      	bmi.n	8002e50 <__sflush_r+0xc0>
 8002d9e:	684b      	ldr	r3, [r1, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	dc05      	bgt.n	8002db0 <__sflush_r+0x20>
 8002da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	dc02      	bgt.n	8002db0 <__sflush_r+0x20>
 8002daa:	2000      	movs	r0, #0
 8002dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002db2:	2e00      	cmp	r6, #0
 8002db4:	d0f9      	beq.n	8002daa <__sflush_r+0x1a>
 8002db6:	2300      	movs	r3, #0
 8002db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002dbc:	682f      	ldr	r7, [r5, #0]
 8002dbe:	6a21      	ldr	r1, [r4, #32]
 8002dc0:	602b      	str	r3, [r5, #0]
 8002dc2:	d032      	beq.n	8002e2a <__sflush_r+0x9a>
 8002dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	075a      	lsls	r2, r3, #29
 8002dca:	d505      	bpl.n	8002dd8 <__sflush_r+0x48>
 8002dcc:	6863      	ldr	r3, [r4, #4]
 8002dce:	1ac0      	subs	r0, r0, r3
 8002dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dd2:	b10b      	cbz	r3, 8002dd8 <__sflush_r+0x48>
 8002dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dd6:	1ac0      	subs	r0, r0, r3
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dde:	6a21      	ldr	r1, [r4, #32]
 8002de0:	4628      	mov	r0, r5
 8002de2:	47b0      	blx	r6
 8002de4:	1c43      	adds	r3, r0, #1
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	d106      	bne.n	8002df8 <__sflush_r+0x68>
 8002dea:	6829      	ldr	r1, [r5, #0]
 8002dec:	291d      	cmp	r1, #29
 8002dee:	d82b      	bhi.n	8002e48 <__sflush_r+0xb8>
 8002df0:	4a29      	ldr	r2, [pc, #164]	; (8002e98 <__sflush_r+0x108>)
 8002df2:	410a      	asrs	r2, r1
 8002df4:	07d6      	lsls	r6, r2, #31
 8002df6:	d427      	bmi.n	8002e48 <__sflush_r+0xb8>
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6062      	str	r2, [r4, #4]
 8002dfc:	04d9      	lsls	r1, r3, #19
 8002dfe:	6922      	ldr	r2, [r4, #16]
 8002e00:	6022      	str	r2, [r4, #0]
 8002e02:	d504      	bpl.n	8002e0e <__sflush_r+0x7e>
 8002e04:	1c42      	adds	r2, r0, #1
 8002e06:	d101      	bne.n	8002e0c <__sflush_r+0x7c>
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	b903      	cbnz	r3, 8002e0e <__sflush_r+0x7e>
 8002e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8002e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e10:	602f      	str	r7, [r5, #0]
 8002e12:	2900      	cmp	r1, #0
 8002e14:	d0c9      	beq.n	8002daa <__sflush_r+0x1a>
 8002e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e1a:	4299      	cmp	r1, r3
 8002e1c:	d002      	beq.n	8002e24 <__sflush_r+0x94>
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f7ff fb3e 	bl	80024a0 <_free_r>
 8002e24:	2000      	movs	r0, #0
 8002e26:	6360      	str	r0, [r4, #52]	; 0x34
 8002e28:	e7c0      	b.n	8002dac <__sflush_r+0x1c>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	47b0      	blx	r6
 8002e30:	1c41      	adds	r1, r0, #1
 8002e32:	d1c8      	bne.n	8002dc6 <__sflush_r+0x36>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0c5      	beq.n	8002dc6 <__sflush_r+0x36>
 8002e3a:	2b1d      	cmp	r3, #29
 8002e3c:	d001      	beq.n	8002e42 <__sflush_r+0xb2>
 8002e3e:	2b16      	cmp	r3, #22
 8002e40:	d101      	bne.n	8002e46 <__sflush_r+0xb6>
 8002e42:	602f      	str	r7, [r5, #0]
 8002e44:	e7b1      	b.n	8002daa <__sflush_r+0x1a>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e4c:	81a3      	strh	r3, [r4, #12]
 8002e4e:	e7ad      	b.n	8002dac <__sflush_r+0x1c>
 8002e50:	690f      	ldr	r7, [r1, #16]
 8002e52:	2f00      	cmp	r7, #0
 8002e54:	d0a9      	beq.n	8002daa <__sflush_r+0x1a>
 8002e56:	0793      	lsls	r3, r2, #30
 8002e58:	680e      	ldr	r6, [r1, #0]
 8002e5a:	bf08      	it	eq
 8002e5c:	694b      	ldreq	r3, [r1, #20]
 8002e5e:	600f      	str	r7, [r1, #0]
 8002e60:	bf18      	it	ne
 8002e62:	2300      	movne	r3, #0
 8002e64:	eba6 0807 	sub.w	r8, r6, r7
 8002e68:	608b      	str	r3, [r1, #8]
 8002e6a:	f1b8 0f00 	cmp.w	r8, #0
 8002e6e:	dd9c      	ble.n	8002daa <__sflush_r+0x1a>
 8002e70:	6a21      	ldr	r1, [r4, #32]
 8002e72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e74:	4643      	mov	r3, r8
 8002e76:	463a      	mov	r2, r7
 8002e78:	4628      	mov	r0, r5
 8002e7a:	47b0      	blx	r6
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	dc06      	bgt.n	8002e8e <__sflush_r+0xfe>
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e86:	81a3      	strh	r3, [r4, #12]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	e78e      	b.n	8002dac <__sflush_r+0x1c>
 8002e8e:	4407      	add	r7, r0
 8002e90:	eba8 0800 	sub.w	r8, r8, r0
 8002e94:	e7e9      	b.n	8002e6a <__sflush_r+0xda>
 8002e96:	bf00      	nop
 8002e98:	dfbffffe 	.word	0xdfbffffe

08002e9c <_fflush_r>:
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	690b      	ldr	r3, [r1, #16]
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	b913      	cbnz	r3, 8002eac <_fflush_r+0x10>
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	b118      	cbz	r0, 8002eb6 <_fflush_r+0x1a>
 8002eae:	6a03      	ldr	r3, [r0, #32]
 8002eb0:	b90b      	cbnz	r3, 8002eb6 <_fflush_r+0x1a>
 8002eb2:	f7ff f8cf 	bl	8002054 <__sinit>
 8002eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f3      	beq.n	8002ea6 <_fflush_r+0xa>
 8002ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ec0:	07d0      	lsls	r0, r2, #31
 8002ec2:	d404      	bmi.n	8002ece <_fflush_r+0x32>
 8002ec4:	0599      	lsls	r1, r3, #22
 8002ec6:	d402      	bmi.n	8002ece <_fflush_r+0x32>
 8002ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eca:	f7ff fae6 	bl	800249a <__retarget_lock_acquire_recursive>
 8002ece:	4628      	mov	r0, r5
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	f7ff ff5d 	bl	8002d90 <__sflush_r>
 8002ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ed8:	07da      	lsls	r2, r3, #31
 8002eda:	4605      	mov	r5, r0
 8002edc:	d4e4      	bmi.n	8002ea8 <_fflush_r+0xc>
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	059b      	lsls	r3, r3, #22
 8002ee2:	d4e1      	bmi.n	8002ea8 <_fflush_r+0xc>
 8002ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ee6:	f7ff fad9 	bl	800249c <__retarget_lock_release_recursive>
 8002eea:	e7dd      	b.n	8002ea8 <_fflush_r+0xc>

08002eec <__swhatbuf_r>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	460c      	mov	r4, r1
 8002ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef4:	2900      	cmp	r1, #0
 8002ef6:	b096      	sub	sp, #88	; 0x58
 8002ef8:	4615      	mov	r5, r2
 8002efa:	461e      	mov	r6, r3
 8002efc:	da0d      	bge.n	8002f1a <__swhatbuf_r+0x2e>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	bf0c      	ite	eq
 8002f0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002f0e:	2340      	movne	r3, #64	; 0x40
 8002f10:	2000      	movs	r0, #0
 8002f12:	6031      	str	r1, [r6, #0]
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	b016      	add	sp, #88	; 0x58
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
 8002f1a:	466a      	mov	r2, sp
 8002f1c:	f000 f862 	bl	8002fe4 <_fstat_r>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	dbec      	blt.n	8002efe <__swhatbuf_r+0x12>
 8002f24:	9901      	ldr	r1, [sp, #4]
 8002f26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002f2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002f2e:	4259      	negs	r1, r3
 8002f30:	4159      	adcs	r1, r3
 8002f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f36:	e7eb      	b.n	8002f10 <__swhatbuf_r+0x24>

08002f38 <__smakebuf_r>:
 8002f38:	898b      	ldrh	r3, [r1, #12]
 8002f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f3c:	079d      	lsls	r5, r3, #30
 8002f3e:	4606      	mov	r6, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	d507      	bpl.n	8002f54 <__smakebuf_r+0x1c>
 8002f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	6123      	str	r3, [r4, #16]
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	6163      	str	r3, [r4, #20]
 8002f50:	b002      	add	sp, #8
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	ab01      	add	r3, sp, #4
 8002f56:	466a      	mov	r2, sp
 8002f58:	f7ff ffc8 	bl	8002eec <__swhatbuf_r>
 8002f5c:	9900      	ldr	r1, [sp, #0]
 8002f5e:	4605      	mov	r5, r0
 8002f60:	4630      	mov	r0, r6
 8002f62:	f7fe fed3 	bl	8001d0c <_malloc_r>
 8002f66:	b948      	cbnz	r0, 8002f7c <__smakebuf_r+0x44>
 8002f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f6c:	059a      	lsls	r2, r3, #22
 8002f6e:	d4ef      	bmi.n	8002f50 <__smakebuf_r+0x18>
 8002f70:	f023 0303 	bic.w	r3, r3, #3
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	e7e3      	b.n	8002f44 <__smakebuf_r+0xc>
 8002f7c:	89a3      	ldrh	r3, [r4, #12]
 8002f7e:	6020      	str	r0, [r4, #0]
 8002f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f84:	81a3      	strh	r3, [r4, #12]
 8002f86:	9b00      	ldr	r3, [sp, #0]
 8002f88:	6163      	str	r3, [r4, #20]
 8002f8a:	9b01      	ldr	r3, [sp, #4]
 8002f8c:	6120      	str	r0, [r4, #16]
 8002f8e:	b15b      	cbz	r3, 8002fa8 <__smakebuf_r+0x70>
 8002f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 f837 	bl	8003008 <_isatty_r>
 8002f9a:	b128      	cbz	r0, 8002fa8 <__smakebuf_r+0x70>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	431d      	orrs	r5, r3
 8002fac:	81a5      	strh	r5, [r4, #12]
 8002fae:	e7cf      	b.n	8002f50 <__smakebuf_r+0x18>

08002fb0 <memmove>:
 8002fb0:	4288      	cmp	r0, r1
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	eb01 0402 	add.w	r4, r1, r2
 8002fb8:	d902      	bls.n	8002fc0 <memmove+0x10>
 8002fba:	4284      	cmp	r4, r0
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	d807      	bhi.n	8002fd0 <memmove+0x20>
 8002fc0:	1e43      	subs	r3, r0, #1
 8002fc2:	42a1      	cmp	r1, r4
 8002fc4:	d008      	beq.n	8002fd8 <memmove+0x28>
 8002fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fce:	e7f8      	b.n	8002fc2 <memmove+0x12>
 8002fd0:	4402      	add	r2, r0
 8002fd2:	4601      	mov	r1, r0
 8002fd4:	428a      	cmp	r2, r1
 8002fd6:	d100      	bne.n	8002fda <memmove+0x2a>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fe2:	e7f7      	b.n	8002fd4 <memmove+0x24>

08002fe4 <_fstat_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4d07      	ldr	r5, [pc, #28]	; (8003004 <_fstat_r+0x20>)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	4604      	mov	r4, r0
 8002fec:	4608      	mov	r0, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	602b      	str	r3, [r5, #0]
 8002ff2:	f7fe fc80 	bl	80018f6 <_fstat>
 8002ff6:	1c43      	adds	r3, r0, #1
 8002ff8:	d102      	bne.n	8003000 <_fstat_r+0x1c>
 8002ffa:	682b      	ldr	r3, [r5, #0]
 8002ffc:	b103      	cbz	r3, 8003000 <_fstat_r+0x1c>
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	bd38      	pop	{r3, r4, r5, pc}
 8003002:	bf00      	nop
 8003004:	200023b0 	.word	0x200023b0

08003008 <_isatty_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	4d06      	ldr	r5, [pc, #24]	; (8003024 <_isatty_r+0x1c>)
 800300c:	2300      	movs	r3, #0
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	602b      	str	r3, [r5, #0]
 8003014:	f7fe fc7f 	bl	8001916 <_isatty>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d102      	bne.n	8003022 <_isatty_r+0x1a>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	b103      	cbz	r3, 8003022 <_isatty_r+0x1a>
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	200023b0 	.word	0x200023b0

08003028 <memcpy>:
 8003028:	440a      	add	r2, r1
 800302a:	4291      	cmp	r1, r2
 800302c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003030:	d100      	bne.n	8003034 <memcpy+0xc>
 8003032:	4770      	bx	lr
 8003034:	b510      	push	{r4, lr}
 8003036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800303a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800303e:	4291      	cmp	r1, r2
 8003040:	d1f9      	bne.n	8003036 <memcpy+0xe>
 8003042:	bd10      	pop	{r4, pc}

08003044 <_realloc_r>:
 8003044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003048:	4680      	mov	r8, r0
 800304a:	4614      	mov	r4, r2
 800304c:	460e      	mov	r6, r1
 800304e:	b921      	cbnz	r1, 800305a <_realloc_r+0x16>
 8003050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003054:	4611      	mov	r1, r2
 8003056:	f7fe be59 	b.w	8001d0c <_malloc_r>
 800305a:	b92a      	cbnz	r2, 8003068 <_realloc_r+0x24>
 800305c:	f7ff fa20 	bl	80024a0 <_free_r>
 8003060:	4625      	mov	r5, r4
 8003062:	4628      	mov	r0, r5
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003068:	f000 f81b 	bl	80030a2 <_malloc_usable_size_r>
 800306c:	4284      	cmp	r4, r0
 800306e:	4607      	mov	r7, r0
 8003070:	d802      	bhi.n	8003078 <_realloc_r+0x34>
 8003072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003076:	d812      	bhi.n	800309e <_realloc_r+0x5a>
 8003078:	4621      	mov	r1, r4
 800307a:	4640      	mov	r0, r8
 800307c:	f7fe fe46 	bl	8001d0c <_malloc_r>
 8003080:	4605      	mov	r5, r0
 8003082:	2800      	cmp	r0, #0
 8003084:	d0ed      	beq.n	8003062 <_realloc_r+0x1e>
 8003086:	42bc      	cmp	r4, r7
 8003088:	4622      	mov	r2, r4
 800308a:	4631      	mov	r1, r6
 800308c:	bf28      	it	cs
 800308e:	463a      	movcs	r2, r7
 8003090:	f7ff ffca 	bl	8003028 <memcpy>
 8003094:	4631      	mov	r1, r6
 8003096:	4640      	mov	r0, r8
 8003098:	f7ff fa02 	bl	80024a0 <_free_r>
 800309c:	e7e1      	b.n	8003062 <_realloc_r+0x1e>
 800309e:	4635      	mov	r5, r6
 80030a0:	e7df      	b.n	8003062 <_realloc_r+0x1e>

080030a2 <_malloc_usable_size_r>:
 80030a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030a6:	1f18      	subs	r0, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfbc      	itt	lt
 80030ac:	580b      	ldrlt	r3, [r1, r0]
 80030ae:	18c0      	addlt	r0, r0, r3
 80030b0:	4770      	bx	lr
	...

080030b4 <_init>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr

080030c0 <_fini>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr
