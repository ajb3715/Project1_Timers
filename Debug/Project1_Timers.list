
Project1_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08001cf8  08001cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f7c  08001f7c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001f7c  08001f7c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f7c  08001f7c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f7c  08001f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f80  08001f80  00011f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000064  08001fe8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08001fe8  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c5d  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000075e  00000000  00000000  00021d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00022498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000120  00000000  00000000  00022640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002588b  00000000  00000000  00022760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002796  00000000  00000000  00047feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6e1a  00000000  00000000  0004a781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ee0  00000000  00000000  0013159c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0013247c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001ce0 	.word	0x08001ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08001ce0 	.word	0x08001ce0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <clock_init>:
 */


#include "stm32l476xx.h"

void clock_init(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <clock_init+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a17      	ldr	r2, [pc, #92]	; (80002f8 <clock_init+0x68>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 80002a0:	bf00      	nop
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <clock_init+0x68>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002ae:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <clock_init+0x68>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <clock_init+0x68>)
 80002b4:	f023 0303 	bic.w	r3, r3, #3
 80002b8:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <clock_init+0x68>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <clock_init+0x68>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 80002c6:	bf00      	nop
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <clock_init+0x68>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	f003 030c 	and.w	r3, r3, #12
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f9      	beq.n	80002c8 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <clock_init+0x68>)
 80002d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <clock_init+0x68>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <clock_init+0x68>)
 80002e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <clock_init+0x68>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000

080002fc <printString>:
int set_timer_base( void );

// Captures 1 line of text from console. Returns nul terminated string when \n is entered
void get_line ( uint8_t *buffer, int max_length );

void printString(char* string){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	n = sprintf((char *)buffer, "%s", string);
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	4909      	ldr	r1, [pc, #36]	; (800032c <printString+0x30>)
 8000308:	4809      	ldr	r0, [pc, #36]	; (8000330 <printString+0x34>)
 800030a:	f000 fb4f 	bl	80009ac <siprintf>
 800030e:	4603      	mov	r3, r0
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <printString+0x38>)
 8000312:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <printString+0x38>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	4905      	ldr	r1, [pc, #20]	; (8000330 <printString+0x34>)
 800031c:	4806      	ldr	r0, [pc, #24]	; (8000338 <printString+0x3c>)
 800031e:	f000 fae6 	bl	80008ee <USART_Write>
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	08001cf8 	.word	0x08001cf8
 8000330:	20000080 	.word	0x20000080
 8000334:	200000e4 	.word	0x200000e4
 8000338:	40004400 	.word	0x40004400

0800033c <printChar>:

void printChar(char ch){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	n = sprintf((char *)buffer, "%c", ch);
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	461a      	mov	r2, r3
 800034a:	4909      	ldr	r1, [pc, #36]	; (8000370 <printChar+0x34>)
 800034c:	4809      	ldr	r0, [pc, #36]	; (8000374 <printChar+0x38>)
 800034e:	f000 fb2d 	bl	80009ac <siprintf>
 8000352:	4603      	mov	r3, r0
 8000354:	4a08      	ldr	r2, [pc, #32]	; (8000378 <printChar+0x3c>)
 8000356:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <printChar+0x3c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	4905      	ldr	r1, [pc, #20]	; (8000374 <printChar+0x38>)
 8000360:	4806      	ldr	r0, [pc, #24]	; (800037c <printChar+0x40>)
 8000362:	f000 fac4 	bl	80008ee <USART_Write>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	08001cfc 	.word	0x08001cfc
 8000374:	20000080 	.word	0x20000080
 8000378:	200000e4 	.word	0x200000e4
 800037c:	40004400 	.word	0x40004400

08000380 <main>:
//////////////////////////////////////////////////////////////
// Embedded code usually consists of 2 components
//  - The init section is run once at startup and initializes all low level drivers and modules
//  - A main loop that runs forever that calls the application tasks repeatedly.
////////////////
int main(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0

    // Initialization executed once at startup
//    UART_Init();
//    TIM_Init();
	USART2_Init(9600);			// Initialize USART for terminal
 8000386:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800038a:	f000 f9c5 	bl	8000718 <USART2_Init>
	clock_init();				// Initialize clock
 800038e:	f7ff ff7f 	bl	8000290 <clock_init>
    // Main loop runs forever
    while(1)
    {
    	// 1. Print “Enter expected period or <CR> if no change”. Wait for user response

    	printString("\r\nWould you like to use the default limits:\r\nLower: 450\r\nUpper: 550\r\n");
 8000392:	4869      	ldr	r0, [pc, #420]	; (8000538 <main+0x1b8>)
 8000394:	f7ff ffb2 	bl	80002fc <printString>
    	char rx = USART_Read(USART2);
 8000398:	4868      	ldr	r0, [pc, #416]	; (800053c <main+0x1bc>)
 800039a:	f000 fa93 	bl	80008c4 <USART_Read>
 800039e:	4603      	mov	r3, r0
 80003a0:	75fb      	strb	r3, [r7, #23]
    	int i = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]

    	while (rx != '\r'){										// loop waits for the return command before processing input
 80003a6:	e010      	b.n	80003ca <main+0x4a>
    		printChar(rx);
 80003a8:	7dfb      	ldrb	r3, [r7, #23]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ffc6 	bl	800033c <printChar>
			command[i] = rx;									// adds input to buffer to process command
 80003b0:	1d3a      	adds	r2, r7, #4
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	4413      	add	r3, r2
 80003b6:	7dfa      	ldrb	r2, [r7, #23]
 80003b8:	701a      	strb	r2, [r3, #0]
			i++;
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	3301      	adds	r3, #1
 80003be:	613b      	str	r3, [r7, #16]
			rx = USART_Read(USART2);							// reads next character
 80003c0:	485e      	ldr	r0, [pc, #376]	; (800053c <main+0x1bc>)
 80003c2:	f000 fa7f 	bl	80008c4 <USART_Read>
 80003c6:	4603      	mov	r3, r0
 80003c8:	75fb      	strb	r3, [r7, #23]
    	while (rx != '\r'){										// loop waits for the return command before processing input
 80003ca:	7dfb      	ldrb	r3, [r7, #23]
 80003cc:	2b0d      	cmp	r3, #13
 80003ce:	d1eb      	bne.n	80003a8 <main+0x28>
    	}
    	command[i] = '\0';										// terminates inputed command
 80003d0:	1d3a      	adds	r2, r7, #4
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	4413      	add	r3, r2
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]

    	for (int index = 0; index < i; index++){
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	e01a      	b.n	8000416 <main+0x96>
    		command[index] = tolower(command[index]);			// makes command case insensitive
 80003e0:	1d3a      	adds	r2, r7, #4
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4413      	add	r3, r2
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	72fb      	strb	r3, [r7, #11]
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	3301      	adds	r3, #1
 80003ee:	4a54      	ldr	r2, [pc, #336]	; (8000540 <main+0x1c0>)
 80003f0:	4413      	add	r3, r2
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	f003 0303 	and.w	r3, r3, #3
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d102      	bne.n	8000402 <main+0x82>
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	3320      	adds	r3, #32
 8000400:	e000      	b.n	8000404 <main+0x84>
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	b2d9      	uxtb	r1, r3
 8000406:	1d3a      	adds	r2, r7, #4
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4413      	add	r3, r2
 800040c:	460a      	mov	r2, r1
 800040e:	701a      	strb	r2, [r3, #0]
    	for (int index = 0; index < i; index++){
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	429a      	cmp	r2, r3
 800041c:	dbe0      	blt.n	80003e0 <main+0x60>
    	}


    	if (strcmp("yes", (char *) command)){					// checks for custom limits
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4848      	ldr	r0, [pc, #288]	; (8000544 <main+0x1c4>)
 8000424:	f7ff fed4 	bl	80001d0 <strcmp>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d07c      	beq.n	8000528 <main+0x1a8>
    		printString("\r\nWhat would you like the lower limit to be? (must be between 50 and 950): ");
 800042e:	4846      	ldr	r0, [pc, #280]	; (8000548 <main+0x1c8>)
 8000430:	f7ff ff64 	bl	80002fc <printString>
    		rx = USART_Read(USART2);
 8000434:	4841      	ldr	r0, [pc, #260]	; (800053c <main+0x1bc>)
 8000436:	f000 fa45 	bl	80008c4 <USART_Read>
 800043a:	4603      	mov	r3, r0
 800043c:	75fb      	strb	r3, [r7, #23]
    		i = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]

    		while (rx != '\r'){									// loop waits for the return command before processing input
 8000442:	e010      	b.n	8000466 <main+0xe6>
				printChar(rx);
 8000444:	7dfb      	ldrb	r3, [r7, #23]
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff78 	bl	800033c <printChar>
				command[i] = rx;								// adds input to buffer to process input limit
 800044c:	1d3a      	adds	r2, r7, #4
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	4413      	add	r3, r2
 8000452:	7dfa      	ldrb	r2, [r7, #23]
 8000454:	701a      	strb	r2, [r3, #0]
				i++;
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	3301      	adds	r3, #1
 800045a:	613b      	str	r3, [r7, #16]
				rx = USART_Read(USART2);						// reads next character
 800045c:	4837      	ldr	r0, [pc, #220]	; (800053c <main+0x1bc>)
 800045e:	f000 fa31 	bl	80008c4 <USART_Read>
 8000462:	4603      	mov	r3, r0
 8000464:	75fb      	strb	r3, [r7, #23]
    		while (rx != '\r'){									// loop waits for the return command before processing input
 8000466:	7dfb      	ldrb	r3, [r7, #23]
 8000468:	2b0d      	cmp	r3, #13
 800046a:	d1eb      	bne.n	8000444 <main+0xc4>
    		}
    		command[i] = '\0';									// terminates inputed string for processing
 800046c:	1d3a      	adds	r2, r7, #4
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	4413      	add	r3, r2
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
    		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fa90 	bl	80009a2 <atoi>
 8000482:	4603      	mov	r3, r0
 8000484:	461a      	mov	r2, r3
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <main+0x1cc>)
 8000488:	601a      	str	r2, [r3, #0]

			while (lowerLimit < 50 || lowerLimit > 950){
 800048a:	e02b      	b.n	80004e4 <main+0x164>

				printString("\r\nLower limit must be between 50 and 950. Please enter a new limit: ");
 800048c:	4830      	ldr	r0, [pc, #192]	; (8000550 <main+0x1d0>)
 800048e:	f7ff ff35 	bl	80002fc <printString>
				rx = USART_Read(USART2);
 8000492:	482a      	ldr	r0, [pc, #168]	; (800053c <main+0x1bc>)
 8000494:	f000 fa16 	bl	80008c4 <USART_Read>
 8000498:	4603      	mov	r3, r0
 800049a:	75fb      	strb	r3, [r7, #23]

				while (rx != '\r'){									// loop waits for the return command before processing input
 800049c:	e010      	b.n	80004c0 <main+0x140>
					printChar(rx);
 800049e:	7dfb      	ldrb	r3, [r7, #23]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff4b 	bl	800033c <printChar>
					command[i] = rx;								// adds input to buffer to process input limit
 80004a6:	1d3a      	adds	r2, r7, #4
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	4413      	add	r3, r2
 80004ac:	7dfa      	ldrb	r2, [r7, #23]
 80004ae:	701a      	strb	r2, [r3, #0]
					i++;
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	3301      	adds	r3, #1
 80004b4:	613b      	str	r3, [r7, #16]
					rx = USART_Read(USART2);						// reads next character
 80004b6:	4821      	ldr	r0, [pc, #132]	; (800053c <main+0x1bc>)
 80004b8:	f000 fa04 	bl	80008c4 <USART_Read>
 80004bc:	4603      	mov	r3, r0
 80004be:	75fb      	strb	r3, [r7, #23]
				while (rx != '\r'){									// loop waits for the return command before processing input
 80004c0:	7dfb      	ldrb	r3, [r7, #23]
 80004c2:	2b0d      	cmp	r3, #13
 80004c4:	d1eb      	bne.n	800049e <main+0x11e>
				}

		   		command[i] = '\0';									// terminates inputed string for processing
 80004c6:	1d3a      	adds	r2, r7, #4
 80004c8:	693b      	ldr	r3, [r7, #16]
 80004ca:	4413      	add	r3, r2
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
		   		i = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
		   		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fa63 	bl	80009a2 <atoi>
 80004dc:	4603      	mov	r3, r0
 80004de:	461a      	mov	r2, r3
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <main+0x1cc>)
 80004e2:	601a      	str	r2, [r3, #0]
			while (lowerLimit < 50 || lowerLimit > 950){
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <main+0x1cc>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b31      	cmp	r3, #49	; 0x31
 80004ea:	d9cf      	bls.n	800048c <main+0x10c>
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <main+0x1cc>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d8c9      	bhi.n	800048c <main+0x10c>
			}
			upperLimit = lowerLimit + 100;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <main+0x1cc>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3364      	adds	r3, #100	; 0x64
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <main+0x1d4>)
 8000500:	6013      	str	r3, [r2, #0]
			printString((char *) printf("\r\nLower limit: %lu, Upper limit: %lu", lowerLimit, upperLimit));
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <main+0x1cc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a13      	ldr	r2, [pc, #76]	; (8000554 <main+0x1d4>)
 8000508:	6812      	ldr	r2, [r2, #0]
 800050a:	4619      	mov	r1, r3
 800050c:	4812      	ldr	r0, [pc, #72]	; (8000558 <main+0x1d8>)
 800050e:	f000 fbbb 	bl	8000c88 <iprintf>
 8000512:	4603      	mov	r3, r0
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fef1 	bl	80002fc <printString>
			USART_Write(USART2, buffer, n);
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <main+0x1dc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	490f      	ldr	r1, [pc, #60]	; (8000560 <main+0x1e0>)
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x1bc>)
 8000524:	f000 f9e3 	bl	80008ee <USART_Write>
    	}
    	printString("\r\n");					// starts a new line (since input may have been last thing to print)
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <main+0x1e4>)
 800052a:	f7ff fee7 	bl	80002fc <printString>

    	printString("Limits are currently set, program can run to calculate\r\n\r\n");
 800052e:	480e      	ldr	r0, [pc, #56]	; (8000568 <main+0x1e8>)
 8000530:	f7ff fee4 	bl	80002fc <printString>
    {
 8000534:	e72d      	b.n	8000392 <main+0x12>
 8000536:	bf00      	nop
 8000538:	08001d00 	.word	0x08001d00
 800053c:	40004400 	.word	0x40004400
 8000540:	08001e47 	.word	0x08001e47
 8000544:	08001d48 	.word	0x08001d48
 8000548:	08001d4c 	.word	0x08001d4c
 800054c:	20000000 	.word	0x20000000
 8000550:	08001d98 	.word	0x08001d98
 8000554:	20000004 	.word	0x20000004
 8000558:	08001de0 	.word	0x08001de0
 800055c:	200000e4 	.word	0x200000e4
 8000560:	20000080 	.word	0x20000080
 8000564:	08001e08 	.word	0x08001e08
 8000568:	08001e0c 	.word	0x08001e0c

0800056c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e00a      	b.n	8000594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800057e:	f3af 8000 	nop.w
 8000582:	4601      	mov	r1, r0
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	b2ca      	uxtb	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf0      	blt.n	800057e <_read+0x12>
  }

  return len;
 800059c:	687b      	ldr	r3, [r7, #4]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b086      	sub	sp, #24
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e009      	b.n	80005cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	60ba      	str	r2, [r7, #8]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbf1      	blt.n	80005b8 <_write+0x12>
  }
  return len;
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_close>:

int _close(int file)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000606:	605a      	str	r2, [r3, #4]
  return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <_isatty>:

int _isatty(int file)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f000 fb20 	bl	8000cbc <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20018000 	.word	0x20018000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	200000e8 	.word	0x200000e8
 80006b0:	20000238 	.word	0x20000238

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <SystemInit+0x5c>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <SystemInit+0x5c>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <SystemInit+0x60>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a11      	ldr	r2, [pc, #68]	; (8000714 <SystemInit+0x60>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <SystemInit+0x60>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <SystemInit+0x60>)
 80006e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <SystemInit+0x60>)
 80006ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <SystemInit+0x60>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <SystemInit+0x60>)
 80006f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <SystemInit+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00
 8000714:	40021000 	.word	0x40021000

08000718 <USART2_Init>:
// UART Ports:
// ===================================================
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	/* Init the low level hardware : GPIO, CLOCK */
	uint32_t tmpreg;
	(void) tmpreg;	/// avoid compiler warning

	// enable USART2 CLK
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000720:	4b65      	ldr	r3, [pc, #404]	; (80008b8 <USART2_Init+0x1a0>)
 8000722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000724:	4a64      	ldr	r2, [pc, #400]	; (80008b8 <USART2_Init+0x1a0>)
 8000726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072a:	6593      	str	r3, [r2, #88]	; 0x58
	tmpreg = RCC->APB1ENR1 & RCC_APB1ENR1_USART2EN;	// Delay after an RCC peripheral clock enabling
 800072c:	4b62      	ldr	r3, [pc, #392]	; (80008b8 <USART2_Init+0x1a0>)
 800072e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000734:	617b      	str	r3, [r7, #20]

	// enable GPIOA CLK
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <USART2_Init+0x1a0>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a5f      	ldr	r2, [pc, #380]	; (80008b8 <USART2_Init+0x1a0>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
	tmpreg = RCC->AHB2ENR & RCC_AHB2ENR_GPIOAEN;		// Delay after an RCC peripheral clock enabling
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <USART2_Init+0x1a0>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	617b      	str	r3, [r7, #20]

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 800074c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800075a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 800075c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000766:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800076a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 800076c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800077a:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 800077c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000786:	f023 030c 	bic.w	r3, r3, #12
 800078a:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 800078c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800079a:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 800079c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80007aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 80007ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007b0:	6a1b      	ldr	r3, [r3, #32]
 80007b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80007ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 80007bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007c0:	6a1b      	ldr	r3, [r3, #32]
 80007c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007c6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80007ca:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 80007cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 80007dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 80007ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fa:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <USART2_Init+0x1a4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a2e      	ldr	r2, [pc, #184]	; (80008bc <USART2_Init+0x1a4>)
 8000802:	f023 0301 	bic.w	r3, r3, #1
 8000806:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <USART2_Init+0x1a4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a2b      	ldr	r2, [pc, #172]	; (80008bc <USART2_Init+0x1a4>)
 800080e:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 8000812:	f023 031c 	bic.w	r3, r3, #28
 8000816:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <USART2_Init+0x1a4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <USART2_Init+0x1a4>)
 800081e:	f043 030c 	orr.w	r3, r3, #12
 8000822:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <USART2_Init+0x1a4>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4a24      	ldr	r2, [pc, #144]	; (80008bc <USART2_Init+0x1a4>)
 800082a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800082e:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <USART2_Init+0x1a4>)
 8000832:	4a22      	ldr	r2, [pc, #136]	; (80008bc <USART2_Init+0x1a4>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <USART2_Init+0x1a4>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <USART2_Init+0x1a4>)
 800083e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8000842:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <USART2_Init+0x1a4>)
 8000846:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <USART2_Init+0x1a4>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <USART2_Init+0x1a8>)
 800084e:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	085a      	lsrs	r2, r3, #1
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	441a      	add	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	b29b      	uxth	r3, r3
 8000860:	60fb      	str	r3, [r7, #12]
	USART2->BRR = usartdiv;
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <USART2_Init+0x1a4>)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <USART2_Init+0x1a4>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <USART2_Init+0x1a4>)
 800086e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000872:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <USART2_Init+0x1a4>)
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	4a10      	ldr	r2, [pc, #64]	; (80008bc <USART2_Init+0x1a4>)
 800087a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800087e:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <USART2_Init+0x1a4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <USART2_Init+0x1a4>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 800088c:	bf00      	nop
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <USART2_Init+0x1a4>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f9      	beq.n	800088e <USART2_Init+0x176>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800089a:	bf00      	nop
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <USART2_Init+0x1a4>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f9      	beq.n	800089c <USART2_Init+0x184>
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40004400 	.word	0x40004400
 80008c0:	00f42400 	.word	0x00f42400

080008c4 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 80008cc:	bf00      	nop
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f9      	beq.n	80008ce <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80008ee:	b480      	push	{r7}
 80008f0:	b087      	sub	sp, #28
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	e010      	b.n	8000922 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8000900:	bf00      	nop
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f9      	beq.n	8000902 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b29a      	uxth	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d8ea      	bhi.n	8000900 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 800092a:	bf00      	nop
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0f9      	beq.n	800092c <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	61da      	str	r2, [r3, #28]
}   
 8000944:	bf00      	nop
 8000946:	371c      	adds	r7, #28
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff feae 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f000 f9a3 	bl	8000cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fcfd 	bl	8000380 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000988:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000994:	08001f84 	.word	0x08001f84
  ldr r2, =_sbss
 8000998:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800099c:	20000238 	.word	0x20000238

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>

080009a2 <atoi>:
 80009a2:	220a      	movs	r2, #10
 80009a4:	2100      	movs	r1, #0
 80009a6:	f000 b947 	b.w	8000c38 <strtol>
	...

080009ac <siprintf>:
 80009ac:	b40e      	push	{r1, r2, r3}
 80009ae:	b500      	push	{lr}
 80009b0:	b09c      	sub	sp, #112	; 0x70
 80009b2:	ab1d      	add	r3, sp, #116	; 0x74
 80009b4:	9002      	str	r0, [sp, #8]
 80009b6:	9006      	str	r0, [sp, #24]
 80009b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <siprintf+0x38>)
 80009be:	9107      	str	r1, [sp, #28]
 80009c0:	9104      	str	r1, [sp, #16]
 80009c2:	4909      	ldr	r1, [pc, #36]	; (80009e8 <siprintf+0x3c>)
 80009c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80009c8:	9105      	str	r1, [sp, #20]
 80009ca:	6800      	ldr	r0, [r0, #0]
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	a902      	add	r1, sp, #8
 80009d0:	f000 f9fc 	bl	8000dcc <_svfiprintf_r>
 80009d4:	9b02      	ldr	r3, [sp, #8]
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	b01c      	add	sp, #112	; 0x70
 80009dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80009e0:	b003      	add	sp, #12
 80009e2:	4770      	bx	lr
 80009e4:	20000060 	.word	0x20000060
 80009e8:	ffff0208 	.word	0xffff0208

080009ec <std>:
 80009ec:	2300      	movs	r3, #0
 80009ee:	b510      	push	{r4, lr}
 80009f0:	4604      	mov	r4, r0
 80009f2:	e9c0 3300 	strd	r3, r3, [r0]
 80009f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009fa:	6083      	str	r3, [r0, #8]
 80009fc:	8181      	strh	r1, [r0, #12]
 80009fe:	6643      	str	r3, [r0, #100]	; 0x64
 8000a00:	81c2      	strh	r2, [r0, #14]
 8000a02:	6183      	str	r3, [r0, #24]
 8000a04:	4619      	mov	r1, r3
 8000a06:	2208      	movs	r2, #8
 8000a08:	305c      	adds	r0, #92	; 0x5c
 8000a0a:	f000 f94f 	bl	8000cac <memset>
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <std+0x58>)
 8000a10:	6263      	str	r3, [r4, #36]	; 0x24
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <std+0x5c>)
 8000a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <std+0x60>)
 8000a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <std+0x64>)
 8000a1c:	6323      	str	r3, [r4, #48]	; 0x30
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <std+0x68>)
 8000a20:	6224      	str	r4, [r4, #32]
 8000a22:	429c      	cmp	r4, r3
 8000a24:	d006      	beq.n	8000a34 <std+0x48>
 8000a26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000a2a:	4294      	cmp	r4, r2
 8000a2c:	d002      	beq.n	8000a34 <std+0x48>
 8000a2e:	33d0      	adds	r3, #208	; 0xd0
 8000a30:	429c      	cmp	r4, r3
 8000a32:	d105      	bne.n	8000a40 <std+0x54>
 8000a34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a3c:	f000 b968 	b.w	8000d10 <__retarget_lock_init_recursive>
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	bf00      	nop
 8000a44:	08001825 	.word	0x08001825
 8000a48:	08001847 	.word	0x08001847
 8000a4c:	0800187f 	.word	0x0800187f
 8000a50:	080018a3 	.word	0x080018a3
 8000a54:	200000ec 	.word	0x200000ec

08000a58 <stdio_exit_handler>:
 8000a58:	4a02      	ldr	r2, [pc, #8]	; (8000a64 <stdio_exit_handler+0xc>)
 8000a5a:	4903      	ldr	r1, [pc, #12]	; (8000a68 <stdio_exit_handler+0x10>)
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <stdio_exit_handler+0x14>)
 8000a5e:	f000 b8f5 	b.w	8000c4c <_fwalk_sglue>
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	080017bd 	.word	0x080017bd
 8000a6c:	20000014 	.word	0x20000014

08000a70 <cleanup_stdio>:
 8000a70:	6841      	ldr	r1, [r0, #4]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <cleanup_stdio+0x34>)
 8000a74:	4299      	cmp	r1, r3
 8000a76:	b510      	push	{r4, lr}
 8000a78:	4604      	mov	r4, r0
 8000a7a:	d001      	beq.n	8000a80 <cleanup_stdio+0x10>
 8000a7c:	f000 fe9e 	bl	80017bc <_fflush_r>
 8000a80:	68a1      	ldr	r1, [r4, #8]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <cleanup_stdio+0x38>)
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d002      	beq.n	8000a8e <cleanup_stdio+0x1e>
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f000 fe97 	bl	80017bc <_fflush_r>
 8000a8e:	68e1      	ldr	r1, [r4, #12]
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <cleanup_stdio+0x3c>)
 8000a92:	4299      	cmp	r1, r3
 8000a94:	d004      	beq.n	8000aa0 <cleanup_stdio+0x30>
 8000a96:	4620      	mov	r0, r4
 8000a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a9c:	f000 be8e 	b.w	80017bc <_fflush_r>
 8000aa0:	bd10      	pop	{r4, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000ec 	.word	0x200000ec
 8000aa8:	20000154 	.word	0x20000154
 8000aac:	200001bc 	.word	0x200001bc

08000ab0 <global_stdio_init.part.0>:
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <global_stdio_init.part.0+0x30>)
 8000ab4:	4c0b      	ldr	r4, [pc, #44]	; (8000ae4 <global_stdio_init.part.0+0x34>)
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <global_stdio_init.part.0+0x38>)
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	4620      	mov	r0, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	f7ff ff94 	bl	80009ec <std>
 8000ac4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2109      	movs	r1, #9
 8000acc:	f7ff ff8e 	bl	80009ec <std>
 8000ad0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ada:	2112      	movs	r1, #18
 8000adc:	f7ff bf86 	b.w	80009ec <std>
 8000ae0:	20000224 	.word	0x20000224
 8000ae4:	200000ec 	.word	0x200000ec
 8000ae8:	08000a59 	.word	0x08000a59

08000aec <__sfp_lock_acquire>:
 8000aec:	4801      	ldr	r0, [pc, #4]	; (8000af4 <__sfp_lock_acquire+0x8>)
 8000aee:	f000 b910 	b.w	8000d12 <__retarget_lock_acquire_recursive>
 8000af2:	bf00      	nop
 8000af4:	20000229 	.word	0x20000229

08000af8 <__sfp_lock_release>:
 8000af8:	4801      	ldr	r0, [pc, #4]	; (8000b00 <__sfp_lock_release+0x8>)
 8000afa:	f000 b90b 	b.w	8000d14 <__retarget_lock_release_recursive>
 8000afe:	bf00      	nop
 8000b00:	20000229 	.word	0x20000229

08000b04 <__sinit>:
 8000b04:	b510      	push	{r4, lr}
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fff0 	bl	8000aec <__sfp_lock_acquire>
 8000b0c:	6a23      	ldr	r3, [r4, #32]
 8000b0e:	b11b      	cbz	r3, 8000b18 <__sinit+0x14>
 8000b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b14:	f7ff bff0 	b.w	8000af8 <__sfp_lock_release>
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__sinit+0x28>)
 8000b1a:	6223      	str	r3, [r4, #32]
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__sinit+0x2c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f5      	bne.n	8000b10 <__sinit+0xc>
 8000b24:	f7ff ffc4 	bl	8000ab0 <global_stdio_init.part.0>
 8000b28:	e7f2      	b.n	8000b10 <__sinit+0xc>
 8000b2a:	bf00      	nop
 8000b2c:	08000a71 	.word	0x08000a71
 8000b30:	20000224 	.word	0x20000224

08000b34 <_strtol_l.constprop.0>:
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b3a:	d001      	beq.n	8000b40 <_strtol_l.constprop.0+0xc>
 8000b3c:	2b24      	cmp	r3, #36	; 0x24
 8000b3e:	d906      	bls.n	8000b4e <_strtol_l.constprop.0+0x1a>
 8000b40:	f000 f8bc 	bl	8000cbc <__errno>
 8000b44:	2316      	movs	r3, #22
 8000b46:	6003      	str	r3, [r0, #0]
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8000c34 <_strtol_l.constprop.0+0x100>
 8000b52:	460d      	mov	r5, r1
 8000b54:	462e      	mov	r6, r5
 8000b56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000b5a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8000b5e:	f017 0708 	ands.w	r7, r7, #8
 8000b62:	d1f7      	bne.n	8000b54 <_strtol_l.constprop.0+0x20>
 8000b64:	2c2d      	cmp	r4, #45	; 0x2d
 8000b66:	d132      	bne.n	8000bce <_strtol_l.constprop.0+0x9a>
 8000b68:	782c      	ldrb	r4, [r5, #0]
 8000b6a:	2701      	movs	r7, #1
 8000b6c:	1cb5      	adds	r5, r6, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d05b      	beq.n	8000c2a <_strtol_l.constprop.0+0xf6>
 8000b72:	2b10      	cmp	r3, #16
 8000b74:	d109      	bne.n	8000b8a <_strtol_l.constprop.0+0x56>
 8000b76:	2c30      	cmp	r4, #48	; 0x30
 8000b78:	d107      	bne.n	8000b8a <_strtol_l.constprop.0+0x56>
 8000b7a:	782c      	ldrb	r4, [r5, #0]
 8000b7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000b80:	2c58      	cmp	r4, #88	; 0x58
 8000b82:	d14d      	bne.n	8000c20 <_strtol_l.constprop.0+0xec>
 8000b84:	786c      	ldrb	r4, [r5, #1]
 8000b86:	2310      	movs	r3, #16
 8000b88:	3502      	adds	r5, #2
 8000b8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8000b8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000b92:	f04f 0e00 	mov.w	lr, #0
 8000b96:	fbb8 f9f3 	udiv	r9, r8, r3
 8000b9a:	4676      	mov	r6, lr
 8000b9c:	fb03 8a19 	mls	sl, r3, r9, r8
 8000ba0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8000ba4:	f1bc 0f09 	cmp.w	ip, #9
 8000ba8:	d816      	bhi.n	8000bd8 <_strtol_l.constprop.0+0xa4>
 8000baa:	4664      	mov	r4, ip
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	dd24      	ble.n	8000bfa <_strtol_l.constprop.0+0xc6>
 8000bb0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8000bb4:	d008      	beq.n	8000bc8 <_strtol_l.constprop.0+0x94>
 8000bb6:	45b1      	cmp	r9, r6
 8000bb8:	d31c      	bcc.n	8000bf4 <_strtol_l.constprop.0+0xc0>
 8000bba:	d101      	bne.n	8000bc0 <_strtol_l.constprop.0+0x8c>
 8000bbc:	45a2      	cmp	sl, r4
 8000bbe:	db19      	blt.n	8000bf4 <_strtol_l.constprop.0+0xc0>
 8000bc0:	fb06 4603 	mla	r6, r6, r3, r4
 8000bc4:	f04f 0e01 	mov.w	lr, #1
 8000bc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000bcc:	e7e8      	b.n	8000ba0 <_strtol_l.constprop.0+0x6c>
 8000bce:	2c2b      	cmp	r4, #43	; 0x2b
 8000bd0:	bf04      	itt	eq
 8000bd2:	782c      	ldrbeq	r4, [r5, #0]
 8000bd4:	1cb5      	addeq	r5, r6, #2
 8000bd6:	e7ca      	b.n	8000b6e <_strtol_l.constprop.0+0x3a>
 8000bd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8000bdc:	f1bc 0f19 	cmp.w	ip, #25
 8000be0:	d801      	bhi.n	8000be6 <_strtol_l.constprop.0+0xb2>
 8000be2:	3c37      	subs	r4, #55	; 0x37
 8000be4:	e7e2      	b.n	8000bac <_strtol_l.constprop.0+0x78>
 8000be6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8000bea:	f1bc 0f19 	cmp.w	ip, #25
 8000bee:	d804      	bhi.n	8000bfa <_strtol_l.constprop.0+0xc6>
 8000bf0:	3c57      	subs	r4, #87	; 0x57
 8000bf2:	e7db      	b.n	8000bac <_strtol_l.constprop.0+0x78>
 8000bf4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000bf8:	e7e6      	b.n	8000bc8 <_strtol_l.constprop.0+0x94>
 8000bfa:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8000bfe:	d105      	bne.n	8000c0c <_strtol_l.constprop.0+0xd8>
 8000c00:	2322      	movs	r3, #34	; 0x22
 8000c02:	6003      	str	r3, [r0, #0]
 8000c04:	4646      	mov	r6, r8
 8000c06:	b942      	cbnz	r2, 8000c1a <_strtol_l.constprop.0+0xe6>
 8000c08:	4630      	mov	r0, r6
 8000c0a:	e79e      	b.n	8000b4a <_strtol_l.constprop.0+0x16>
 8000c0c:	b107      	cbz	r7, 8000c10 <_strtol_l.constprop.0+0xdc>
 8000c0e:	4276      	negs	r6, r6
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d0f9      	beq.n	8000c08 <_strtol_l.constprop.0+0xd4>
 8000c14:	f1be 0f00 	cmp.w	lr, #0
 8000c18:	d000      	beq.n	8000c1c <_strtol_l.constprop.0+0xe8>
 8000c1a:	1e69      	subs	r1, r5, #1
 8000c1c:	6011      	str	r1, [r2, #0]
 8000c1e:	e7f3      	b.n	8000c08 <_strtol_l.constprop.0+0xd4>
 8000c20:	2430      	movs	r4, #48	; 0x30
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1b1      	bne.n	8000b8a <_strtol_l.constprop.0+0x56>
 8000c26:	2308      	movs	r3, #8
 8000c28:	e7af      	b.n	8000b8a <_strtol_l.constprop.0+0x56>
 8000c2a:	2c30      	cmp	r4, #48	; 0x30
 8000c2c:	d0a5      	beq.n	8000b7a <_strtol_l.constprop.0+0x46>
 8000c2e:	230a      	movs	r3, #10
 8000c30:	e7ab      	b.n	8000b8a <_strtol_l.constprop.0+0x56>
 8000c32:	bf00      	nop
 8000c34:	08001e48 	.word	0x08001e48

08000c38 <strtol>:
 8000c38:	4613      	mov	r3, r2
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <strtol+0x10>)
 8000c40:	6800      	ldr	r0, [r0, #0]
 8000c42:	f7ff bf77 	b.w	8000b34 <_strtol_l.constprop.0>
 8000c46:	bf00      	nop
 8000c48:	20000060 	.word	0x20000060

08000c4c <_fwalk_sglue>:
 8000c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c50:	4607      	mov	r7, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	4614      	mov	r4, r2
 8000c56:	2600      	movs	r6, #0
 8000c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8000c60:	d505      	bpl.n	8000c6e <_fwalk_sglue+0x22>
 8000c62:	6824      	ldr	r4, [r4, #0]
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d1f7      	bne.n	8000c58 <_fwalk_sglue+0xc>
 8000c68:	4630      	mov	r0, r6
 8000c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c6e:	89ab      	ldrh	r3, [r5, #12]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d907      	bls.n	8000c84 <_fwalk_sglue+0x38>
 8000c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	d003      	beq.n	8000c84 <_fwalk_sglue+0x38>
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	4638      	mov	r0, r7
 8000c80:	47c0      	blx	r8
 8000c82:	4306      	orrs	r6, r0
 8000c84:	3568      	adds	r5, #104	; 0x68
 8000c86:	e7e9      	b.n	8000c5c <_fwalk_sglue+0x10>

08000c88 <iprintf>:
 8000c88:	b40f      	push	{r0, r1, r2, r3}
 8000c8a:	b507      	push	{r0, r1, r2, lr}
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <iprintf+0x20>)
 8000c8e:	ab04      	add	r3, sp, #16
 8000c90:	6808      	ldr	r0, [r1, #0]
 8000c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c96:	6881      	ldr	r1, [r0, #8]
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	f000 f9bf 	bl	800101c <_vfiprintf_r>
 8000c9e:	b003      	add	sp, #12
 8000ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr
 8000ca8:	20000060 	.word	0x20000060

08000cac <memset>:
 8000cac:	4402      	add	r2, r0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d100      	bne.n	8000cb6 <memset+0xa>
 8000cb4:	4770      	bx	lr
 8000cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8000cba:	e7f9      	b.n	8000cb0 <memset+0x4>

08000cbc <__errno>:
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <__errno+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000060 	.word	0x20000060

08000cc8 <__libc_init_array>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4d0d      	ldr	r5, [pc, #52]	; (8000d00 <__libc_init_array+0x38>)
 8000ccc:	4c0d      	ldr	r4, [pc, #52]	; (8000d04 <__libc_init_array+0x3c>)
 8000cce:	1b64      	subs	r4, r4, r5
 8000cd0:	10a4      	asrs	r4, r4, #2
 8000cd2:	2600      	movs	r6, #0
 8000cd4:	42a6      	cmp	r6, r4
 8000cd6:	d109      	bne.n	8000cec <__libc_init_array+0x24>
 8000cd8:	4d0b      	ldr	r5, [pc, #44]	; (8000d08 <__libc_init_array+0x40>)
 8000cda:	4c0c      	ldr	r4, [pc, #48]	; (8000d0c <__libc_init_array+0x44>)
 8000cdc:	f001 f800 	bl	8001ce0 <_init>
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	10a4      	asrs	r4, r4, #2
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	42a6      	cmp	r6, r4
 8000ce8:	d105      	bne.n	8000cf6 <__libc_init_array+0x2e>
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf0:	4798      	blx	r3
 8000cf2:	3601      	adds	r6, #1
 8000cf4:	e7ee      	b.n	8000cd4 <__libc_init_array+0xc>
 8000cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfa:	4798      	blx	r3
 8000cfc:	3601      	adds	r6, #1
 8000cfe:	e7f2      	b.n	8000ce6 <__libc_init_array+0x1e>
 8000d00:	08001f7c 	.word	0x08001f7c
 8000d04:	08001f7c 	.word	0x08001f7c
 8000d08:	08001f7c 	.word	0x08001f7c
 8000d0c:	08001f80 	.word	0x08001f80

08000d10 <__retarget_lock_init_recursive>:
 8000d10:	4770      	bx	lr

08000d12 <__retarget_lock_acquire_recursive>:
 8000d12:	4770      	bx	lr

08000d14 <__retarget_lock_release_recursive>:
 8000d14:	4770      	bx	lr

08000d16 <__ssputs_r>:
 8000d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1a:	688e      	ldr	r6, [r1, #8]
 8000d1c:	461f      	mov	r7, r3
 8000d1e:	42be      	cmp	r6, r7
 8000d20:	680b      	ldr	r3, [r1, #0]
 8000d22:	4682      	mov	sl, r0
 8000d24:	460c      	mov	r4, r1
 8000d26:	4690      	mov	r8, r2
 8000d28:	d82c      	bhi.n	8000d84 <__ssputs_r+0x6e>
 8000d2a:	898a      	ldrh	r2, [r1, #12]
 8000d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d30:	d026      	beq.n	8000d80 <__ssputs_r+0x6a>
 8000d32:	6965      	ldr	r5, [r4, #20]
 8000d34:	6909      	ldr	r1, [r1, #16]
 8000d36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d3a:	eba3 0901 	sub.w	r9, r3, r1
 8000d3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d42:	1c7b      	adds	r3, r7, #1
 8000d44:	444b      	add	r3, r9
 8000d46:	106d      	asrs	r5, r5, #1
 8000d48:	429d      	cmp	r5, r3
 8000d4a:	bf38      	it	cc
 8000d4c:	461d      	movcc	r5, r3
 8000d4e:	0553      	lsls	r3, r2, #21
 8000d50:	d527      	bpl.n	8000da2 <__ssputs_r+0x8c>
 8000d52:	4629      	mov	r1, r5
 8000d54:	f000 fa9c 	bl	8001290 <_malloc_r>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	b360      	cbz	r0, 8000db6 <__ssputs_r+0xa0>
 8000d5c:	6921      	ldr	r1, [r4, #16]
 8000d5e:	464a      	mov	r2, r9
 8000d60:	f000 ff5c 	bl	8001c1c <memcpy>
 8000d64:	89a3      	ldrh	r3, [r4, #12]
 8000d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6e:	81a3      	strh	r3, [r4, #12]
 8000d70:	6126      	str	r6, [r4, #16]
 8000d72:	6165      	str	r5, [r4, #20]
 8000d74:	444e      	add	r6, r9
 8000d76:	eba5 0509 	sub.w	r5, r5, r9
 8000d7a:	6026      	str	r6, [r4, #0]
 8000d7c:	60a5      	str	r5, [r4, #8]
 8000d7e:	463e      	mov	r6, r7
 8000d80:	42be      	cmp	r6, r7
 8000d82:	d900      	bls.n	8000d86 <__ssputs_r+0x70>
 8000d84:	463e      	mov	r6, r7
 8000d86:	6820      	ldr	r0, [r4, #0]
 8000d88:	4632      	mov	r2, r6
 8000d8a:	4641      	mov	r1, r8
 8000d8c:	f000 feb4 	bl	8001af8 <memmove>
 8000d90:	68a3      	ldr	r3, [r4, #8]
 8000d92:	1b9b      	subs	r3, r3, r6
 8000d94:	60a3      	str	r3, [r4, #8]
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	4433      	add	r3, r6
 8000d9a:	6023      	str	r3, [r4, #0]
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	462a      	mov	r2, r5
 8000da4:	f000 fd81 	bl	80018aa <_realloc_r>
 8000da8:	4606      	mov	r6, r0
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d1e0      	bne.n	8000d70 <__ssputs_r+0x5a>
 8000dae:	6921      	ldr	r1, [r4, #16]
 8000db0:	4650      	mov	r0, sl
 8000db2:	f000 ff41 	bl	8001c38 <_free_r>
 8000db6:	230c      	movs	r3, #12
 8000db8:	f8ca 3000 	str.w	r3, [sl]
 8000dbc:	89a3      	ldrh	r3, [r4, #12]
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	81a3      	strh	r3, [r4, #12]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc8:	e7e9      	b.n	8000d9e <__ssputs_r+0x88>
	...

08000dcc <_svfiprintf_r>:
 8000dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	898b      	ldrh	r3, [r1, #12]
 8000dd4:	061b      	lsls	r3, r3, #24
 8000dd6:	b09d      	sub	sp, #116	; 0x74
 8000dd8:	4607      	mov	r7, r0
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4614      	mov	r4, r2
 8000dde:	d50e      	bpl.n	8000dfe <_svfiprintf_r+0x32>
 8000de0:	690b      	ldr	r3, [r1, #16]
 8000de2:	b963      	cbnz	r3, 8000dfe <_svfiprintf_r+0x32>
 8000de4:	2140      	movs	r1, #64	; 0x40
 8000de6:	f000 fa53 	bl	8001290 <_malloc_r>
 8000dea:	6028      	str	r0, [r5, #0]
 8000dec:	6128      	str	r0, [r5, #16]
 8000dee:	b920      	cbnz	r0, 8000dfa <_svfiprintf_r+0x2e>
 8000df0:	230c      	movs	r3, #12
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	e0d0      	b.n	8000f9c <_svfiprintf_r+0x1d0>
 8000dfa:	2340      	movs	r3, #64	; 0x40
 8000dfc:	616b      	str	r3, [r5, #20]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9309      	str	r3, [sp, #36]	; 0x24
 8000e02:	2320      	movs	r3, #32
 8000e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e0c:	2330      	movs	r3, #48	; 0x30
 8000e0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000fb4 <_svfiprintf_r+0x1e8>
 8000e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e16:	f04f 0901 	mov.w	r9, #1
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	469a      	mov	sl, r3
 8000e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e22:	b10a      	cbz	r2, 8000e28 <_svfiprintf_r+0x5c>
 8000e24:	2a25      	cmp	r2, #37	; 0x25
 8000e26:	d1f9      	bne.n	8000e1c <_svfiprintf_r+0x50>
 8000e28:	ebba 0b04 	subs.w	fp, sl, r4
 8000e2c:	d00b      	beq.n	8000e46 <_svfiprintf_r+0x7a>
 8000e2e:	465b      	mov	r3, fp
 8000e30:	4622      	mov	r2, r4
 8000e32:	4629      	mov	r1, r5
 8000e34:	4638      	mov	r0, r7
 8000e36:	f7ff ff6e 	bl	8000d16 <__ssputs_r>
 8000e3a:	3001      	adds	r0, #1
 8000e3c:	f000 80a9 	beq.w	8000f92 <_svfiprintf_r+0x1c6>
 8000e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e42:	445a      	add	r2, fp
 8000e44:	9209      	str	r2, [sp, #36]	; 0x24
 8000e46:	f89a 3000 	ldrb.w	r3, [sl]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80a1 	beq.w	8000f92 <_svfiprintf_r+0x1c6>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e5a:	f10a 0a01 	add.w	sl, sl, #1
 8000e5e:	9304      	str	r3, [sp, #16]
 8000e60:	9307      	str	r3, [sp, #28]
 8000e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e66:	931a      	str	r3, [sp, #104]	; 0x68
 8000e68:	4654      	mov	r4, sl
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e70:	4850      	ldr	r0, [pc, #320]	; (8000fb4 <_svfiprintf_r+0x1e8>)
 8000e72:	f7ff f9bd 	bl	80001f0 <memchr>
 8000e76:	9a04      	ldr	r2, [sp, #16]
 8000e78:	b9d8      	cbnz	r0, 8000eb2 <_svfiprintf_r+0xe6>
 8000e7a:	06d0      	lsls	r0, r2, #27
 8000e7c:	bf44      	itt	mi
 8000e7e:	2320      	movmi	r3, #32
 8000e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e84:	0711      	lsls	r1, r2, #28
 8000e86:	bf44      	itt	mi
 8000e88:	232b      	movmi	r3, #43	; 0x2b
 8000e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e92:	2b2a      	cmp	r3, #42	; 0x2a
 8000e94:	d015      	beq.n	8000ec2 <_svfiprintf_r+0xf6>
 8000e96:	9a07      	ldr	r2, [sp, #28]
 8000e98:	4654      	mov	r4, sl
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f04f 0c0a 	mov.w	ip, #10
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ea6:	3b30      	subs	r3, #48	; 0x30
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	d94d      	bls.n	8000f48 <_svfiprintf_r+0x17c>
 8000eac:	b1b0      	cbz	r0, 8000edc <_svfiprintf_r+0x110>
 8000eae:	9207      	str	r2, [sp, #28]
 8000eb0:	e014      	b.n	8000edc <_svfiprintf_r+0x110>
 8000eb2:	eba0 0308 	sub.w	r3, r0, r8
 8000eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	9304      	str	r3, [sp, #16]
 8000ebe:	46a2      	mov	sl, r4
 8000ec0:	e7d2      	b.n	8000e68 <_svfiprintf_r+0x9c>
 8000ec2:	9b03      	ldr	r3, [sp, #12]
 8000ec4:	1d19      	adds	r1, r3, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	9103      	str	r1, [sp, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bfbb      	ittet	lt
 8000ece:	425b      	neglt	r3, r3
 8000ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8000ed4:	9307      	strge	r3, [sp, #28]
 8000ed6:	9307      	strlt	r3, [sp, #28]
 8000ed8:	bfb8      	it	lt
 8000eda:	9204      	strlt	r2, [sp, #16]
 8000edc:	7823      	ldrb	r3, [r4, #0]
 8000ede:	2b2e      	cmp	r3, #46	; 0x2e
 8000ee0:	d10c      	bne.n	8000efc <_svfiprintf_r+0x130>
 8000ee2:	7863      	ldrb	r3, [r4, #1]
 8000ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee6:	d134      	bne.n	8000f52 <_svfiprintf_r+0x186>
 8000ee8:	9b03      	ldr	r3, [sp, #12]
 8000eea:	1d1a      	adds	r2, r3, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	9203      	str	r2, [sp, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bfb8      	it	lt
 8000ef4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000ef8:	3402      	adds	r4, #2
 8000efa:	9305      	str	r3, [sp, #20]
 8000efc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000fc4 <_svfiprintf_r+0x1f8>
 8000f00:	7821      	ldrb	r1, [r4, #0]
 8000f02:	2203      	movs	r2, #3
 8000f04:	4650      	mov	r0, sl
 8000f06:	f7ff f973 	bl	80001f0 <memchr>
 8000f0a:	b138      	cbz	r0, 8000f1c <_svfiprintf_r+0x150>
 8000f0c:	9b04      	ldr	r3, [sp, #16]
 8000f0e:	eba0 000a 	sub.w	r0, r0, sl
 8000f12:	2240      	movs	r2, #64	; 0x40
 8000f14:	4082      	lsls	r2, r0
 8000f16:	4313      	orrs	r3, r2
 8000f18:	3401      	adds	r4, #1
 8000f1a:	9304      	str	r3, [sp, #16]
 8000f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f20:	4825      	ldr	r0, [pc, #148]	; (8000fb8 <_svfiprintf_r+0x1ec>)
 8000f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f26:	2206      	movs	r2, #6
 8000f28:	f7ff f962 	bl	80001f0 <memchr>
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d038      	beq.n	8000fa2 <_svfiprintf_r+0x1d6>
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <_svfiprintf_r+0x1f0>)
 8000f32:	bb1b      	cbnz	r3, 8000f7c <_svfiprintf_r+0x1b0>
 8000f34:	9b03      	ldr	r3, [sp, #12]
 8000f36:	3307      	adds	r3, #7
 8000f38:	f023 0307 	bic.w	r3, r3, #7
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f42:	4433      	add	r3, r6
 8000f44:	9309      	str	r3, [sp, #36]	; 0x24
 8000f46:	e768      	b.n	8000e1a <_svfiprintf_r+0x4e>
 8000f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	2001      	movs	r0, #1
 8000f50:	e7a6      	b.n	8000ea0 <_svfiprintf_r+0xd4>
 8000f52:	2300      	movs	r3, #0
 8000f54:	3401      	adds	r4, #1
 8000f56:	9305      	str	r3, [sp, #20]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 0c0a 	mov.w	ip, #10
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f64:	3a30      	subs	r2, #48	; 0x30
 8000f66:	2a09      	cmp	r2, #9
 8000f68:	d903      	bls.n	8000f72 <_svfiprintf_r+0x1a6>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0c6      	beq.n	8000efc <_svfiprintf_r+0x130>
 8000f6e:	9105      	str	r1, [sp, #20]
 8000f70:	e7c4      	b.n	8000efc <_svfiprintf_r+0x130>
 8000f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f76:	4604      	mov	r4, r0
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e7f0      	b.n	8000f5e <_svfiprintf_r+0x192>
 8000f7c:	ab03      	add	r3, sp, #12
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	462a      	mov	r2, r5
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <_svfiprintf_r+0x1f4>)
 8000f84:	a904      	add	r1, sp, #16
 8000f86:	4638      	mov	r0, r7
 8000f88:	f3af 8000 	nop.w
 8000f8c:	1c42      	adds	r2, r0, #1
 8000f8e:	4606      	mov	r6, r0
 8000f90:	d1d6      	bne.n	8000f40 <_svfiprintf_r+0x174>
 8000f92:	89ab      	ldrh	r3, [r5, #12]
 8000f94:	065b      	lsls	r3, r3, #25
 8000f96:	f53f af2d 	bmi.w	8000df4 <_svfiprintf_r+0x28>
 8000f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f9c:	b01d      	add	sp, #116	; 0x74
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa2:	ab03      	add	r3, sp, #12
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	462a      	mov	r2, r5
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <_svfiprintf_r+0x1f4>)
 8000faa:	a904      	add	r1, sp, #16
 8000fac:	4638      	mov	r0, r7
 8000fae:	f000 fa5d 	bl	800146c <_printf_i>
 8000fb2:	e7eb      	b.n	8000f8c <_svfiprintf_r+0x1c0>
 8000fb4:	08001f48 	.word	0x08001f48
 8000fb8:	08001f52 	.word	0x08001f52
 8000fbc:	00000000 	.word	0x00000000
 8000fc0:	08000d17 	.word	0x08000d17
 8000fc4:	08001f4e 	.word	0x08001f4e

08000fc8 <__sfputc_r>:
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	b410      	push	{r4}
 8000fd0:	6093      	str	r3, [r2, #8]
 8000fd2:	da08      	bge.n	8000fe6 <__sfputc_r+0x1e>
 8000fd4:	6994      	ldr	r4, [r2, #24]
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	db01      	blt.n	8000fde <__sfputc_r+0x16>
 8000fda:	290a      	cmp	r1, #10
 8000fdc:	d103      	bne.n	8000fe6 <__sfputc_r+0x1e>
 8000fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fe2:	f000 bc91 	b.w	8001908 <__swbuf_r>
 8000fe6:	6813      	ldr	r3, [r2, #0]
 8000fe8:	1c58      	adds	r0, r3, #1
 8000fea:	6010      	str	r0, [r2, #0]
 8000fec:	7019      	strb	r1, [r3, #0]
 8000fee:	4608      	mov	r0, r1
 8000ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <__sfputs_r>:
 8000ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff8:	4606      	mov	r6, r0
 8000ffa:	460f      	mov	r7, r1
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	18d5      	adds	r5, r2, r3
 8001000:	42ac      	cmp	r4, r5
 8001002:	d101      	bne.n	8001008 <__sfputs_r+0x12>
 8001004:	2000      	movs	r0, #0
 8001006:	e007      	b.n	8001018 <__sfputs_r+0x22>
 8001008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800100c:	463a      	mov	r2, r7
 800100e:	4630      	mov	r0, r6
 8001010:	f7ff ffda 	bl	8000fc8 <__sfputc_r>
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	d1f3      	bne.n	8001000 <__sfputs_r+0xa>
 8001018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800101c <_vfiprintf_r>:
 800101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001020:	460d      	mov	r5, r1
 8001022:	b09d      	sub	sp, #116	; 0x74
 8001024:	4614      	mov	r4, r2
 8001026:	4698      	mov	r8, r3
 8001028:	4606      	mov	r6, r0
 800102a:	b118      	cbz	r0, 8001034 <_vfiprintf_r+0x18>
 800102c:	6a03      	ldr	r3, [r0, #32]
 800102e:	b90b      	cbnz	r3, 8001034 <_vfiprintf_r+0x18>
 8001030:	f7ff fd68 	bl	8000b04 <__sinit>
 8001034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001036:	07d9      	lsls	r1, r3, #31
 8001038:	d405      	bmi.n	8001046 <_vfiprintf_r+0x2a>
 800103a:	89ab      	ldrh	r3, [r5, #12]
 800103c:	059a      	lsls	r2, r3, #22
 800103e:	d402      	bmi.n	8001046 <_vfiprintf_r+0x2a>
 8001040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001042:	f7ff fe66 	bl	8000d12 <__retarget_lock_acquire_recursive>
 8001046:	89ab      	ldrh	r3, [r5, #12]
 8001048:	071b      	lsls	r3, r3, #28
 800104a:	d501      	bpl.n	8001050 <_vfiprintf_r+0x34>
 800104c:	692b      	ldr	r3, [r5, #16]
 800104e:	b99b      	cbnz	r3, 8001078 <_vfiprintf_r+0x5c>
 8001050:	4629      	mov	r1, r5
 8001052:	4630      	mov	r0, r6
 8001054:	f000 fc96 	bl	8001984 <__swsetup_r>
 8001058:	b170      	cbz	r0, 8001078 <_vfiprintf_r+0x5c>
 800105a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800105c:	07dc      	lsls	r4, r3, #31
 800105e:	d504      	bpl.n	800106a <_vfiprintf_r+0x4e>
 8001060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001064:	b01d      	add	sp, #116	; 0x74
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800106a:	89ab      	ldrh	r3, [r5, #12]
 800106c:	0598      	lsls	r0, r3, #22
 800106e:	d4f7      	bmi.n	8001060 <_vfiprintf_r+0x44>
 8001070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001072:	f7ff fe4f 	bl	8000d14 <__retarget_lock_release_recursive>
 8001076:	e7f3      	b.n	8001060 <_vfiprintf_r+0x44>
 8001078:	2300      	movs	r3, #0
 800107a:	9309      	str	r3, [sp, #36]	; 0x24
 800107c:	2320      	movs	r3, #32
 800107e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001082:	f8cd 800c 	str.w	r8, [sp, #12]
 8001086:	2330      	movs	r3, #48	; 0x30
 8001088:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800123c <_vfiprintf_r+0x220>
 800108c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001090:	f04f 0901 	mov.w	r9, #1
 8001094:	4623      	mov	r3, r4
 8001096:	469a      	mov	sl, r3
 8001098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800109c:	b10a      	cbz	r2, 80010a2 <_vfiprintf_r+0x86>
 800109e:	2a25      	cmp	r2, #37	; 0x25
 80010a0:	d1f9      	bne.n	8001096 <_vfiprintf_r+0x7a>
 80010a2:	ebba 0b04 	subs.w	fp, sl, r4
 80010a6:	d00b      	beq.n	80010c0 <_vfiprintf_r+0xa4>
 80010a8:	465b      	mov	r3, fp
 80010aa:	4622      	mov	r2, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	4630      	mov	r0, r6
 80010b0:	f7ff ffa1 	bl	8000ff6 <__sfputs_r>
 80010b4:	3001      	adds	r0, #1
 80010b6:	f000 80a9 	beq.w	800120c <_vfiprintf_r+0x1f0>
 80010ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010bc:	445a      	add	r2, fp
 80010be:	9209      	str	r2, [sp, #36]	; 0x24
 80010c0:	f89a 3000 	ldrb.w	r3, [sl]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80a1 	beq.w	800120c <_vfiprintf_r+0x1f0>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010d4:	f10a 0a01 	add.w	sl, sl, #1
 80010d8:	9304      	str	r3, [sp, #16]
 80010da:	9307      	str	r3, [sp, #28]
 80010dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010e0:	931a      	str	r3, [sp, #104]	; 0x68
 80010e2:	4654      	mov	r4, sl
 80010e4:	2205      	movs	r2, #5
 80010e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ea:	4854      	ldr	r0, [pc, #336]	; (800123c <_vfiprintf_r+0x220>)
 80010ec:	f7ff f880 	bl	80001f0 <memchr>
 80010f0:	9a04      	ldr	r2, [sp, #16]
 80010f2:	b9d8      	cbnz	r0, 800112c <_vfiprintf_r+0x110>
 80010f4:	06d1      	lsls	r1, r2, #27
 80010f6:	bf44      	itt	mi
 80010f8:	2320      	movmi	r3, #32
 80010fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010fe:	0713      	lsls	r3, r2, #28
 8001100:	bf44      	itt	mi
 8001102:	232b      	movmi	r3, #43	; 0x2b
 8001104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001108:	f89a 3000 	ldrb.w	r3, [sl]
 800110c:	2b2a      	cmp	r3, #42	; 0x2a
 800110e:	d015      	beq.n	800113c <_vfiprintf_r+0x120>
 8001110:	9a07      	ldr	r2, [sp, #28]
 8001112:	4654      	mov	r4, sl
 8001114:	2000      	movs	r0, #0
 8001116:	f04f 0c0a 	mov.w	ip, #10
 800111a:	4621      	mov	r1, r4
 800111c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001120:	3b30      	subs	r3, #48	; 0x30
 8001122:	2b09      	cmp	r3, #9
 8001124:	d94d      	bls.n	80011c2 <_vfiprintf_r+0x1a6>
 8001126:	b1b0      	cbz	r0, 8001156 <_vfiprintf_r+0x13a>
 8001128:	9207      	str	r2, [sp, #28]
 800112a:	e014      	b.n	8001156 <_vfiprintf_r+0x13a>
 800112c:	eba0 0308 	sub.w	r3, r0, r8
 8001130:	fa09 f303 	lsl.w	r3, r9, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	9304      	str	r3, [sp, #16]
 8001138:	46a2      	mov	sl, r4
 800113a:	e7d2      	b.n	80010e2 <_vfiprintf_r+0xc6>
 800113c:	9b03      	ldr	r3, [sp, #12]
 800113e:	1d19      	adds	r1, r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	9103      	str	r1, [sp, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bfbb      	ittet	lt
 8001148:	425b      	neglt	r3, r3
 800114a:	f042 0202 	orrlt.w	r2, r2, #2
 800114e:	9307      	strge	r3, [sp, #28]
 8001150:	9307      	strlt	r3, [sp, #28]
 8001152:	bfb8      	it	lt
 8001154:	9204      	strlt	r2, [sp, #16]
 8001156:	7823      	ldrb	r3, [r4, #0]
 8001158:	2b2e      	cmp	r3, #46	; 0x2e
 800115a:	d10c      	bne.n	8001176 <_vfiprintf_r+0x15a>
 800115c:	7863      	ldrb	r3, [r4, #1]
 800115e:	2b2a      	cmp	r3, #42	; 0x2a
 8001160:	d134      	bne.n	80011cc <_vfiprintf_r+0x1b0>
 8001162:	9b03      	ldr	r3, [sp, #12]
 8001164:	1d1a      	adds	r2, r3, #4
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	9203      	str	r2, [sp, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	bfb8      	it	lt
 800116e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001172:	3402      	adds	r4, #2
 8001174:	9305      	str	r3, [sp, #20]
 8001176:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800124c <_vfiprintf_r+0x230>
 800117a:	7821      	ldrb	r1, [r4, #0]
 800117c:	2203      	movs	r2, #3
 800117e:	4650      	mov	r0, sl
 8001180:	f7ff f836 	bl	80001f0 <memchr>
 8001184:	b138      	cbz	r0, 8001196 <_vfiprintf_r+0x17a>
 8001186:	9b04      	ldr	r3, [sp, #16]
 8001188:	eba0 000a 	sub.w	r0, r0, sl
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	4082      	lsls	r2, r0
 8001190:	4313      	orrs	r3, r2
 8001192:	3401      	adds	r4, #1
 8001194:	9304      	str	r3, [sp, #16]
 8001196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800119a:	4829      	ldr	r0, [pc, #164]	; (8001240 <_vfiprintf_r+0x224>)
 800119c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011a0:	2206      	movs	r2, #6
 80011a2:	f7ff f825 	bl	80001f0 <memchr>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d03f      	beq.n	800122a <_vfiprintf_r+0x20e>
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <_vfiprintf_r+0x228>)
 80011ac:	bb1b      	cbnz	r3, 80011f6 <_vfiprintf_r+0x1da>
 80011ae:	9b03      	ldr	r3, [sp, #12]
 80011b0:	3307      	adds	r3, #7
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	3308      	adds	r3, #8
 80011b8:	9303      	str	r3, [sp, #12]
 80011ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011bc:	443b      	add	r3, r7
 80011be:	9309      	str	r3, [sp, #36]	; 0x24
 80011c0:	e768      	b.n	8001094 <_vfiprintf_r+0x78>
 80011c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80011c6:	460c      	mov	r4, r1
 80011c8:	2001      	movs	r0, #1
 80011ca:	e7a6      	b.n	800111a <_vfiprintf_r+0xfe>
 80011cc:	2300      	movs	r3, #0
 80011ce:	3401      	adds	r4, #1
 80011d0:	9305      	str	r3, [sp, #20]
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 0c0a 	mov.w	ip, #10
 80011d8:	4620      	mov	r0, r4
 80011da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011de:	3a30      	subs	r2, #48	; 0x30
 80011e0:	2a09      	cmp	r2, #9
 80011e2:	d903      	bls.n	80011ec <_vfiprintf_r+0x1d0>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0c6      	beq.n	8001176 <_vfiprintf_r+0x15a>
 80011e8:	9105      	str	r1, [sp, #20]
 80011ea:	e7c4      	b.n	8001176 <_vfiprintf_r+0x15a>
 80011ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80011f0:	4604      	mov	r4, r0
 80011f2:	2301      	movs	r3, #1
 80011f4:	e7f0      	b.n	80011d8 <_vfiprintf_r+0x1bc>
 80011f6:	ab03      	add	r3, sp, #12
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	462a      	mov	r2, r5
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <_vfiprintf_r+0x22c>)
 80011fe:	a904      	add	r1, sp, #16
 8001200:	4630      	mov	r0, r6
 8001202:	f3af 8000 	nop.w
 8001206:	4607      	mov	r7, r0
 8001208:	1c78      	adds	r0, r7, #1
 800120a:	d1d6      	bne.n	80011ba <_vfiprintf_r+0x19e>
 800120c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800120e:	07d9      	lsls	r1, r3, #31
 8001210:	d405      	bmi.n	800121e <_vfiprintf_r+0x202>
 8001212:	89ab      	ldrh	r3, [r5, #12]
 8001214:	059a      	lsls	r2, r3, #22
 8001216:	d402      	bmi.n	800121e <_vfiprintf_r+0x202>
 8001218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800121a:	f7ff fd7b 	bl	8000d14 <__retarget_lock_release_recursive>
 800121e:	89ab      	ldrh	r3, [r5, #12]
 8001220:	065b      	lsls	r3, r3, #25
 8001222:	f53f af1d 	bmi.w	8001060 <_vfiprintf_r+0x44>
 8001226:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001228:	e71c      	b.n	8001064 <_vfiprintf_r+0x48>
 800122a:	ab03      	add	r3, sp, #12
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	462a      	mov	r2, r5
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <_vfiprintf_r+0x22c>)
 8001232:	a904      	add	r1, sp, #16
 8001234:	4630      	mov	r0, r6
 8001236:	f000 f919 	bl	800146c <_printf_i>
 800123a:	e7e4      	b.n	8001206 <_vfiprintf_r+0x1ea>
 800123c:	08001f48 	.word	0x08001f48
 8001240:	08001f52 	.word	0x08001f52
 8001244:	00000000 	.word	0x00000000
 8001248:	08000ff7 	.word	0x08000ff7
 800124c:	08001f4e 	.word	0x08001f4e

08001250 <sbrk_aligned>:
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	4e0e      	ldr	r6, [pc, #56]	; (800128c <sbrk_aligned+0x3c>)
 8001254:	460c      	mov	r4, r1
 8001256:	6831      	ldr	r1, [r6, #0]
 8001258:	4605      	mov	r5, r0
 800125a:	b911      	cbnz	r1, 8001262 <sbrk_aligned+0x12>
 800125c:	f000 fcbc 	bl	8001bd8 <_sbrk_r>
 8001260:	6030      	str	r0, [r6, #0]
 8001262:	4621      	mov	r1, r4
 8001264:	4628      	mov	r0, r5
 8001266:	f000 fcb7 	bl	8001bd8 <_sbrk_r>
 800126a:	1c43      	adds	r3, r0, #1
 800126c:	d00a      	beq.n	8001284 <sbrk_aligned+0x34>
 800126e:	1cc4      	adds	r4, r0, #3
 8001270:	f024 0403 	bic.w	r4, r4, #3
 8001274:	42a0      	cmp	r0, r4
 8001276:	d007      	beq.n	8001288 <sbrk_aligned+0x38>
 8001278:	1a21      	subs	r1, r4, r0
 800127a:	4628      	mov	r0, r5
 800127c:	f000 fcac 	bl	8001bd8 <_sbrk_r>
 8001280:	3001      	adds	r0, #1
 8001282:	d101      	bne.n	8001288 <sbrk_aligned+0x38>
 8001284:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001288:	4620      	mov	r0, r4
 800128a:	bd70      	pop	{r4, r5, r6, pc}
 800128c:	20000230 	.word	0x20000230

08001290 <_malloc_r>:
 8001290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001294:	1ccd      	adds	r5, r1, #3
 8001296:	f025 0503 	bic.w	r5, r5, #3
 800129a:	3508      	adds	r5, #8
 800129c:	2d0c      	cmp	r5, #12
 800129e:	bf38      	it	cc
 80012a0:	250c      	movcc	r5, #12
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	4607      	mov	r7, r0
 80012a6:	db01      	blt.n	80012ac <_malloc_r+0x1c>
 80012a8:	42a9      	cmp	r1, r5
 80012aa:	d905      	bls.n	80012b8 <_malloc_r+0x28>
 80012ac:	230c      	movs	r3, #12
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	2600      	movs	r6, #0
 80012b2:	4630      	mov	r0, r6
 80012b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800138c <_malloc_r+0xfc>
 80012bc:	f000 faa6 	bl	800180c <__malloc_lock>
 80012c0:	f8d8 3000 	ldr.w	r3, [r8]
 80012c4:	461c      	mov	r4, r3
 80012c6:	bb5c      	cbnz	r4, 8001320 <_malloc_r+0x90>
 80012c8:	4629      	mov	r1, r5
 80012ca:	4638      	mov	r0, r7
 80012cc:	f7ff ffc0 	bl	8001250 <sbrk_aligned>
 80012d0:	1c43      	adds	r3, r0, #1
 80012d2:	4604      	mov	r4, r0
 80012d4:	d155      	bne.n	8001382 <_malloc_r+0xf2>
 80012d6:	f8d8 4000 	ldr.w	r4, [r8]
 80012da:	4626      	mov	r6, r4
 80012dc:	2e00      	cmp	r6, #0
 80012de:	d145      	bne.n	800136c <_malloc_r+0xdc>
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d048      	beq.n	8001376 <_malloc_r+0xe6>
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	4631      	mov	r1, r6
 80012e8:	4638      	mov	r0, r7
 80012ea:	eb04 0903 	add.w	r9, r4, r3
 80012ee:	f000 fc73 	bl	8001bd8 <_sbrk_r>
 80012f2:	4581      	cmp	r9, r0
 80012f4:	d13f      	bne.n	8001376 <_malloc_r+0xe6>
 80012f6:	6821      	ldr	r1, [r4, #0]
 80012f8:	1a6d      	subs	r5, r5, r1
 80012fa:	4629      	mov	r1, r5
 80012fc:	4638      	mov	r0, r7
 80012fe:	f7ff ffa7 	bl	8001250 <sbrk_aligned>
 8001302:	3001      	adds	r0, #1
 8001304:	d037      	beq.n	8001376 <_malloc_r+0xe6>
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	442b      	add	r3, r5
 800130a:	6023      	str	r3, [r4, #0]
 800130c:	f8d8 3000 	ldr.w	r3, [r8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d038      	beq.n	8001386 <_malloc_r+0xf6>
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	42a2      	cmp	r2, r4
 8001318:	d12b      	bne.n	8001372 <_malloc_r+0xe2>
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	e00f      	b.n	8001340 <_malloc_r+0xb0>
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	1b52      	subs	r2, r2, r5
 8001324:	d41f      	bmi.n	8001366 <_malloc_r+0xd6>
 8001326:	2a0b      	cmp	r2, #11
 8001328:	d917      	bls.n	800135a <_malloc_r+0xca>
 800132a:	1961      	adds	r1, r4, r5
 800132c:	42a3      	cmp	r3, r4
 800132e:	6025      	str	r5, [r4, #0]
 8001330:	bf18      	it	ne
 8001332:	6059      	strne	r1, [r3, #4]
 8001334:	6863      	ldr	r3, [r4, #4]
 8001336:	bf08      	it	eq
 8001338:	f8c8 1000 	streq.w	r1, [r8]
 800133c:	5162      	str	r2, [r4, r5]
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	4638      	mov	r0, r7
 8001342:	f104 060b 	add.w	r6, r4, #11
 8001346:	f000 fa67 	bl	8001818 <__malloc_unlock>
 800134a:	f026 0607 	bic.w	r6, r6, #7
 800134e:	1d23      	adds	r3, r4, #4
 8001350:	1af2      	subs	r2, r6, r3
 8001352:	d0ae      	beq.n	80012b2 <_malloc_r+0x22>
 8001354:	1b9b      	subs	r3, r3, r6
 8001356:	50a3      	str	r3, [r4, r2]
 8001358:	e7ab      	b.n	80012b2 <_malloc_r+0x22>
 800135a:	42a3      	cmp	r3, r4
 800135c:	6862      	ldr	r2, [r4, #4]
 800135e:	d1dd      	bne.n	800131c <_malloc_r+0x8c>
 8001360:	f8c8 2000 	str.w	r2, [r8]
 8001364:	e7ec      	b.n	8001340 <_malloc_r+0xb0>
 8001366:	4623      	mov	r3, r4
 8001368:	6864      	ldr	r4, [r4, #4]
 800136a:	e7ac      	b.n	80012c6 <_malloc_r+0x36>
 800136c:	4634      	mov	r4, r6
 800136e:	6876      	ldr	r6, [r6, #4]
 8001370:	e7b4      	b.n	80012dc <_malloc_r+0x4c>
 8001372:	4613      	mov	r3, r2
 8001374:	e7cc      	b.n	8001310 <_malloc_r+0x80>
 8001376:	230c      	movs	r3, #12
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4638      	mov	r0, r7
 800137c:	f000 fa4c 	bl	8001818 <__malloc_unlock>
 8001380:	e797      	b.n	80012b2 <_malloc_r+0x22>
 8001382:	6025      	str	r5, [r4, #0]
 8001384:	e7dc      	b.n	8001340 <_malloc_r+0xb0>
 8001386:	605b      	str	r3, [r3, #4]
 8001388:	deff      	udf	#255	; 0xff
 800138a:	bf00      	nop
 800138c:	2000022c 	.word	0x2000022c

08001390 <_printf_common>:
 8001390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001394:	4616      	mov	r6, r2
 8001396:	4699      	mov	r9, r3
 8001398:	688a      	ldr	r2, [r1, #8]
 800139a:	690b      	ldr	r3, [r1, #16]
 800139c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013a0:	4293      	cmp	r3, r2
 80013a2:	bfb8      	it	lt
 80013a4:	4613      	movlt	r3, r2
 80013a6:	6033      	str	r3, [r6, #0]
 80013a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013ac:	4607      	mov	r7, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	b10a      	cbz	r2, 80013b6 <_printf_common+0x26>
 80013b2:	3301      	adds	r3, #1
 80013b4:	6033      	str	r3, [r6, #0]
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	0699      	lsls	r1, r3, #26
 80013ba:	bf42      	ittt	mi
 80013bc:	6833      	ldrmi	r3, [r6, #0]
 80013be:	3302      	addmi	r3, #2
 80013c0:	6033      	strmi	r3, [r6, #0]
 80013c2:	6825      	ldr	r5, [r4, #0]
 80013c4:	f015 0506 	ands.w	r5, r5, #6
 80013c8:	d106      	bne.n	80013d8 <_printf_common+0x48>
 80013ca:	f104 0a19 	add.w	sl, r4, #25
 80013ce:	68e3      	ldr	r3, [r4, #12]
 80013d0:	6832      	ldr	r2, [r6, #0]
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	42ab      	cmp	r3, r5
 80013d6:	dc26      	bgt.n	8001426 <_printf_common+0x96>
 80013d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013dc:	1e13      	subs	r3, r2, #0
 80013de:	6822      	ldr	r2, [r4, #0]
 80013e0:	bf18      	it	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	0692      	lsls	r2, r2, #26
 80013e6:	d42b      	bmi.n	8001440 <_printf_common+0xb0>
 80013e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013ec:	4649      	mov	r1, r9
 80013ee:	4638      	mov	r0, r7
 80013f0:	47c0      	blx	r8
 80013f2:	3001      	adds	r0, #1
 80013f4:	d01e      	beq.n	8001434 <_printf_common+0xa4>
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	6922      	ldr	r2, [r4, #16]
 80013fa:	f003 0306 	and.w	r3, r3, #6
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf02      	ittt	eq
 8001402:	68e5      	ldreq	r5, [r4, #12]
 8001404:	6833      	ldreq	r3, [r6, #0]
 8001406:	1aed      	subeq	r5, r5, r3
 8001408:	68a3      	ldr	r3, [r4, #8]
 800140a:	bf0c      	ite	eq
 800140c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001410:	2500      	movne	r5, #0
 8001412:	4293      	cmp	r3, r2
 8001414:	bfc4      	itt	gt
 8001416:	1a9b      	subgt	r3, r3, r2
 8001418:	18ed      	addgt	r5, r5, r3
 800141a:	2600      	movs	r6, #0
 800141c:	341a      	adds	r4, #26
 800141e:	42b5      	cmp	r5, r6
 8001420:	d11a      	bne.n	8001458 <_printf_common+0xc8>
 8001422:	2000      	movs	r0, #0
 8001424:	e008      	b.n	8001438 <_printf_common+0xa8>
 8001426:	2301      	movs	r3, #1
 8001428:	4652      	mov	r2, sl
 800142a:	4649      	mov	r1, r9
 800142c:	4638      	mov	r0, r7
 800142e:	47c0      	blx	r8
 8001430:	3001      	adds	r0, #1
 8001432:	d103      	bne.n	800143c <_printf_common+0xac>
 8001434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143c:	3501      	adds	r5, #1
 800143e:	e7c6      	b.n	80013ce <_printf_common+0x3e>
 8001440:	18e1      	adds	r1, r4, r3
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	2030      	movs	r0, #48	; 0x30
 8001446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800144a:	4422      	add	r2, r4
 800144c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001454:	3302      	adds	r3, #2
 8001456:	e7c7      	b.n	80013e8 <_printf_common+0x58>
 8001458:	2301      	movs	r3, #1
 800145a:	4622      	mov	r2, r4
 800145c:	4649      	mov	r1, r9
 800145e:	4638      	mov	r0, r7
 8001460:	47c0      	blx	r8
 8001462:	3001      	adds	r0, #1
 8001464:	d0e6      	beq.n	8001434 <_printf_common+0xa4>
 8001466:	3601      	adds	r6, #1
 8001468:	e7d9      	b.n	800141e <_printf_common+0x8e>
	...

0800146c <_printf_i>:
 800146c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001470:	7e0f      	ldrb	r7, [r1, #24]
 8001472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001474:	2f78      	cmp	r7, #120	; 0x78
 8001476:	4691      	mov	r9, r2
 8001478:	4680      	mov	r8, r0
 800147a:	460c      	mov	r4, r1
 800147c:	469a      	mov	sl, r3
 800147e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001482:	d807      	bhi.n	8001494 <_printf_i+0x28>
 8001484:	2f62      	cmp	r7, #98	; 0x62
 8001486:	d80a      	bhi.n	800149e <_printf_i+0x32>
 8001488:	2f00      	cmp	r7, #0
 800148a:	f000 80d4 	beq.w	8001636 <_printf_i+0x1ca>
 800148e:	2f58      	cmp	r7, #88	; 0x58
 8001490:	f000 80c0 	beq.w	8001614 <_printf_i+0x1a8>
 8001494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800149c:	e03a      	b.n	8001514 <_printf_i+0xa8>
 800149e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80014a2:	2b15      	cmp	r3, #21
 80014a4:	d8f6      	bhi.n	8001494 <_printf_i+0x28>
 80014a6:	a101      	add	r1, pc, #4	; (adr r1, 80014ac <_printf_i+0x40>)
 80014a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014ac:	08001505 	.word	0x08001505
 80014b0:	08001519 	.word	0x08001519
 80014b4:	08001495 	.word	0x08001495
 80014b8:	08001495 	.word	0x08001495
 80014bc:	08001495 	.word	0x08001495
 80014c0:	08001495 	.word	0x08001495
 80014c4:	08001519 	.word	0x08001519
 80014c8:	08001495 	.word	0x08001495
 80014cc:	08001495 	.word	0x08001495
 80014d0:	08001495 	.word	0x08001495
 80014d4:	08001495 	.word	0x08001495
 80014d8:	0800161d 	.word	0x0800161d
 80014dc:	08001545 	.word	0x08001545
 80014e0:	080015d7 	.word	0x080015d7
 80014e4:	08001495 	.word	0x08001495
 80014e8:	08001495 	.word	0x08001495
 80014ec:	0800163f 	.word	0x0800163f
 80014f0:	08001495 	.word	0x08001495
 80014f4:	08001545 	.word	0x08001545
 80014f8:	08001495 	.word	0x08001495
 80014fc:	08001495 	.word	0x08001495
 8001500:	080015df 	.word	0x080015df
 8001504:	682b      	ldr	r3, [r5, #0]
 8001506:	1d1a      	adds	r2, r3, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	602a      	str	r2, [r5, #0]
 800150c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001514:	2301      	movs	r3, #1
 8001516:	e09f      	b.n	8001658 <_printf_i+0x1ec>
 8001518:	6820      	ldr	r0, [r4, #0]
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	0607      	lsls	r7, r0, #24
 800151e:	f103 0104 	add.w	r1, r3, #4
 8001522:	6029      	str	r1, [r5, #0]
 8001524:	d501      	bpl.n	800152a <_printf_i+0xbe>
 8001526:	681e      	ldr	r6, [r3, #0]
 8001528:	e003      	b.n	8001532 <_printf_i+0xc6>
 800152a:	0646      	lsls	r6, r0, #25
 800152c:	d5fb      	bpl.n	8001526 <_printf_i+0xba>
 800152e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001532:	2e00      	cmp	r6, #0
 8001534:	da03      	bge.n	800153e <_printf_i+0xd2>
 8001536:	232d      	movs	r3, #45	; 0x2d
 8001538:	4276      	negs	r6, r6
 800153a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800153e:	485a      	ldr	r0, [pc, #360]	; (80016a8 <_printf_i+0x23c>)
 8001540:	230a      	movs	r3, #10
 8001542:	e012      	b.n	800156a <_printf_i+0xfe>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	6820      	ldr	r0, [r4, #0]
 8001548:	1d19      	adds	r1, r3, #4
 800154a:	6029      	str	r1, [r5, #0]
 800154c:	0605      	lsls	r5, r0, #24
 800154e:	d501      	bpl.n	8001554 <_printf_i+0xe8>
 8001550:	681e      	ldr	r6, [r3, #0]
 8001552:	e002      	b.n	800155a <_printf_i+0xee>
 8001554:	0641      	lsls	r1, r0, #25
 8001556:	d5fb      	bpl.n	8001550 <_printf_i+0xe4>
 8001558:	881e      	ldrh	r6, [r3, #0]
 800155a:	4853      	ldr	r0, [pc, #332]	; (80016a8 <_printf_i+0x23c>)
 800155c:	2f6f      	cmp	r7, #111	; 0x6f
 800155e:	bf0c      	ite	eq
 8001560:	2308      	moveq	r3, #8
 8001562:	230a      	movne	r3, #10
 8001564:	2100      	movs	r1, #0
 8001566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800156a:	6865      	ldr	r5, [r4, #4]
 800156c:	60a5      	str	r5, [r4, #8]
 800156e:	2d00      	cmp	r5, #0
 8001570:	bfa2      	ittt	ge
 8001572:	6821      	ldrge	r1, [r4, #0]
 8001574:	f021 0104 	bicge.w	r1, r1, #4
 8001578:	6021      	strge	r1, [r4, #0]
 800157a:	b90e      	cbnz	r6, 8001580 <_printf_i+0x114>
 800157c:	2d00      	cmp	r5, #0
 800157e:	d04b      	beq.n	8001618 <_printf_i+0x1ac>
 8001580:	4615      	mov	r5, r2
 8001582:	fbb6 f1f3 	udiv	r1, r6, r3
 8001586:	fb03 6711 	mls	r7, r3, r1, r6
 800158a:	5dc7      	ldrb	r7, [r0, r7]
 800158c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001590:	4637      	mov	r7, r6
 8001592:	42bb      	cmp	r3, r7
 8001594:	460e      	mov	r6, r1
 8001596:	d9f4      	bls.n	8001582 <_printf_i+0x116>
 8001598:	2b08      	cmp	r3, #8
 800159a:	d10b      	bne.n	80015b4 <_printf_i+0x148>
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	07de      	lsls	r6, r3, #31
 80015a0:	d508      	bpl.n	80015b4 <_printf_i+0x148>
 80015a2:	6923      	ldr	r3, [r4, #16]
 80015a4:	6861      	ldr	r1, [r4, #4]
 80015a6:	4299      	cmp	r1, r3
 80015a8:	bfde      	ittt	le
 80015aa:	2330      	movle	r3, #48	; 0x30
 80015ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80015b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80015b4:	1b52      	subs	r2, r2, r5
 80015b6:	6122      	str	r2, [r4, #16]
 80015b8:	f8cd a000 	str.w	sl, [sp]
 80015bc:	464b      	mov	r3, r9
 80015be:	aa03      	add	r2, sp, #12
 80015c0:	4621      	mov	r1, r4
 80015c2:	4640      	mov	r0, r8
 80015c4:	f7ff fee4 	bl	8001390 <_printf_common>
 80015c8:	3001      	adds	r0, #1
 80015ca:	d14a      	bne.n	8001662 <_printf_i+0x1f6>
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d0:	b004      	add	sp, #16
 80015d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	f043 0320 	orr.w	r3, r3, #32
 80015dc:	6023      	str	r3, [r4, #0]
 80015de:	4833      	ldr	r0, [pc, #204]	; (80016ac <_printf_i+0x240>)
 80015e0:	2778      	movs	r7, #120	; 0x78
 80015e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	6829      	ldr	r1, [r5, #0]
 80015ea:	061f      	lsls	r7, r3, #24
 80015ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80015f0:	d402      	bmi.n	80015f8 <_printf_i+0x18c>
 80015f2:	065f      	lsls	r7, r3, #25
 80015f4:	bf48      	it	mi
 80015f6:	b2b6      	uxthmi	r6, r6
 80015f8:	07df      	lsls	r7, r3, #31
 80015fa:	bf48      	it	mi
 80015fc:	f043 0320 	orrmi.w	r3, r3, #32
 8001600:	6029      	str	r1, [r5, #0]
 8001602:	bf48      	it	mi
 8001604:	6023      	strmi	r3, [r4, #0]
 8001606:	b91e      	cbnz	r6, 8001610 <_printf_i+0x1a4>
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	f023 0320 	bic.w	r3, r3, #32
 800160e:	6023      	str	r3, [r4, #0]
 8001610:	2310      	movs	r3, #16
 8001612:	e7a7      	b.n	8001564 <_printf_i+0xf8>
 8001614:	4824      	ldr	r0, [pc, #144]	; (80016a8 <_printf_i+0x23c>)
 8001616:	e7e4      	b.n	80015e2 <_printf_i+0x176>
 8001618:	4615      	mov	r5, r2
 800161a:	e7bd      	b.n	8001598 <_printf_i+0x12c>
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	6826      	ldr	r6, [r4, #0]
 8001620:	6961      	ldr	r1, [r4, #20]
 8001622:	1d18      	adds	r0, r3, #4
 8001624:	6028      	str	r0, [r5, #0]
 8001626:	0635      	lsls	r5, r6, #24
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	d501      	bpl.n	8001630 <_printf_i+0x1c4>
 800162c:	6019      	str	r1, [r3, #0]
 800162e:	e002      	b.n	8001636 <_printf_i+0x1ca>
 8001630:	0670      	lsls	r0, r6, #25
 8001632:	d5fb      	bpl.n	800162c <_printf_i+0x1c0>
 8001634:	8019      	strh	r1, [r3, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	6123      	str	r3, [r4, #16]
 800163a:	4615      	mov	r5, r2
 800163c:	e7bc      	b.n	80015b8 <_printf_i+0x14c>
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	1d1a      	adds	r2, r3, #4
 8001642:	602a      	str	r2, [r5, #0]
 8001644:	681d      	ldr	r5, [r3, #0]
 8001646:	6862      	ldr	r2, [r4, #4]
 8001648:	2100      	movs	r1, #0
 800164a:	4628      	mov	r0, r5
 800164c:	f7fe fdd0 	bl	80001f0 <memchr>
 8001650:	b108      	cbz	r0, 8001656 <_printf_i+0x1ea>
 8001652:	1b40      	subs	r0, r0, r5
 8001654:	6060      	str	r0, [r4, #4]
 8001656:	6863      	ldr	r3, [r4, #4]
 8001658:	6123      	str	r3, [r4, #16]
 800165a:	2300      	movs	r3, #0
 800165c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001660:	e7aa      	b.n	80015b8 <_printf_i+0x14c>
 8001662:	6923      	ldr	r3, [r4, #16]
 8001664:	462a      	mov	r2, r5
 8001666:	4649      	mov	r1, r9
 8001668:	4640      	mov	r0, r8
 800166a:	47d0      	blx	sl
 800166c:	3001      	adds	r0, #1
 800166e:	d0ad      	beq.n	80015cc <_printf_i+0x160>
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	079b      	lsls	r3, r3, #30
 8001674:	d413      	bmi.n	800169e <_printf_i+0x232>
 8001676:	68e0      	ldr	r0, [r4, #12]
 8001678:	9b03      	ldr	r3, [sp, #12]
 800167a:	4298      	cmp	r0, r3
 800167c:	bfb8      	it	lt
 800167e:	4618      	movlt	r0, r3
 8001680:	e7a6      	b.n	80015d0 <_printf_i+0x164>
 8001682:	2301      	movs	r3, #1
 8001684:	4632      	mov	r2, r6
 8001686:	4649      	mov	r1, r9
 8001688:	4640      	mov	r0, r8
 800168a:	47d0      	blx	sl
 800168c:	3001      	adds	r0, #1
 800168e:	d09d      	beq.n	80015cc <_printf_i+0x160>
 8001690:	3501      	adds	r5, #1
 8001692:	68e3      	ldr	r3, [r4, #12]
 8001694:	9903      	ldr	r1, [sp, #12]
 8001696:	1a5b      	subs	r3, r3, r1
 8001698:	42ab      	cmp	r3, r5
 800169a:	dcf2      	bgt.n	8001682 <_printf_i+0x216>
 800169c:	e7eb      	b.n	8001676 <_printf_i+0x20a>
 800169e:	2500      	movs	r5, #0
 80016a0:	f104 0619 	add.w	r6, r4, #25
 80016a4:	e7f5      	b.n	8001692 <_printf_i+0x226>
 80016a6:	bf00      	nop
 80016a8:	08001f59 	.word	0x08001f59
 80016ac:	08001f6a 	.word	0x08001f6a

080016b0 <__sflush_r>:
 80016b0:	898a      	ldrh	r2, [r1, #12]
 80016b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b6:	4605      	mov	r5, r0
 80016b8:	0710      	lsls	r0, r2, #28
 80016ba:	460c      	mov	r4, r1
 80016bc:	d458      	bmi.n	8001770 <__sflush_r+0xc0>
 80016be:	684b      	ldr	r3, [r1, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	dc05      	bgt.n	80016d0 <__sflush_r+0x20>
 80016c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dc02      	bgt.n	80016d0 <__sflush_r+0x20>
 80016ca:	2000      	movs	r0, #0
 80016cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	d0f9      	beq.n	80016ca <__sflush_r+0x1a>
 80016d6:	2300      	movs	r3, #0
 80016d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016dc:	682f      	ldr	r7, [r5, #0]
 80016de:	6a21      	ldr	r1, [r4, #32]
 80016e0:	602b      	str	r3, [r5, #0]
 80016e2:	d032      	beq.n	800174a <__sflush_r+0x9a>
 80016e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	075a      	lsls	r2, r3, #29
 80016ea:	d505      	bpl.n	80016f8 <__sflush_r+0x48>
 80016ec:	6863      	ldr	r3, [r4, #4]
 80016ee:	1ac0      	subs	r0, r0, r3
 80016f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016f2:	b10b      	cbz	r3, 80016f8 <__sflush_r+0x48>
 80016f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016f6:	1ac0      	subs	r0, r0, r3
 80016f8:	2300      	movs	r3, #0
 80016fa:	4602      	mov	r2, r0
 80016fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016fe:	6a21      	ldr	r1, [r4, #32]
 8001700:	4628      	mov	r0, r5
 8001702:	47b0      	blx	r6
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	89a3      	ldrh	r3, [r4, #12]
 8001708:	d106      	bne.n	8001718 <__sflush_r+0x68>
 800170a:	6829      	ldr	r1, [r5, #0]
 800170c:	291d      	cmp	r1, #29
 800170e:	d82b      	bhi.n	8001768 <__sflush_r+0xb8>
 8001710:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <__sflush_r+0x108>)
 8001712:	410a      	asrs	r2, r1
 8001714:	07d6      	lsls	r6, r2, #31
 8001716:	d427      	bmi.n	8001768 <__sflush_r+0xb8>
 8001718:	2200      	movs	r2, #0
 800171a:	6062      	str	r2, [r4, #4]
 800171c:	04d9      	lsls	r1, r3, #19
 800171e:	6922      	ldr	r2, [r4, #16]
 8001720:	6022      	str	r2, [r4, #0]
 8001722:	d504      	bpl.n	800172e <__sflush_r+0x7e>
 8001724:	1c42      	adds	r2, r0, #1
 8001726:	d101      	bne.n	800172c <__sflush_r+0x7c>
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	b903      	cbnz	r3, 800172e <__sflush_r+0x7e>
 800172c:	6560      	str	r0, [r4, #84]	; 0x54
 800172e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001730:	602f      	str	r7, [r5, #0]
 8001732:	2900      	cmp	r1, #0
 8001734:	d0c9      	beq.n	80016ca <__sflush_r+0x1a>
 8001736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800173a:	4299      	cmp	r1, r3
 800173c:	d002      	beq.n	8001744 <__sflush_r+0x94>
 800173e:	4628      	mov	r0, r5
 8001740:	f000 fa7a 	bl	8001c38 <_free_r>
 8001744:	2000      	movs	r0, #0
 8001746:	6360      	str	r0, [r4, #52]	; 0x34
 8001748:	e7c0      	b.n	80016cc <__sflush_r+0x1c>
 800174a:	2301      	movs	r3, #1
 800174c:	4628      	mov	r0, r5
 800174e:	47b0      	blx	r6
 8001750:	1c41      	adds	r1, r0, #1
 8001752:	d1c8      	bne.n	80016e6 <__sflush_r+0x36>
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0c5      	beq.n	80016e6 <__sflush_r+0x36>
 800175a:	2b1d      	cmp	r3, #29
 800175c:	d001      	beq.n	8001762 <__sflush_r+0xb2>
 800175e:	2b16      	cmp	r3, #22
 8001760:	d101      	bne.n	8001766 <__sflush_r+0xb6>
 8001762:	602f      	str	r7, [r5, #0]
 8001764:	e7b1      	b.n	80016ca <__sflush_r+0x1a>
 8001766:	89a3      	ldrh	r3, [r4, #12]
 8001768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176c:	81a3      	strh	r3, [r4, #12]
 800176e:	e7ad      	b.n	80016cc <__sflush_r+0x1c>
 8001770:	690f      	ldr	r7, [r1, #16]
 8001772:	2f00      	cmp	r7, #0
 8001774:	d0a9      	beq.n	80016ca <__sflush_r+0x1a>
 8001776:	0793      	lsls	r3, r2, #30
 8001778:	680e      	ldr	r6, [r1, #0]
 800177a:	bf08      	it	eq
 800177c:	694b      	ldreq	r3, [r1, #20]
 800177e:	600f      	str	r7, [r1, #0]
 8001780:	bf18      	it	ne
 8001782:	2300      	movne	r3, #0
 8001784:	eba6 0807 	sub.w	r8, r6, r7
 8001788:	608b      	str	r3, [r1, #8]
 800178a:	f1b8 0f00 	cmp.w	r8, #0
 800178e:	dd9c      	ble.n	80016ca <__sflush_r+0x1a>
 8001790:	6a21      	ldr	r1, [r4, #32]
 8001792:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001794:	4643      	mov	r3, r8
 8001796:	463a      	mov	r2, r7
 8001798:	4628      	mov	r0, r5
 800179a:	47b0      	blx	r6
 800179c:	2800      	cmp	r0, #0
 800179e:	dc06      	bgt.n	80017ae <__sflush_r+0xfe>
 80017a0:	89a3      	ldrh	r3, [r4, #12]
 80017a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a6:	81a3      	strh	r3, [r4, #12]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ac:	e78e      	b.n	80016cc <__sflush_r+0x1c>
 80017ae:	4407      	add	r7, r0
 80017b0:	eba8 0800 	sub.w	r8, r8, r0
 80017b4:	e7e9      	b.n	800178a <__sflush_r+0xda>
 80017b6:	bf00      	nop
 80017b8:	dfbffffe 	.word	0xdfbffffe

080017bc <_fflush_r>:
 80017bc:	b538      	push	{r3, r4, r5, lr}
 80017be:	690b      	ldr	r3, [r1, #16]
 80017c0:	4605      	mov	r5, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	b913      	cbnz	r3, 80017cc <_fflush_r+0x10>
 80017c6:	2500      	movs	r5, #0
 80017c8:	4628      	mov	r0, r5
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
 80017cc:	b118      	cbz	r0, 80017d6 <_fflush_r+0x1a>
 80017ce:	6a03      	ldr	r3, [r0, #32]
 80017d0:	b90b      	cbnz	r3, 80017d6 <_fflush_r+0x1a>
 80017d2:	f7ff f997 	bl	8000b04 <__sinit>
 80017d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f3      	beq.n	80017c6 <_fflush_r+0xa>
 80017de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017e0:	07d0      	lsls	r0, r2, #31
 80017e2:	d404      	bmi.n	80017ee <_fflush_r+0x32>
 80017e4:	0599      	lsls	r1, r3, #22
 80017e6:	d402      	bmi.n	80017ee <_fflush_r+0x32>
 80017e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ea:	f7ff fa92 	bl	8000d12 <__retarget_lock_acquire_recursive>
 80017ee:	4628      	mov	r0, r5
 80017f0:	4621      	mov	r1, r4
 80017f2:	f7ff ff5d 	bl	80016b0 <__sflush_r>
 80017f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017f8:	07da      	lsls	r2, r3, #31
 80017fa:	4605      	mov	r5, r0
 80017fc:	d4e4      	bmi.n	80017c8 <_fflush_r+0xc>
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	059b      	lsls	r3, r3, #22
 8001802:	d4e1      	bmi.n	80017c8 <_fflush_r+0xc>
 8001804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001806:	f7ff fa85 	bl	8000d14 <__retarget_lock_release_recursive>
 800180a:	e7dd      	b.n	80017c8 <_fflush_r+0xc>

0800180c <__malloc_lock>:
 800180c:	4801      	ldr	r0, [pc, #4]	; (8001814 <__malloc_lock+0x8>)
 800180e:	f7ff ba80 	b.w	8000d12 <__retarget_lock_acquire_recursive>
 8001812:	bf00      	nop
 8001814:	20000228 	.word	0x20000228

08001818 <__malloc_unlock>:
 8001818:	4801      	ldr	r0, [pc, #4]	; (8001820 <__malloc_unlock+0x8>)
 800181a:	f7ff ba7b 	b.w	8000d14 <__retarget_lock_release_recursive>
 800181e:	bf00      	nop
 8001820:	20000228 	.word	0x20000228

08001824 <__sread>:
 8001824:	b510      	push	{r4, lr}
 8001826:	460c      	mov	r4, r1
 8001828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800182c:	f000 f9c2 	bl	8001bb4 <_read_r>
 8001830:	2800      	cmp	r0, #0
 8001832:	bfab      	itete	ge
 8001834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001836:	89a3      	ldrhlt	r3, [r4, #12]
 8001838:	181b      	addge	r3, r3, r0
 800183a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800183e:	bfac      	ite	ge
 8001840:	6563      	strge	r3, [r4, #84]	; 0x54
 8001842:	81a3      	strhlt	r3, [r4, #12]
 8001844:	bd10      	pop	{r4, pc}

08001846 <__swrite>:
 8001846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800184a:	461f      	mov	r7, r3
 800184c:	898b      	ldrh	r3, [r1, #12]
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	4605      	mov	r5, r0
 8001852:	460c      	mov	r4, r1
 8001854:	4616      	mov	r6, r2
 8001856:	d505      	bpl.n	8001864 <__swrite+0x1e>
 8001858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800185c:	2302      	movs	r3, #2
 800185e:	2200      	movs	r2, #0
 8001860:	f000 f996 	bl	8001b90 <_lseek_r>
 8001864:	89a3      	ldrh	r3, [r4, #12]
 8001866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800186a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800186e:	81a3      	strh	r3, [r4, #12]
 8001870:	4632      	mov	r2, r6
 8001872:	463b      	mov	r3, r7
 8001874:	4628      	mov	r0, r5
 8001876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800187a:	f000 b9bd 	b.w	8001bf8 <_write_r>

0800187e <__sseek>:
 800187e:	b510      	push	{r4, lr}
 8001880:	460c      	mov	r4, r1
 8001882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001886:	f000 f983 	bl	8001b90 <_lseek_r>
 800188a:	1c43      	adds	r3, r0, #1
 800188c:	89a3      	ldrh	r3, [r4, #12]
 800188e:	bf15      	itete	ne
 8001890:	6560      	strne	r0, [r4, #84]	; 0x54
 8001892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800189a:	81a3      	strheq	r3, [r4, #12]
 800189c:	bf18      	it	ne
 800189e:	81a3      	strhne	r3, [r4, #12]
 80018a0:	bd10      	pop	{r4, pc}

080018a2 <__sclose>:
 80018a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018a6:	f000 b941 	b.w	8001b2c <_close_r>

080018aa <_realloc_r>:
 80018aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ae:	4680      	mov	r8, r0
 80018b0:	4614      	mov	r4, r2
 80018b2:	460e      	mov	r6, r1
 80018b4:	b921      	cbnz	r1, 80018c0 <_realloc_r+0x16>
 80018b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018ba:	4611      	mov	r1, r2
 80018bc:	f7ff bce8 	b.w	8001290 <_malloc_r>
 80018c0:	b92a      	cbnz	r2, 80018ce <_realloc_r+0x24>
 80018c2:	f000 f9b9 	bl	8001c38 <_free_r>
 80018c6:	4625      	mov	r5, r4
 80018c8:	4628      	mov	r0, r5
 80018ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ce:	f000 f9ff 	bl	8001cd0 <_malloc_usable_size_r>
 80018d2:	4284      	cmp	r4, r0
 80018d4:	4607      	mov	r7, r0
 80018d6:	d802      	bhi.n	80018de <_realloc_r+0x34>
 80018d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80018dc:	d812      	bhi.n	8001904 <_realloc_r+0x5a>
 80018de:	4621      	mov	r1, r4
 80018e0:	4640      	mov	r0, r8
 80018e2:	f7ff fcd5 	bl	8001290 <_malloc_r>
 80018e6:	4605      	mov	r5, r0
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d0ed      	beq.n	80018c8 <_realloc_r+0x1e>
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	4622      	mov	r2, r4
 80018f0:	4631      	mov	r1, r6
 80018f2:	bf28      	it	cs
 80018f4:	463a      	movcs	r2, r7
 80018f6:	f000 f991 	bl	8001c1c <memcpy>
 80018fa:	4631      	mov	r1, r6
 80018fc:	4640      	mov	r0, r8
 80018fe:	f000 f99b 	bl	8001c38 <_free_r>
 8001902:	e7e1      	b.n	80018c8 <_realloc_r+0x1e>
 8001904:	4635      	mov	r5, r6
 8001906:	e7df      	b.n	80018c8 <_realloc_r+0x1e>

08001908 <__swbuf_r>:
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190a:	460e      	mov	r6, r1
 800190c:	4614      	mov	r4, r2
 800190e:	4605      	mov	r5, r0
 8001910:	b118      	cbz	r0, 800191a <__swbuf_r+0x12>
 8001912:	6a03      	ldr	r3, [r0, #32]
 8001914:	b90b      	cbnz	r3, 800191a <__swbuf_r+0x12>
 8001916:	f7ff f8f5 	bl	8000b04 <__sinit>
 800191a:	69a3      	ldr	r3, [r4, #24]
 800191c:	60a3      	str	r3, [r4, #8]
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	071a      	lsls	r2, r3, #28
 8001922:	d525      	bpl.n	8001970 <__swbuf_r+0x68>
 8001924:	6923      	ldr	r3, [r4, #16]
 8001926:	b31b      	cbz	r3, 8001970 <__swbuf_r+0x68>
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	6922      	ldr	r2, [r4, #16]
 800192c:	1a98      	subs	r0, r3, r2
 800192e:	6963      	ldr	r3, [r4, #20]
 8001930:	b2f6      	uxtb	r6, r6
 8001932:	4283      	cmp	r3, r0
 8001934:	4637      	mov	r7, r6
 8001936:	dc04      	bgt.n	8001942 <__swbuf_r+0x3a>
 8001938:	4621      	mov	r1, r4
 800193a:	4628      	mov	r0, r5
 800193c:	f7ff ff3e 	bl	80017bc <_fflush_r>
 8001940:	b9e0      	cbnz	r0, 800197c <__swbuf_r+0x74>
 8001942:	68a3      	ldr	r3, [r4, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60a3      	str	r3, [r4, #8]
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	6022      	str	r2, [r4, #0]
 800194e:	701e      	strb	r6, [r3, #0]
 8001950:	6962      	ldr	r2, [r4, #20]
 8001952:	1c43      	adds	r3, r0, #1
 8001954:	429a      	cmp	r2, r3
 8001956:	d004      	beq.n	8001962 <__swbuf_r+0x5a>
 8001958:	89a3      	ldrh	r3, [r4, #12]
 800195a:	07db      	lsls	r3, r3, #31
 800195c:	d506      	bpl.n	800196c <__swbuf_r+0x64>
 800195e:	2e0a      	cmp	r6, #10
 8001960:	d104      	bne.n	800196c <__swbuf_r+0x64>
 8001962:	4621      	mov	r1, r4
 8001964:	4628      	mov	r0, r5
 8001966:	f7ff ff29 	bl	80017bc <_fflush_r>
 800196a:	b938      	cbnz	r0, 800197c <__swbuf_r+0x74>
 800196c:	4638      	mov	r0, r7
 800196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001970:	4621      	mov	r1, r4
 8001972:	4628      	mov	r0, r5
 8001974:	f000 f806 	bl	8001984 <__swsetup_r>
 8001978:	2800      	cmp	r0, #0
 800197a:	d0d5      	beq.n	8001928 <__swbuf_r+0x20>
 800197c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001980:	e7f4      	b.n	800196c <__swbuf_r+0x64>
	...

08001984 <__swsetup_r>:
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <__swsetup_r+0xac>)
 8001988:	4605      	mov	r5, r0
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	460c      	mov	r4, r1
 800198e:	b118      	cbz	r0, 8001998 <__swsetup_r+0x14>
 8001990:	6a03      	ldr	r3, [r0, #32]
 8001992:	b90b      	cbnz	r3, 8001998 <__swsetup_r+0x14>
 8001994:	f7ff f8b6 	bl	8000b04 <__sinit>
 8001998:	89a3      	ldrh	r3, [r4, #12]
 800199a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800199e:	0718      	lsls	r0, r3, #28
 80019a0:	d422      	bmi.n	80019e8 <__swsetup_r+0x64>
 80019a2:	06d9      	lsls	r1, r3, #27
 80019a4:	d407      	bmi.n	80019b6 <__swsetup_r+0x32>
 80019a6:	2309      	movs	r3, #9
 80019a8:	602b      	str	r3, [r5, #0]
 80019aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80019ae:	81a3      	strh	r3, [r4, #12]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b4:	e034      	b.n	8001a20 <__swsetup_r+0x9c>
 80019b6:	0758      	lsls	r0, r3, #29
 80019b8:	d512      	bpl.n	80019e0 <__swsetup_r+0x5c>
 80019ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019bc:	b141      	cbz	r1, 80019d0 <__swsetup_r+0x4c>
 80019be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019c2:	4299      	cmp	r1, r3
 80019c4:	d002      	beq.n	80019cc <__swsetup_r+0x48>
 80019c6:	4628      	mov	r0, r5
 80019c8:	f000 f936 	bl	8001c38 <_free_r>
 80019cc:	2300      	movs	r3, #0
 80019ce:	6363      	str	r3, [r4, #52]	; 0x34
 80019d0:	89a3      	ldrh	r3, [r4, #12]
 80019d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019d6:	81a3      	strh	r3, [r4, #12]
 80019d8:	2300      	movs	r3, #0
 80019da:	6063      	str	r3, [r4, #4]
 80019dc:	6923      	ldr	r3, [r4, #16]
 80019de:	6023      	str	r3, [r4, #0]
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	81a3      	strh	r3, [r4, #12]
 80019e8:	6923      	ldr	r3, [r4, #16]
 80019ea:	b94b      	cbnz	r3, 8001a00 <__swsetup_r+0x7c>
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f6:	d003      	beq.n	8001a00 <__swsetup_r+0x7c>
 80019f8:	4621      	mov	r1, r4
 80019fa:	4628      	mov	r0, r5
 80019fc:	f000 f840 	bl	8001a80 <__smakebuf_r>
 8001a00:	89a0      	ldrh	r0, [r4, #12]
 8001a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a06:	f010 0301 	ands.w	r3, r0, #1
 8001a0a:	d00a      	beq.n	8001a22 <__swsetup_r+0x9e>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60a3      	str	r3, [r4, #8]
 8001a10:	6963      	ldr	r3, [r4, #20]
 8001a12:	425b      	negs	r3, r3
 8001a14:	61a3      	str	r3, [r4, #24]
 8001a16:	6923      	ldr	r3, [r4, #16]
 8001a18:	b943      	cbnz	r3, 8001a2c <__swsetup_r+0xa8>
 8001a1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a1e:	d1c4      	bne.n	80019aa <__swsetup_r+0x26>
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	0781      	lsls	r1, r0, #30
 8001a24:	bf58      	it	pl
 8001a26:	6963      	ldrpl	r3, [r4, #20]
 8001a28:	60a3      	str	r3, [r4, #8]
 8001a2a:	e7f4      	b.n	8001a16 <__swsetup_r+0x92>
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	e7f7      	b.n	8001a20 <__swsetup_r+0x9c>
 8001a30:	20000060 	.word	0x20000060

08001a34 <__swhatbuf_r>:
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	460c      	mov	r4, r1
 8001a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a3c:	2900      	cmp	r1, #0
 8001a3e:	b096      	sub	sp, #88	; 0x58
 8001a40:	4615      	mov	r5, r2
 8001a42:	461e      	mov	r6, r3
 8001a44:	da0d      	bge.n	8001a62 <__swhatbuf_r+0x2e>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	bf0c      	ite	eq
 8001a52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001a56:	2340      	movne	r3, #64	; 0x40
 8001a58:	2000      	movs	r0, #0
 8001a5a:	6031      	str	r1, [r6, #0]
 8001a5c:	602b      	str	r3, [r5, #0]
 8001a5e:	b016      	add	sp, #88	; 0x58
 8001a60:	bd70      	pop	{r4, r5, r6, pc}
 8001a62:	466a      	mov	r2, sp
 8001a64:	f000 f872 	bl	8001b4c <_fstat_r>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	dbec      	blt.n	8001a46 <__swhatbuf_r+0x12>
 8001a6c:	9901      	ldr	r1, [sp, #4]
 8001a6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001a72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001a76:	4259      	negs	r1, r3
 8001a78:	4159      	adcs	r1, r3
 8001a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7e:	e7eb      	b.n	8001a58 <__swhatbuf_r+0x24>

08001a80 <__smakebuf_r>:
 8001a80:	898b      	ldrh	r3, [r1, #12]
 8001a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a84:	079d      	lsls	r5, r3, #30
 8001a86:	4606      	mov	r6, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	d507      	bpl.n	8001a9c <__smakebuf_r+0x1c>
 8001a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	6123      	str	r3, [r4, #16]
 8001a94:	2301      	movs	r3, #1
 8001a96:	6163      	str	r3, [r4, #20]
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	ab01      	add	r3, sp, #4
 8001a9e:	466a      	mov	r2, sp
 8001aa0:	f7ff ffc8 	bl	8001a34 <__swhatbuf_r>
 8001aa4:	9900      	ldr	r1, [sp, #0]
 8001aa6:	4605      	mov	r5, r0
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f7ff fbf1 	bl	8001290 <_malloc_r>
 8001aae:	b948      	cbnz	r0, 8001ac4 <__smakebuf_r+0x44>
 8001ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ab4:	059a      	lsls	r2, r3, #22
 8001ab6:	d4ef      	bmi.n	8001a98 <__smakebuf_r+0x18>
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	81a3      	strh	r3, [r4, #12]
 8001ac2:	e7e3      	b.n	8001a8c <__smakebuf_r+0xc>
 8001ac4:	89a3      	ldrh	r3, [r4, #12]
 8001ac6:	6020      	str	r0, [r4, #0]
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	81a3      	strh	r3, [r4, #12]
 8001ace:	9b00      	ldr	r3, [sp, #0]
 8001ad0:	6163      	str	r3, [r4, #20]
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	6120      	str	r0, [r4, #16]
 8001ad6:	b15b      	cbz	r3, 8001af0 <__smakebuf_r+0x70>
 8001ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001adc:	4630      	mov	r0, r6
 8001ade:	f000 f847 	bl	8001b70 <_isatty_r>
 8001ae2:	b128      	cbz	r0, 8001af0 <__smakebuf_r+0x70>
 8001ae4:	89a3      	ldrh	r3, [r4, #12]
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	81a3      	strh	r3, [r4, #12]
 8001af0:	89a3      	ldrh	r3, [r4, #12]
 8001af2:	431d      	orrs	r5, r3
 8001af4:	81a5      	strh	r5, [r4, #12]
 8001af6:	e7cf      	b.n	8001a98 <__smakebuf_r+0x18>

08001af8 <memmove>:
 8001af8:	4288      	cmp	r0, r1
 8001afa:	b510      	push	{r4, lr}
 8001afc:	eb01 0402 	add.w	r4, r1, r2
 8001b00:	d902      	bls.n	8001b08 <memmove+0x10>
 8001b02:	4284      	cmp	r4, r0
 8001b04:	4623      	mov	r3, r4
 8001b06:	d807      	bhi.n	8001b18 <memmove+0x20>
 8001b08:	1e43      	subs	r3, r0, #1
 8001b0a:	42a1      	cmp	r1, r4
 8001b0c:	d008      	beq.n	8001b20 <memmove+0x28>
 8001b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b16:	e7f8      	b.n	8001b0a <memmove+0x12>
 8001b18:	4402      	add	r2, r0
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	428a      	cmp	r2, r1
 8001b1e:	d100      	bne.n	8001b22 <memmove+0x2a>
 8001b20:	bd10      	pop	{r4, pc}
 8001b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b2a:	e7f7      	b.n	8001b1c <memmove+0x24>

08001b2c <_close_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	4d06      	ldr	r5, [pc, #24]	; (8001b48 <_close_r+0x1c>)
 8001b30:	2300      	movs	r3, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	602b      	str	r3, [r5, #0]
 8001b38:	f7fe fd51 	bl	80005de <_close>
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	d102      	bne.n	8001b46 <_close_r+0x1a>
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	b103      	cbz	r3, 8001b46 <_close_r+0x1a>
 8001b44:	6023      	str	r3, [r4, #0]
 8001b46:	bd38      	pop	{r3, r4, r5, pc}
 8001b48:	20000234 	.word	0x20000234

08001b4c <_fstat_r>:
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4d07      	ldr	r5, [pc, #28]	; (8001b6c <_fstat_r+0x20>)
 8001b50:	2300      	movs	r3, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	602b      	str	r3, [r5, #0]
 8001b5a:	f7fe fd4c 	bl	80005f6 <_fstat>
 8001b5e:	1c43      	adds	r3, r0, #1
 8001b60:	d102      	bne.n	8001b68 <_fstat_r+0x1c>
 8001b62:	682b      	ldr	r3, [r5, #0]
 8001b64:	b103      	cbz	r3, 8001b68 <_fstat_r+0x1c>
 8001b66:	6023      	str	r3, [r4, #0]
 8001b68:	bd38      	pop	{r3, r4, r5, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000234 	.word	0x20000234

08001b70 <_isatty_r>:
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4d06      	ldr	r5, [pc, #24]	; (8001b8c <_isatty_r+0x1c>)
 8001b74:	2300      	movs	r3, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	602b      	str	r3, [r5, #0]
 8001b7c:	f7fe fd4b 	bl	8000616 <_isatty>
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	d102      	bne.n	8001b8a <_isatty_r+0x1a>
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	b103      	cbz	r3, 8001b8a <_isatty_r+0x1a>
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	20000234 	.word	0x20000234

08001b90 <_lseek_r>:
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	4d07      	ldr	r5, [pc, #28]	; (8001bb0 <_lseek_r+0x20>)
 8001b94:	4604      	mov	r4, r0
 8001b96:	4608      	mov	r0, r1
 8001b98:	4611      	mov	r1, r2
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	602a      	str	r2, [r5, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f7fe fd44 	bl	800062c <_lseek>
 8001ba4:	1c43      	adds	r3, r0, #1
 8001ba6:	d102      	bne.n	8001bae <_lseek_r+0x1e>
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	b103      	cbz	r3, 8001bae <_lseek_r+0x1e>
 8001bac:	6023      	str	r3, [r4, #0]
 8001bae:	bd38      	pop	{r3, r4, r5, pc}
 8001bb0:	20000234 	.word	0x20000234

08001bb4 <_read_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4d07      	ldr	r5, [pc, #28]	; (8001bd4 <_read_r+0x20>)
 8001bb8:	4604      	mov	r4, r0
 8001bba:	4608      	mov	r0, r1
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	602a      	str	r2, [r5, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7fe fcd2 	bl	800056c <_read>
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d102      	bne.n	8001bd2 <_read_r+0x1e>
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	b103      	cbz	r3, 8001bd2 <_read_r+0x1e>
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	20000234 	.word	0x20000234

08001bd8 <_sbrk_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4d06      	ldr	r5, [pc, #24]	; (8001bf4 <_sbrk_r+0x1c>)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4604      	mov	r4, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	602b      	str	r3, [r5, #0]
 8001be4:	f7fe fd30 	bl	8000648 <_sbrk>
 8001be8:	1c43      	adds	r3, r0, #1
 8001bea:	d102      	bne.n	8001bf2 <_sbrk_r+0x1a>
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	b103      	cbz	r3, 8001bf2 <_sbrk_r+0x1a>
 8001bf0:	6023      	str	r3, [r4, #0]
 8001bf2:	bd38      	pop	{r3, r4, r5, pc}
 8001bf4:	20000234 	.word	0x20000234

08001bf8 <_write_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4d07      	ldr	r5, [pc, #28]	; (8001c18 <_write_r+0x20>)
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	2200      	movs	r2, #0
 8001c04:	602a      	str	r2, [r5, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f7fe fccd 	bl	80005a6 <_write>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_write_r+0x1e>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_write_r+0x1e>
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	20000234 	.word	0x20000234

08001c1c <memcpy>:
 8001c1c:	440a      	add	r2, r1
 8001c1e:	4291      	cmp	r1, r2
 8001c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001c24:	d100      	bne.n	8001c28 <memcpy+0xc>
 8001c26:	4770      	bx	lr
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c32:	4291      	cmp	r1, r2
 8001c34:	d1f9      	bne.n	8001c2a <memcpy+0xe>
 8001c36:	bd10      	pop	{r4, pc}

08001c38 <_free_r>:
 8001c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c3a:	2900      	cmp	r1, #0
 8001c3c:	d044      	beq.n	8001cc8 <_free_r+0x90>
 8001c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c42:	9001      	str	r0, [sp, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f1a1 0404 	sub.w	r4, r1, #4
 8001c4a:	bfb8      	it	lt
 8001c4c:	18e4      	addlt	r4, r4, r3
 8001c4e:	f7ff fddd 	bl	800180c <__malloc_lock>
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <_free_r+0x94>)
 8001c54:	9801      	ldr	r0, [sp, #4]
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	b933      	cbnz	r3, 8001c68 <_free_r+0x30>
 8001c5a:	6063      	str	r3, [r4, #4]
 8001c5c:	6014      	str	r4, [r2, #0]
 8001c5e:	b003      	add	sp, #12
 8001c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c64:	f7ff bdd8 	b.w	8001818 <__malloc_unlock>
 8001c68:	42a3      	cmp	r3, r4
 8001c6a:	d908      	bls.n	8001c7e <_free_r+0x46>
 8001c6c:	6825      	ldr	r5, [r4, #0]
 8001c6e:	1961      	adds	r1, r4, r5
 8001c70:	428b      	cmp	r3, r1
 8001c72:	bf01      	itttt	eq
 8001c74:	6819      	ldreq	r1, [r3, #0]
 8001c76:	685b      	ldreq	r3, [r3, #4]
 8001c78:	1949      	addeq	r1, r1, r5
 8001c7a:	6021      	streq	r1, [r4, #0]
 8001c7c:	e7ed      	b.n	8001c5a <_free_r+0x22>
 8001c7e:	461a      	mov	r2, r3
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b10b      	cbz	r3, 8001c88 <_free_r+0x50>
 8001c84:	42a3      	cmp	r3, r4
 8001c86:	d9fa      	bls.n	8001c7e <_free_r+0x46>
 8001c88:	6811      	ldr	r1, [r2, #0]
 8001c8a:	1855      	adds	r5, r2, r1
 8001c8c:	42a5      	cmp	r5, r4
 8001c8e:	d10b      	bne.n	8001ca8 <_free_r+0x70>
 8001c90:	6824      	ldr	r4, [r4, #0]
 8001c92:	4421      	add	r1, r4
 8001c94:	1854      	adds	r4, r2, r1
 8001c96:	42a3      	cmp	r3, r4
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	d1e0      	bne.n	8001c5e <_free_r+0x26>
 8001c9c:	681c      	ldr	r4, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	6053      	str	r3, [r2, #4]
 8001ca2:	440c      	add	r4, r1
 8001ca4:	6014      	str	r4, [r2, #0]
 8001ca6:	e7da      	b.n	8001c5e <_free_r+0x26>
 8001ca8:	d902      	bls.n	8001cb0 <_free_r+0x78>
 8001caa:	230c      	movs	r3, #12
 8001cac:	6003      	str	r3, [r0, #0]
 8001cae:	e7d6      	b.n	8001c5e <_free_r+0x26>
 8001cb0:	6825      	ldr	r5, [r4, #0]
 8001cb2:	1961      	adds	r1, r4, r5
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	bf04      	itt	eq
 8001cb8:	6819      	ldreq	r1, [r3, #0]
 8001cba:	685b      	ldreq	r3, [r3, #4]
 8001cbc:	6063      	str	r3, [r4, #4]
 8001cbe:	bf04      	itt	eq
 8001cc0:	1949      	addeq	r1, r1, r5
 8001cc2:	6021      	streq	r1, [r4, #0]
 8001cc4:	6054      	str	r4, [r2, #4]
 8001cc6:	e7ca      	b.n	8001c5e <_free_r+0x26>
 8001cc8:	b003      	add	sp, #12
 8001cca:	bd30      	pop	{r4, r5, pc}
 8001ccc:	2000022c 	.word	0x2000022c

08001cd0 <_malloc_usable_size_r>:
 8001cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cd4:	1f18      	subs	r0, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bfbc      	itt	lt
 8001cda:	580b      	ldrlt	r3, [r1, r0]
 8001cdc:	18c0      	addlt	r0, r0, r3
 8001cde:	4770      	bx	lr

08001ce0 <_init>:
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	bf00      	nop
 8001ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce6:	bc08      	pop	{r3}
 8001ce8:	469e      	mov	lr, r3
 8001cea:	4770      	bx	lr

08001cec <_fini>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr
