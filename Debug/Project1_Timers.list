
Project1_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f8  080032f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080032f8  080032f8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f8  080032f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000234c  20000068  08003368  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023b4  08003368  000223b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000028e7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000923  00000000  00000000  000229c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  000232e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017f  00000000  00000000  00023508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002588b  00000000  00000000  00023687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002e81  00000000  00000000  00048f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e725c  00000000  00000000  0004bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013ac  00000000  00000000  00132ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0013439c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002fec 	.word	0x08002fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002fec 	.word	0x08002fec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <clock_init>:

#include "stm32l476xx.h"

//static uint32_t prescaleVal = 15;

void clock_init(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <clock_init+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <clock_init+0x68>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000baa:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000bac:	bf00      	nop
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <clock_init+0x68>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <clock_init+0x68>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <clock_init+0x68>)
 8000bc0:	f023 0303 	bic.w	r3, r3, #3
 8000bc4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <clock_init+0x68>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <clock_init+0x68>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 8000bd2:	bf00      	nop
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <clock_init+0x68>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f9      	beq.n	8000bd4 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <clock_init+0x68>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <clock_init+0x68>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <clock_init+0x68>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <clock_init+0x68>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <TIM_Init>:

void TIM_Init(void){
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	 // Enable clock for GPIOA peripheral
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <TIM_Init+0x198>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a63      	ldr	r2, [pc, #396]	; (8000da0 <TIM_Init+0x198>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure GPIOA0 in alternate function mode
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
 8000c1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c24:	f023 0303 	bic.w	r3, r3, #3
 8000c28:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER0_1;
 8000c2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6013      	str	r3, [r2, #0]

	// Select the desired alternate function (AF) for the pin
	// This depends on the specific function generator and the pin's datasheet
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL0;
 8000c3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c44:	f023 030f 	bic.w	r3, r3, #15
 8000c48:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (uint32_t)0x01; // Set alternate function to TIM2
 8000c4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6213      	str	r3, [r2, #32]
	//Calculate Prescaler based on System Core clock
	uint32_t prescaler = SystemCoreClock/1000000 - 1;
 8000c5a:	4b52      	ldr	r3, [pc, #328]	; (8000da4 <TIM_Init+0x19c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a52      	ldr	r2, [pc, #328]	; (8000da8 <TIM_Init+0x1a0>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0c9b      	lsrs	r3, r3, #18
 8000c66:	3b01      	subs	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
	//Print statement to start init

	// Enable TIM2 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000c6a:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <TIM_Init+0x198>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <TIM_Init+0x198>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6593      	str	r3, [r2, #88]	; 0x58

	//Disable TIM2
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6013      	str	r3, [r2, #0]

	// Set prescaler
	TIM2->PSC = prescaler;
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6293      	str	r3, [r2, #40]	; 0x28

	//Write CC1S bits to 01 to select TI1
	TIM2->CCMR1 &= ~TIM_CCMR1_CC1S;
 8000c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	f023 0303 	bic.w	r3, r3, #3
 8000c9c:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
	//Select polarity for TI1FP1. CC1P = 0, CC1NP = 0
	TIM2->CCER &= ~TIM_CCER_CC1P;
 8000cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	f023 0302 	bic.w	r3, r3, #2
 8000cbc:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC1NP;         //Set for rising edge
 8000cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc8:	f023 0308 	bic.w	r3, r3, #8
 8000ccc:	6213      	str	r3, [r2, #32]

	//Wreite CC2S bits to 10 to select TI1
	TIM2->CCMR1 &= ~TIM_CCMR1_CC2S;
 8000cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cdc:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC2S_1;
 8000cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cec:	6193      	str	r3, [r2, #24]

	//Select polarity for TI1FP2. CC2P = 1, CC2NP = 0
	TIM2->CCER |= TIM_CCER_CC2P;
 8000cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~TIM_CCER_CC2NP;         //Set for falling edge
 8000cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d0c:	6213      	str	r3, [r2, #32]

	//Select valid trigger input: write TS bits to 101
	TIM2->SMCR &= ~TIM_SMCR_TS;
 8000d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d1c:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_TS_2;
 8000d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_TS_0;
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	6093      	str	r3, [r2, #8]

	//Write SMS bits to 100 for slave mode
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4c:	f023 0307 	bic.w	r3, r3, #7
 8000d50:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_SMS_2;
 8000d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6093      	str	r3, [r2, #8]

	//Enable capture/compare 1 and 2
	TIM2->CCER |= TIM_CCER_CC1E;
 8000d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC2E;
 8000d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	6213      	str	r3, [r2, #32]

	// Enable the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 8000d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6013      	str	r3, [r2, #0]
	return;
 8000d92:	bf00      	nop

}
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	431bde83 	.word	0x431bde83

08000dac <set_timer_base>:
// runs the power on self-test. Returns true if the test passes, false otherwise
//confirm that the GPIO port is seeing pulses at least once in 100 milliseconds
_Bool power_on_self_test( void );

// ask user for expected period, sets timer clock accordingly. Return period or 0 if invalid
int set_timer_base( void ){
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
	return lowerLimit;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <set_timer_base+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000000 	.word	0x20000000

08000dc4 <printString>:

// Captures 1 line of text from console. Returns nul terminated string when \n is entered
void get_line ( uint8_t *buffer, int max_length );

void printString(char* string){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	n = sprintf((char *)buffer, "%s", string);
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4909      	ldr	r1, [pc, #36]	; (8000df4 <printString+0x30>)
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <printString+0x34>)
 8000dd2:	f001 f97d 	bl	80020d0 <siprintf>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <printString+0x38>)
 8000dda:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <printString+0x38>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4905      	ldr	r1, [pc, #20]	; (8000df8 <printString+0x34>)
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <printString+0x3c>)
 8000de6:	f000 fe7e 	bl	8001ae6 <USART_Write>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08003004 	.word	0x08003004
 8000df8:	20000120 	.word	0x20000120
 8000dfc:	20000318 	.word	0x20000318
 8000e00:	40004400 	.word	0x40004400

08000e04 <initialize_map>:

struct KeyValue* initialize_map(int size) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    struct KeyValue* map = (struct KeyValue*)calloc(size * sizeof(struct KeyValue), 0);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fec6 	bl	8001ba4 <calloc>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60bb      	str	r3, [r7, #8]
    if(map == NULL){
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10a      	bne.n	8000e38 <initialize_map+0x34>
    	fprintf(stderr, "Error allocating for map");
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <initialize_map+0x6c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	2218      	movs	r2, #24
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <initialize_map+0x70>)
 8000e2e:	f001 f92f 	bl	8002090 <fwrite>
    	exit(99);
 8000e32:	2063      	movs	r0, #99	; 0x63
 8000e34:	f000 fed4 	bl	8001be0 <exit>
    }
    for (int i = 0; i < size; i++) {
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e00e      	b.n	8000e5c <initialize_map+0x58>
        map[i].key = 0;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
        map[i].value = 0;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	4413      	add	r3, r2
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbec      	blt.n	8000e3e <initialize_map+0x3a>
    }
    return map;
 8000e64:	68bb      	ldr	r3, [r7, #8]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000064 	.word	0x20000064
 8000e74:	08003008 	.word	0x08003008

08000e78 <update_map>:
 * @int *numbers: The pointer to the array of measurements
 *
 * @int size: The amount of entries to be entered into the dictionary
 *
 */
void update_map(struct KeyValue* map, int* numbers, int size) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	e036      	b.n	8000ef8 <update_map+0x80>
    	// Grab a data entry
        int number = numbers[i];
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	4413      	add	r3, r2
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < size; j++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	e026      	b.n	8000eea <update_map+0x72>
        	//If it is already in the map, increment the count
            if (map[j].key == number) {
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d107      	bne.n	8000ebc <update_map+0x44>
                map[j].value++;
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	3201      	adds	r2, #1
 8000eb8:	605a      	str	r2, [r3, #4]
                break;
 8000eba:	e01a      	b.n	8000ef2 <update_map+0x7a>
            }
            //Otherwise add it to the map
            if (map[j].key == 0) {
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10c      	bne.n	8000ee4 <update_map+0x6c>
                map[j].key = number;
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]
                map[j].value = 1;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
                break;
 8000ee2:	e006      	b.n	8000ef2 <update_map+0x7a>
        for (int j = 0; j < size; j++) {
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dbd4      	blt.n	8000e9c <update_map+0x24>
    for (int i = 0; i < size; i++) {
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fa      	ldr	r2, [r7, #28]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dbc4      	blt.n	8000e8a <update_map+0x12>
            }
        }
    }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <swap>:
/*A helper function that swaps to entries in a dictionary
 *
 */
void swap(struct KeyValue* a, struct KeyValue* b) {
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
    struct KeyValue temp = *a;
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f22:	e883 0003 	stmia.w	r3, {r0, r1}
    *a = *b;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2e:	e883 0003 	stmia.w	r3, {r0, r1}
    *b = temp;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f3e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <sort_dictionary>:
/*Sorts the dictionary in ascending order
 *
 */
void sort_dictionary(struct KeyValue* arr, size_t arrSize) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < arrSize - 1; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e028      	b.n	8000fb0 <sort_dictionary+0x62>
        for (size_t j = 0; j < arrSize - i - 1; j++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	e01b      	b.n	8000f9c <sort_dictionary+0x4e>
            if (arr[j].key > arr[j + 1].key) {
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3301      	adds	r3, #1
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	440b      	add	r3, r1
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dd0b      	ble.n	8000f96 <sort_dictionary+0x48>
                swap(&arr[j], &arr[j + 1]);
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	18d0      	adds	r0, r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff ffbc 	bl	8000f0e <swap>
        for (size_t j = 0; j < arrSize - i - 1; j++) {
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3dc      	bcc.n	8000f64 <sort_dictionary+0x16>
    for (size_t i = 0; i < arrSize - 1; i++) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3d1      	bcc.n	8000f5e <sort_dictionary+0x10>
            }
        }
    }
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <printChar>:

void printChar(char ch){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	n = sprintf((char *)buffer, "%c", ch);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4909      	ldr	r1, [pc, #36]	; (8000ff8 <printChar+0x34>)
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <printChar+0x38>)
 8000fd6:	f001 f87b 	bl	80020d0 <siprintf>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a08      	ldr	r2, [pc, #32]	; (8001000 <printChar+0x3c>)
 8000fde:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <printChar+0x3c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4905      	ldr	r1, [pc, #20]	; (8000ffc <printChar+0x38>)
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <printChar+0x40>)
 8000fea:	f000 fd7c 	bl	8001ae6 <USART_Write>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	08003024 	.word	0x08003024
 8000ffc:	20000120 	.word	0x20000120
 8001000:	20000318 	.word	0x20000318
 8001004:	40004400 	.word	0x40004400

08001008 <power_on_self_test>:

_Bool power_on_self_test(void){
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
	    //POST Pass if it saw a signal
	  while((TIM2->SR & (TIM_SR_CC1IF|| TIM_SR_CC2IF))){
 800100c:	bf00      	nop
 800100e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <power_on_self_test+0x1c>
		  pulseDetected = true;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <power_on_self_test+0x2c>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		  break;
 8001022:	bf00      	nop
	  }
	  return pulseDetected;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <power_on_self_test+0x2c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3

}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	2000011a 	.word	0x2000011a

08001038 <init_measurement>:
	// Clear the CC1F flag
//	TIM2->SR &= ~TIM_SR_CC1IF;
	return diff;
}

int init_measurement( uint32_t limit ) {
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 101; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e007      	b.n	8001056 <init_measurement+0x1e>
		buckets[i] = 0;
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <init_measurement+0x38>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2100      	movs	r1, #0
 800104c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 101; i++) {
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3301      	adds	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	ddf4      	ble.n	8001046 <init_measurement+0xe>
	}
	lastCapture = 0;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <init_measurement+0x3c>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	return 0;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000184 	.word	0x20000184
 8001074:	2000011c 	.word	0x2000011c

08001078 <make_measurements>:

void make_measurements( uint32_t limit ) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	  int idx = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
	  //int PrevMeas = 0;
	  TIM2->CNT = 0;
 8001084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
	  while(idx != 1000){
 800108c:	e036      	b.n	80010fc <make_measurements+0x84>
		 if((TIM2->SR & 0x02)){	//We read a signal in
 800108e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d02f      	beq.n	80010fc <make_measurements+0x84>
			 //This is our first ever measurement
				 //Add the measurement to the array IF it is in bounds
				 int MS = (int)((TIM2->CCR1 / 4000000.0) * 1000000.0); //- PrevMeas;
 800109c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa3e 	bl	8000524 <__aeabi_ui2d>
 80010a8:	a31b      	add	r3, pc, #108	; (adr r3, 8001118 <make_measurements+0xa0>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fbdd 	bl	800086c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	a319      	add	r3, pc, #100	; (adr r3, 8001120 <make_measurements+0xa8>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff faaa 	bl	8000618 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd3e 	bl	8000b4c <__aeabi_d2iz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	60bb      	str	r3, [r7, #8]
				 //PrevMeas = (int)((TIM2->CCR1 / 4000000.0) * 1000000.0);
				 if(MS >= lowerLimit && MS <= (lowerLimit + 100)){
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <make_measurements+0x98>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d30e      	bcc.n	80010fc <make_measurements+0x84>
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <make_measurements+0x98>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d307      	bcc.n	80010fc <make_measurements+0x84>
					 meas[idx] = MS;
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <make_measurements+0x9c>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					 idx ++;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
	  while(idx != 1000){
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001102:	d1c4      	bne.n	800108e <make_measurements+0x16>

				 }
			 }
	  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000
 8001114:	2000031c 	.word	0x2000031c
 8001118:	00000000 	.word	0x00000000
 800111c:	414e8480 	.word	0x414e8480
 8001120:	00000000 	.word	0x00000000
 8001124:	412e8480 	.word	0x412e8480

08001128 <printFunct>:


void printFunct(char* printBuffer) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	USART_Write(USART2, (uint8_t*)printBuffer, strlen(printBuffer)); // simple print solution
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f857 	bl	80001e4 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <printFunct+0x24>)
 800113e:	f000 fcd2 	bl	8001ae6 <USART_Write>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004400 	.word	0x40004400

08001150 <print_measurements>:

void print_measurements( uint32_t limit ) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	//first, prepare for printing
	  struct KeyValue* Measures = initialize_map(1000);
 8001158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115c:	f7ff fe52 	bl	8000e04 <initialize_map>
 8001160:	60b8      	str	r0, [r7, #8]
	  update_map(Measures, meas, 1000);
 8001162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001166:	491f      	ldr	r1, [pc, #124]	; (80011e4 <print_measurements+0x94>)
 8001168:	68b8      	ldr	r0, [r7, #8]
 800116a:	f7ff fe85 	bl	8000e78 <update_map>
	  //Sort the dictionary in ascending order
	  sort_dictionary(Measures, 1000);
 800116e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001172:	68b8      	ldr	r0, [r7, #8]
 8001174:	f7ff feeb 	bl	8000f4e <sort_dictionary>

	for (int i = 0; i < 1001; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e029      	b.n	80011d2 <print_measurements+0x82>
		if ((Measures[i].key > (lowerLimit)) && (Measures[i].key < (lowerLimit + 101))) {
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	4413      	add	r3, r2
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <print_measurements+0x98>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d91c      	bls.n	80011cc <print_measurements+0x7c>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	4413      	add	r3, r2
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <print_measurements+0x98>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3365      	adds	r3, #101	; 0x65
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d211      	bcs.n	80011cc <print_measurements+0x7c>
			sprintf(lineBuffer, " Period: %d Count: %d \r\n",Measures[i].key, Measures[i].value);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	4413      	add	r3, r2
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	460a      	mov	r2, r1
 80011be:	490b      	ldr	r1, [pc, #44]	; (80011ec <print_measurements+0x9c>)
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <print_measurements+0xa0>)
 80011c2:	f000 ff85 	bl	80020d0 <siprintf>
//			USART_Write(USART2, (uint8_t*) lineBuffer, n);
			printFunct(lineBuffer);
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <print_measurements+0xa0>)
 80011c8:	f7ff ffae 	bl	8001128 <printFunct>
	for (int i = 0; i < 1001; i++) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d8:	ddd1      	ble.n	800117e <print_measurements+0x2e>
		}
	}

}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000031c 	.word	0x2000031c
 80011e8:	20000000 	.word	0x20000000
 80011ec:	08003028 	.word	0x08003028
 80011f0:	20000084 	.word	0x20000084

080011f4 <print_duty>:

void print_duty(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
	int index;
	 struct KeyValue* map = initialize_map(1001);
 80011fa:	f240 30e9 	movw	r0, #1001	; 0x3e9
 80011fe:	f7ff fe01 	bl	8000e04 <initialize_map>
 8001202:	60f8      	str	r0, [r7, #12]
	  update_map(map, dutys, 1001);
 8001204:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001208:	4926      	ldr	r1, [pc, #152]	; (80012a4 <print_duty+0xb0>)
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff fe34 	bl	8000e78 <update_map>
	  //Sort the dict in ascending order
	  sort_dictionary(map, 1001);
 8001210:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff fe9a 	bl	8000f4e <sort_dictionary>


	  index = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
	  //Print out each value and it's count
	 for (int i = 0; i < 1001 ; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	e035      	b.n	8001290 <print_duty+0x9c>
		  if(map[i].value > 0 && map[i].key < 10000){
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd28      	ble.n	8001284 <print_duty+0x90>
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001240:	4293      	cmp	r3, r2
 8001242:	dc1f      	bgt.n	8001284 <print_duty+0x90>
			  int  DutyCycle= map[i].key ;
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60bb      	str	r3, [r7, #8]
			  int count = map[i].value;
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	607b      	str	r3, [r7, #4]
			  sprintf(lineBuffer, "\r\n");
 800125c:	4912      	ldr	r1, [pc, #72]	; (80012a8 <print_duty+0xb4>)
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <print_duty+0xb8>)
 8001260:	f000 ff36 	bl	80020d0 <siprintf>
			  printFunct(lineBuffer);
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <print_duty+0xb8>)
 8001266:	f7ff ff5f 	bl	8001128 <printFunct>
			  sprintf(lineBuffer, "Duty Cycle Calculation\r\n");
 800126a:	4911      	ldr	r1, [pc, #68]	; (80012b0 <print_duty+0xbc>)
 800126c:	480f      	ldr	r0, [pc, #60]	; (80012ac <print_duty+0xb8>)
 800126e:	f000 ff2f 	bl	80020d0 <siprintf>
			  sprintf(lineBuffer, " Duty: %d Count: %d \r\n",DutyCycle, count );
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	490f      	ldr	r1, [pc, #60]	; (80012b4 <print_duty+0xc0>)
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <print_duty+0xb8>)
 800127a:	f000 ff29 	bl	80020d0 <siprintf>
			  printFunct(lineBuffer);
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <print_duty+0xb8>)
 8001280:	f7ff ff52 	bl	8001128 <printFunct>
		  }
		  index++;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
	 for (int i = 0; i < 1001 ; i++) {
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	3301      	adds	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001296:	ddc5      	ble.n	8001224 <print_duty+0x30>
	  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200012c0 	.word	0x200012c0
 80012a8:	08003044 	.word	0x08003044
 80012ac:	20000084 	.word	0x20000084
 80012b0:	08003048 	.word	0x08003048
 80012b4:	08003064 	.word	0x08003064

080012b8 <Start_Timer>:


void Start_Timer(void) {
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
    // Start the timer by enabling the counter
    TIM2->CR1 |= TIM_CR1_CEN;
 80012bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
    TIM2->CNT &= 0;
 80012cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <Stop_Timer>:

void Stop_Timer(void) {
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    // Stop the timer by disabling the counter
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80012e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]
    TIM2->CNT &= 0;
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <TIM_Duty>:

void TIM_Duty(void){
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
	    	  double tFall = 0.0;
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    	  double tRise = 0.0;
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    	  double tEnd  = 0.0;
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    	  // Stop TIM2 Channel 1
	    	  TIM2->CCER &= ~TIM_CCER_CC1E;
 800133a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6213      	str	r3, [r2, #32]

	    	  // Stop TIM2 Channel 2
	    	  TIM2->CCER &= ~TIM_CCER_CC2E;
 800134a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001354:	f023 0310 	bic.w	r3, r3, #16
 8001358:	6213      	str	r3, [r2, #32]
	    	  TIM2->CNT = 0;
 800135a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
			// Start TIM2 Channel 1
			TIM2->CCER |= TIM_CCER_CC1E;
 8001362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]

			// Start TIM2 Channel 2
			TIM2->CCER |= TIM_CCER_CC2E;
 8001372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6213      	str	r3, [r2, #32]
	    	  int ind = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
	    	  while(ind != 1001){
 8001386:	e09d      	b.n	80014c4 <TIM_Duty+0x1b4>
	    		  if((TIM2->SR & 0x02)){
 8001388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d029      	beq.n	80013ea <TIM_Duty+0xda>
	    			  if(tRise == 0.0){
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013a2:	f7ff fba1 	bl	8000ae8 <__aeabi_dcmpeq>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00f      	beq.n	80013cc <TIM_Duty+0xbc>
	    				  tRise = TIM2->CCR1 / 4000000.0 ;
 80013ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8b6 	bl	8000524 <__aeabi_ui2d>
 80013b8:	a359      	add	r3, pc, #356	; (adr r3, 8001520 <TIM_Duty+0x210>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff fa55 	bl	800086c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013ca:	e00e      	b.n	80013ea <TIM_Duty+0xda>
	    			  }
	    			  else{
	    				  tEnd = TIM2->CCR1 / 4000000.0 ;
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8a6 	bl	8000524 <__aeabi_ui2d>
 80013d8:	a351      	add	r3, pc, #324	; (adr r3, 8001520 <TIM_Duty+0x210>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff fa45 	bl	800086c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    			  }
	    		  }
	    		  if((TIM2->SR & 0x04)){
 80013ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00f      	beq.n	8001418 <TIM_Duty+0x108>
	    			  	  tFall = (TIM2->CCR2 / 4000000.0) ;
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f890 	bl	8000524 <__aeabi_ui2d>
 8001404:	a346      	add	r3, pc, #280	; (adr r3, 8001520 <TIM_Duty+0x210>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff fa2f 	bl	800086c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    			  	  continue;
 8001416:	e055      	b.n	80014c4 <TIM_Duty+0x1b4>
	    		  }
	    		  //We can calculate the duty cycle
	    		  if((tFall != 0.0) && (tRise != 0.0) && (tEnd != 0.0)){
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001424:	f7ff fb60 	bl	8000ae8 <__aeabi_dcmpeq>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d000      	beq.n	8001430 <TIM_Duty+0x120>
 800142e:	e049      	b.n	80014c4 <TIM_Duty+0x1b4>
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800143c:	f7ff fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d000      	beq.n	8001448 <TIM_Duty+0x138>
 8001446:	e03d      	b.n	80014c4 <TIM_Duty+0x1b4>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001454:	f7ff fb48 	bl	8000ae8 <__aeabi_dcmpeq>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d000      	beq.n	8001460 <TIM_Duty+0x150>
 800145e:	e031      	b.n	80014c4 <TIM_Duty+0x1b4>
	    			  //double tOn = tFall - tRise;
	    			  //double tOff = tEnd - tFall;
	    			  double DutyCyc = tFall / tRise;
 8001460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001464:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001468:	f7ff fa00 	bl	800086c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c7 2300 	strd	r2, r3, [r7]
	    			  //We throw out the first measurement because it hasnt seen the next pulse yet
	    			  if(ind != 0){
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d011      	beq.n	800149e <TIM_Duty+0x18e>
	    			  dutys[ind] = DutyCyc * 100;
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <TIM_Duty+0x208>)
 8001480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001484:	f7ff f8c8 	bl	8000618 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb5c 	bl	8000b4c <__aeabi_d2iz>
 8001494:	4602      	mov	r2, r0
 8001496:	4921      	ldr	r1, [pc, #132]	; (800151c <TIM_Duty+0x20c>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    			  }
	    			  //reset the fall and end times
	    			  tFall = 0.0;
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    			  tRise = tEnd;
 80014aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    			  tEnd = 0.0;
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
					  ind ++;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
	    	  while(ind != 1001){
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f47f af5c 	bne.w	8001388 <TIM_Duty+0x78>

	    		  }

	    	  }
	    	  for(int i = 0; i < 1001; i ++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	e015      	b.n	8001502 <TIM_Duty+0x1f2>
	    		  if(dutys[i] > 10000){
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <TIM_Duty+0x20c>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	f242 7210 	movw	r2, #10000	; 0x2710
 80014e2:	4293      	cmp	r3, r2
 80014e4:	dd0a      	ble.n	80014fc <TIM_Duty+0x1ec>
	    			  // Adjust for extremely high freq
	    			  dutys[i] = dutys[i] - 10000;
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <TIM_Duty+0x20c>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80014f2:	3b10      	subs	r3, #16
 80014f4:	4909      	ldr	r1, [pc, #36]	; (800151c <TIM_Duty+0x20c>)
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	    	  for(int i = 0; i < 1001; i ++){
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	3301      	adds	r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001508:	dde5      	ble.n	80014d6 <TIM_Duty+0x1c6>
	    		  }
	    	  }
	    	  ind = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40590000 	.word	0x40590000
 800151c:	200012c0 	.word	0x200012c0
 8001520:	00000000 	.word	0x00000000
 8001524:	414e8480 	.word	0x414e8480

08001528 <main>:
//////////////////////////////////////////////////////////////
// Embedded code usually consists of 2 components
//  - The init section is run once at startup and initializes all low level drivers and modules
//  - A main loop that runs forever that calls the application tasks repeatedly.
////////////////
int main(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

    // Initialization executed once at startup
//    UART_Init();
    TIM_Init();
 800152e:	f7ff fb6b 	bl	8000c08 <TIM_Init>
	USART2_Init(9600);			// Initialize USART for terminal
 8001532:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001536:	f000 f9eb 	bl	8001910 <USART2_Init>
	clock_init();				// Initialize clock
 800153a:	f7ff fb2f 	bl	8000b9c <clock_init>
	Start_Timer();
 800153e:	f7ff febb 	bl	80012b8 <Start_Timer>
    while( power_on_self_test() == false)
 8001542:	bf00      	nop
 8001544:	f7ff fd60 	bl	8001008 <power_on_self_test>
 8001548:	4603      	mov	r3, r0
 800154a:	f083 0301 	eor.w	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f7      	bne.n	8001544 <main+0x1c>
    // Main loop runs forever
    while(1)
    {
    	// 1. Print “Enter expected period or <CR> if no change”. Wait for user response

    	printString("\r\nWould you like to use the default limits:\r\nLower: 450\r\nUpper: 550\r\n");
 8001554:	4879      	ldr	r0, [pc, #484]	; (800173c <main+0x214>)
 8001556:	f7ff fc35 	bl	8000dc4 <printString>
    	char rx = USART_Read(USART2);
 800155a:	4879      	ldr	r0, [pc, #484]	; (8001740 <main+0x218>)
 800155c:	f000 faae 	bl	8001abc <USART_Read>
 8001560:	4603      	mov	r3, r0
 8001562:	75fb      	strb	r3, [r7, #23]
    	int i = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]

    	while (rx != '\r'){										// loop waits for the return command before processing input
 8001568:	e010      	b.n	800158c <main+0x64>
    		printChar(rx);
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fd29 	bl	8000fc4 <printChar>
			command[i] = rx;									// adds input to buffer to process command
 8001572:	1d3a      	adds	r2, r7, #4
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4413      	add	r3, r2
 8001578:	7dfa      	ldrb	r2, [r7, #23]
 800157a:	701a      	strb	r2, [r3, #0]
			i++;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	3301      	adds	r3, #1
 8001580:	613b      	str	r3, [r7, #16]
			rx = USART_Read(USART2);							// reads next character
 8001582:	486f      	ldr	r0, [pc, #444]	; (8001740 <main+0x218>)
 8001584:	f000 fa9a 	bl	8001abc <USART_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
    	while (rx != '\r'){										// loop waits for the return command before processing input
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b0d      	cmp	r3, #13
 8001590:	d1eb      	bne.n	800156a <main+0x42>
    	}
    	command[i] = '\0';										// terminates inputed command
 8001592:	1d3a      	adds	r2, r7, #4
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]

    	for (int index = 0; index < i; index++){
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e01a      	b.n	80015d8 <main+0xb0>
    		command[index] = tolower(command[index]);			// makes command case insensitive
 80015a2:	1d3a      	adds	r2, r7, #4
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	72fb      	strb	r3, [r7, #11]
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a64      	ldr	r2, [pc, #400]	; (8001744 <main+0x21c>)
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d102      	bne.n	80015c4 <main+0x9c>
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	3320      	adds	r3, #32
 80015c2:	e000      	b.n	80015c6 <main+0x9e>
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	b2d9      	uxtb	r1, r3
 80015c8:	1d3a      	adds	r2, r7, #4
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	460a      	mov	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]
    	for (int index = 0; index < i; index++){
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbe0      	blt.n	80015a2 <main+0x7a>
    	}


    	if (strcmp("yes", (char *) command)){					// checks for custom limits
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4858      	ldr	r0, [pc, #352]	; (8001748 <main+0x220>)
 80015e6:	f7fe fdf3 	bl	80001d0 <strcmp>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d07c      	beq.n	80016ea <main+0x1c2>
    		printString("\r\nWhat would you like the lower limit to be? (must be between 50 and 9950): ");
 80015f0:	4856      	ldr	r0, [pc, #344]	; (800174c <main+0x224>)
 80015f2:	f7ff fbe7 	bl	8000dc4 <printString>
    		rx = USART_Read(USART2);
 80015f6:	4852      	ldr	r0, [pc, #328]	; (8001740 <main+0x218>)
 80015f8:	f000 fa60 	bl	8001abc <USART_Read>
 80015fc:	4603      	mov	r3, r0
 80015fe:	75fb      	strb	r3, [r7, #23]
    		i = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]

    		while (rx != '\r'){									// loop waits for the return command before processing input
 8001604:	e010      	b.n	8001628 <main+0x100>
				printChar(rx);
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fcdb 	bl	8000fc4 <printChar>
				command[i] = rx;								// adds input to buffer to process input limit
 800160e:	1d3a      	adds	r2, r7, #4
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4413      	add	r3, r2
 8001614:	7dfa      	ldrb	r2, [r7, #23]
 8001616:	701a      	strb	r2, [r3, #0]
				i++;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	3301      	adds	r3, #1
 800161c:	613b      	str	r3, [r7, #16]
				rx = USART_Read(USART2);						// reads next character
 800161e:	4848      	ldr	r0, [pc, #288]	; (8001740 <main+0x218>)
 8001620:	f000 fa4c 	bl	8001abc <USART_Read>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]
    		while (rx != '\r'){									// loop waits for the return command before processing input
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b0d      	cmp	r3, #13
 800162c:	d1eb      	bne.n	8001606 <main+0xde>
    		}
    		command[i] = '\0';									// terminates inputed string for processing
 800162e:	1d3a      	adds	r2, r7, #4
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
    		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f000 faab 	bl	8001b9a <atoi>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b41      	ldr	r3, [pc, #260]	; (8001750 <main+0x228>)
 800164a:	601a      	str	r2, [r3, #0]

			while (lowerLimit < 50 || lowerLimit > 9950){
 800164c:	e02b      	b.n	80016a6 <main+0x17e>

				printString("\r\nLower limit must be between 50 and 950. Please enter a new limit: ");
 800164e:	4841      	ldr	r0, [pc, #260]	; (8001754 <main+0x22c>)
 8001650:	f7ff fbb8 	bl	8000dc4 <printString>
				rx = USART_Read(USART2);
 8001654:	483a      	ldr	r0, [pc, #232]	; (8001740 <main+0x218>)
 8001656:	f000 fa31 	bl	8001abc <USART_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	75fb      	strb	r3, [r7, #23]

				while (rx != '\r'){									// loop waits for the return command before processing input
 800165e:	e010      	b.n	8001682 <main+0x15a>
					printChar(rx);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fcae 	bl	8000fc4 <printChar>
					command[i] = rx;								// adds input to buffer to process input limit
 8001668:	1d3a      	adds	r2, r7, #4
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4413      	add	r3, r2
 800166e:	7dfa      	ldrb	r2, [r7, #23]
 8001670:	701a      	strb	r2, [r3, #0]
					i++;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3301      	adds	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
					rx = USART_Read(USART2);						// reads next character
 8001678:	4831      	ldr	r0, [pc, #196]	; (8001740 <main+0x218>)
 800167a:	f000 fa1f 	bl	8001abc <USART_Read>
 800167e:	4603      	mov	r3, r0
 8001680:	75fb      	strb	r3, [r7, #23]
				while (rx != '\r'){									// loop waits for the return command before processing input
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	2b0d      	cmp	r3, #13
 8001686:	d1eb      	bne.n	8001660 <main+0x138>
				}

		   		command[i] = '\0';									// terminates inputed string for processing
 8001688:	1d3a      	adds	r2, r7, #4
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4413      	add	r3, r2
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
		   		i = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
		   		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fa7e 	bl	8001b9a <atoi>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <main+0x228>)
 80016a4:	601a      	str	r2, [r3, #0]
			while (lowerLimit < 50 || lowerLimit > 9950){
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <main+0x228>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b31      	cmp	r3, #49	; 0x31
 80016ac:	d9cf      	bls.n	800164e <main+0x126>
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <main+0x228>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f242 62de 	movw	r2, #9950	; 0x26de
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d8c9      	bhi.n	800164e <main+0x126>
			}
			upperLimit = lowerLimit + 100;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <main+0x228>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3364      	adds	r3, #100	; 0x64
 80016c0:	4a25      	ldr	r2, [pc, #148]	; (8001758 <main+0x230>)
 80016c2:	6013      	str	r3, [r2, #0]
			printString((char *) printf("\r\nLower limit: %lu, Upper limit: %lu", lowerLimit, upperLimit));
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <main+0x228>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a23      	ldr	r2, [pc, #140]	; (8001758 <main+0x230>)
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4823      	ldr	r0, [pc, #140]	; (800175c <main+0x234>)
 80016d0:	f000 fcec 	bl	80020ac <iprintf>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fb74 	bl	8000dc4 <printString>
			USART_Write(USART2, buffer, n);
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <main+0x238>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4920      	ldr	r1, [pc, #128]	; (8001764 <main+0x23c>)
 80016e4:	4816      	ldr	r0, [pc, #88]	; (8001740 <main+0x218>)
 80016e6:	f000 f9fe 	bl	8001ae6 <USART_Write>
    	}
    	printString("\r\n");					// starts a new line (since input may have been last thing to print)
 80016ea:	481f      	ldr	r0, [pc, #124]	; (8001768 <main+0x240>)
 80016ec:	f7ff fb6a 	bl	8000dc4 <printString>

    	printString("Limits are currently set, program can run to calculate\r\n\r\n");
 80016f0:	481e      	ldr	r0, [pc, #120]	; (800176c <main+0x244>)
 80016f2:	f7ff fb67 	bl	8000dc4 <printString>

    	// 2. if yes, read new period then set up timer clock

        while( set_timer_base() == 0 )
 80016f6:	bf00      	nop
 80016f8:	f7ff fb58 	bl	8000dac <set_timer_base>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0fa      	beq.n	80016f8 <main+0x1d0>
          ;

        // 3. read 100 pulses
        Start_Timer();
 8001702:	f7ff fdd9 	bl	80012b8 <Start_Timer>
        init_measurement(lowerLimit);
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <main+0x228>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc94 	bl	8001038 <init_measurement>
    	make_measurements(lowerLimit);
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <main+0x228>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fcaf 	bl	8001078 <make_measurements>
    	print_measurements(lowerLimit);
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <main+0x228>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fd16 	bl	8001150 <print_measurements>
    	Stop_Timer();
 8001724:	f7ff fdde 	bl	80012e4 <Stop_Timer>


    	Start_Timer();
 8001728:	f7ff fdc6 	bl	80012b8 <Start_Timer>
    	TIM_Duty();
 800172c:	f7ff fdf0 	bl	8001310 <TIM_Duty>
    	Stop_Timer();
 8001730:	f7ff fdd8 	bl	80012e4 <Stop_Timer>
    	print_duty();
 8001734:	f7ff fd5e 	bl	80011f4 <print_duty>
    {
 8001738:	e70c      	b.n	8001554 <main+0x2c>
 800173a:	bf00      	nop
 800173c:	0800307c 	.word	0x0800307c
 8001740:	40004400 	.word	0x40004400
 8001744:	080031c3 	.word	0x080031c3
 8001748:	080030c4 	.word	0x080030c4
 800174c:	080030c8 	.word	0x080030c8
 8001750:	20000000 	.word	0x20000000
 8001754:	08003118 	.word	0x08003118
 8001758:	20000004 	.word	0x20000004
 800175c:	08003160 	.word	0x08003160
 8001760:	20000318 	.word	0x20000318
 8001764:	20000120 	.word	0x20000120
 8001768:	08003044 	.word	0x08003044
 800176c:	08003188 	.word	0x08003188

08001770 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800177a:	f000 fdff 	bl	800237c <__errno>
 800177e:	4603      	mov	r3, r0
 8001780:	2216      	movs	r2, #22
 8001782:	601a      	str	r2, [r3, #0]
  return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_exit>:

void _exit (int status)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ffe7 	bl	8001770 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017a2:	e7fe      	b.n	80017a2 <_exit+0x12>

080017a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e00a      	b.n	80017cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b6:	f3af 8000 	nop.w
 80017ba:	4601      	mov	r1, r0
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	60ba      	str	r2, [r7, #8]
 80017c2:	b2ca      	uxtb	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf0      	blt.n	80017b6 <_read+0x12>
  }

  return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e009      	b.n	8001804 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf1      	blt.n	80017f0 <_write+0x12>
  }
  return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_close>:

int _close(int file)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183e:	605a      	str	r2, [r3, #4]
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_isatty>:

int _isatty(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <_sbrk+0x5c>)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <_sbrk+0x60>)
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <_sbrk+0x64>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <_sbrk+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d207      	bcs.n	80018c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b0:	f000 fd64 	bl	800237c <__errno>
 80018b4:	4603      	mov	r3, r0
 80018b6:	220c      	movs	r2, #12
 80018b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e009      	b.n	80018d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <_sbrk+0x64>)
 80018d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20018000 	.word	0x20018000
 80018e0:	00000400 	.word	0x00000400
 80018e4:	20002264 	.word	0x20002264
 80018e8:	200023b8 	.word	0x200023b8

080018ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <SystemInit+0x20>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <SystemInit+0x20>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <USART2_Init>:
// UART Ports:
// ===================================================
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	/* Init the low level hardware : GPIO, CLOCK */
	uint32_t tmpreg;
	(void) tmpreg;	/// avoid compiler warning

	// enable USART2 CLK
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8001918:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <USART2_Init+0x1a0>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a64      	ldr	r2, [pc, #400]	; (8001ab0 <USART2_Init+0x1a0>)
 800191e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
	tmpreg = RCC->APB1ENR1 & RCC_APB1ENR1_USART2EN;	// Delay after an RCC peripheral clock enabling
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <USART2_Init+0x1a0>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	617b      	str	r3, [r7, #20]

	// enable GPIOA CLK
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800192e:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <USART2_Init+0x1a0>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <USART2_Init+0x1a0>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
	tmpreg = RCC->AHB2ENR & RCC_AHB2ENR_GPIOAEN;		// Delay after an RCC peripheral clock enabling
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <USART2_Init+0x1a0>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 8001944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800194e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001952:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 8001954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800195e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001962:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 8001964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800196e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001972:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 8001974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800197e:	f023 030c 	bic.w	r3, r3, #12
 8001982:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 8001984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800198e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001992:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 8001994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800199e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 80019a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 80019b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019be:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80019c2:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 80019c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 80019d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019de:	f043 0320 	orr.w	r3, r3, #32
 80019e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 80019e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f2:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <USART2_Init+0x1a4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <USART2_Init+0x1a4>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a06:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 8001a0a:	f023 031c 	bic.w	r3, r3, #28
 8001a0e:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a16:	f043 030c 	orr.w	r3, r3, #12
 8001a1a:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a26:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a2a:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001a3a:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <USART2_Init+0x1a8>)
 8001a46:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	085a      	lsrs	r2, r3, #1
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	441a      	add	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	60fb      	str	r3, [r7, #12]
	USART2->BRR = usartdiv;
 8001a5a:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a66:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001a6a:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a72:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001a76:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8001a84:	bf00      	nop
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f9      	beq.n	8001a86 <USART2_Init+0x176>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8001a92:	bf00      	nop
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <USART2_Init+0x1a4>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f9      	beq.n	8001a94 <USART2_Init+0x184>
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	00f42400 	.word	0x00f42400

08001abc <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8001ac4:	bf00      	nop
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f9      	beq.n	8001ac6 <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e010      	b.n	8001b1a <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001af8:	bf00      	nop
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f9      	beq.n	8001afa <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d8ea      	bhi.n	8001af8 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001b22:	bf00      	nop
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f9      	beq.n	8001b24 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	61da      	str	r2, [r3, #28]
}   
 8001b3c:	bf00      	nop
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f7ff fece 	bl	80018ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <LoopForever+0xe>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <LoopForever+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f000 fc07 	bl	8002388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7a:	f7ff fcd5 	bl	8001528 <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b8c:	08003300 	.word	0x08003300
  ldr r2, =_sbss
 8001b90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b94:	200023b4 	.word	0x200023b4

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>

08001b9a <atoi>:
 8001b9a:	220a      	movs	r2, #10
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f000 b95f 	b.w	8001e60 <strtol>
	...

08001ba4 <calloc>:
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <calloc+0xc>)
 8001ba6:	460a      	mov	r2, r1
 8001ba8:	4601      	mov	r1, r0
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	f000 b802 	b.w	8001bb4 <_calloc_r>
 8001bb0:	20000064 	.word	0x20000064

08001bb4 <_calloc_r>:
 8001bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bb6:	fba1 2402 	umull	r2, r4, r1, r2
 8001bba:	b94c      	cbnz	r4, 8001bd0 <_calloc_r+0x1c>
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	f000 f840 	bl	8001c44 <_malloc_r>
 8001bc4:	9a01      	ldr	r2, [sp, #4]
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	b930      	cbnz	r0, 8001bd8 <_calloc_r+0x24>
 8001bca:	4628      	mov	r0, r5
 8001bcc:	b003      	add	sp, #12
 8001bce:	bd30      	pop	{r4, r5, pc}
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	6002      	str	r2, [r0, #0]
 8001bd4:	2500      	movs	r5, #0
 8001bd6:	e7f8      	b.n	8001bca <_calloc_r+0x16>
 8001bd8:	4621      	mov	r1, r4
 8001bda:	f000 fb71 	bl	80022c0 <memset>
 8001bde:	e7f4      	b.n	8001bca <_calloc_r+0x16>

08001be0 <exit>:
 8001be0:	b508      	push	{r3, lr}
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <exit+0x1c>)
 8001be4:	4604      	mov	r4, r0
 8001be6:	b113      	cbz	r3, 8001bee <exit+0xe>
 8001be8:	2100      	movs	r1, #0
 8001bea:	f3af 8000 	nop.w
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <exit+0x20>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b103      	cbz	r3, 8001bf6 <exit+0x16>
 8001bf4:	4798      	blx	r3
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff fdca 	bl	8001790 <_exit>
 8001bfc:	00000000 	.word	0x00000000
 8001c00:	200023a8 	.word	0x200023a8

08001c04 <sbrk_aligned>:
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	4e0e      	ldr	r6, [pc, #56]	; (8001c40 <sbrk_aligned+0x3c>)
 8001c08:	460c      	mov	r4, r1
 8001c0a:	6831      	ldr	r1, [r6, #0]
 8001c0c:	4605      	mov	r5, r0
 8001c0e:	b911      	cbnz	r1, 8001c16 <sbrk_aligned+0x12>
 8001c10:	f000 fb92 	bl	8002338 <_sbrk_r>
 8001c14:	6030      	str	r0, [r6, #0]
 8001c16:	4621      	mov	r1, r4
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f000 fb8d 	bl	8002338 <_sbrk_r>
 8001c1e:	1c43      	adds	r3, r0, #1
 8001c20:	d00a      	beq.n	8001c38 <sbrk_aligned+0x34>
 8001c22:	1cc4      	adds	r4, r0, #3
 8001c24:	f024 0403 	bic.w	r4, r4, #3
 8001c28:	42a0      	cmp	r0, r4
 8001c2a:	d007      	beq.n	8001c3c <sbrk_aligned+0x38>
 8001c2c:	1a21      	subs	r1, r4, r0
 8001c2e:	4628      	mov	r0, r5
 8001c30:	f000 fb82 	bl	8002338 <_sbrk_r>
 8001c34:	3001      	adds	r0, #1
 8001c36:	d101      	bne.n	8001c3c <sbrk_aligned+0x38>
 8001c38:	f04f 34ff 	mov.w	r4, #4294967295
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	2000226c 	.word	0x2000226c

08001c44 <_malloc_r>:
 8001c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c48:	1ccd      	adds	r5, r1, #3
 8001c4a:	f025 0503 	bic.w	r5, r5, #3
 8001c4e:	3508      	adds	r5, #8
 8001c50:	2d0c      	cmp	r5, #12
 8001c52:	bf38      	it	cc
 8001c54:	250c      	movcc	r5, #12
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	4607      	mov	r7, r0
 8001c5a:	db01      	blt.n	8001c60 <_malloc_r+0x1c>
 8001c5c:	42a9      	cmp	r1, r5
 8001c5e:	d905      	bls.n	8001c6c <_malloc_r+0x28>
 8001c60:	230c      	movs	r3, #12
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	2600      	movs	r6, #0
 8001c66:	4630      	mov	r0, r6
 8001c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001d40 <_malloc_r+0xfc>
 8001c70:	f000 f868 	bl	8001d44 <__malloc_lock>
 8001c74:	f8d8 3000 	ldr.w	r3, [r8]
 8001c78:	461c      	mov	r4, r3
 8001c7a:	bb5c      	cbnz	r4, 8001cd4 <_malloc_r+0x90>
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	4638      	mov	r0, r7
 8001c80:	f7ff ffc0 	bl	8001c04 <sbrk_aligned>
 8001c84:	1c43      	adds	r3, r0, #1
 8001c86:	4604      	mov	r4, r0
 8001c88:	d155      	bne.n	8001d36 <_malloc_r+0xf2>
 8001c8a:	f8d8 4000 	ldr.w	r4, [r8]
 8001c8e:	4626      	mov	r6, r4
 8001c90:	2e00      	cmp	r6, #0
 8001c92:	d145      	bne.n	8001d20 <_malloc_r+0xdc>
 8001c94:	2c00      	cmp	r4, #0
 8001c96:	d048      	beq.n	8001d2a <_malloc_r+0xe6>
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4638      	mov	r0, r7
 8001c9e:	eb04 0903 	add.w	r9, r4, r3
 8001ca2:	f000 fb49 	bl	8002338 <_sbrk_r>
 8001ca6:	4581      	cmp	r9, r0
 8001ca8:	d13f      	bne.n	8001d2a <_malloc_r+0xe6>
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	1a6d      	subs	r5, r5, r1
 8001cae:	4629      	mov	r1, r5
 8001cb0:	4638      	mov	r0, r7
 8001cb2:	f7ff ffa7 	bl	8001c04 <sbrk_aligned>
 8001cb6:	3001      	adds	r0, #1
 8001cb8:	d037      	beq.n	8001d2a <_malloc_r+0xe6>
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	442b      	add	r3, r5
 8001cbe:	6023      	str	r3, [r4, #0]
 8001cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d038      	beq.n	8001d3a <_malloc_r+0xf6>
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	42a2      	cmp	r2, r4
 8001ccc:	d12b      	bne.n	8001d26 <_malloc_r+0xe2>
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e00f      	b.n	8001cf4 <_malloc_r+0xb0>
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	1b52      	subs	r2, r2, r5
 8001cd8:	d41f      	bmi.n	8001d1a <_malloc_r+0xd6>
 8001cda:	2a0b      	cmp	r2, #11
 8001cdc:	d917      	bls.n	8001d0e <_malloc_r+0xca>
 8001cde:	1961      	adds	r1, r4, r5
 8001ce0:	42a3      	cmp	r3, r4
 8001ce2:	6025      	str	r5, [r4, #0]
 8001ce4:	bf18      	it	ne
 8001ce6:	6059      	strne	r1, [r3, #4]
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	bf08      	it	eq
 8001cec:	f8c8 1000 	streq.w	r1, [r8]
 8001cf0:	5162      	str	r2, [r4, r5]
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	f104 060b 	add.w	r6, r4, #11
 8001cfa:	f000 f829 	bl	8001d50 <__malloc_unlock>
 8001cfe:	f026 0607 	bic.w	r6, r6, #7
 8001d02:	1d23      	adds	r3, r4, #4
 8001d04:	1af2      	subs	r2, r6, r3
 8001d06:	d0ae      	beq.n	8001c66 <_malloc_r+0x22>
 8001d08:	1b9b      	subs	r3, r3, r6
 8001d0a:	50a3      	str	r3, [r4, r2]
 8001d0c:	e7ab      	b.n	8001c66 <_malloc_r+0x22>
 8001d0e:	42a3      	cmp	r3, r4
 8001d10:	6862      	ldr	r2, [r4, #4]
 8001d12:	d1dd      	bne.n	8001cd0 <_malloc_r+0x8c>
 8001d14:	f8c8 2000 	str.w	r2, [r8]
 8001d18:	e7ec      	b.n	8001cf4 <_malloc_r+0xb0>
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	6864      	ldr	r4, [r4, #4]
 8001d1e:	e7ac      	b.n	8001c7a <_malloc_r+0x36>
 8001d20:	4634      	mov	r4, r6
 8001d22:	6876      	ldr	r6, [r6, #4]
 8001d24:	e7b4      	b.n	8001c90 <_malloc_r+0x4c>
 8001d26:	4613      	mov	r3, r2
 8001d28:	e7cc      	b.n	8001cc4 <_malloc_r+0x80>
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4638      	mov	r0, r7
 8001d30:	f000 f80e 	bl	8001d50 <__malloc_unlock>
 8001d34:	e797      	b.n	8001c66 <_malloc_r+0x22>
 8001d36:	6025      	str	r5, [r4, #0]
 8001d38:	e7dc      	b.n	8001cf4 <_malloc_r+0xb0>
 8001d3a:	605b      	str	r3, [r3, #4]
 8001d3c:	deff      	udf	#255	; 0xff
 8001d3e:	bf00      	nop
 8001d40:	20002268 	.word	0x20002268

08001d44 <__malloc_lock>:
 8001d44:	4801      	ldr	r0, [pc, #4]	; (8001d4c <__malloc_lock+0x8>)
 8001d46:	f000 bb44 	b.w	80023d2 <__retarget_lock_acquire_recursive>
 8001d4a:	bf00      	nop
 8001d4c:	200023b0 	.word	0x200023b0

08001d50 <__malloc_unlock>:
 8001d50:	4801      	ldr	r0, [pc, #4]	; (8001d58 <__malloc_unlock+0x8>)
 8001d52:	f000 bb3f 	b.w	80023d4 <__retarget_lock_release_recursive>
 8001d56:	bf00      	nop
 8001d58:	200023b0 	.word	0x200023b0

08001d5c <_strtol_l.constprop.0>:
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d62:	d001      	beq.n	8001d68 <_strtol_l.constprop.0+0xc>
 8001d64:	2b24      	cmp	r3, #36	; 0x24
 8001d66:	d906      	bls.n	8001d76 <_strtol_l.constprop.0+0x1a>
 8001d68:	f000 fb08 	bl	800237c <__errno>
 8001d6c:	2316      	movs	r3, #22
 8001d6e:	6003      	str	r3, [r0, #0]
 8001d70:	2000      	movs	r0, #0
 8001d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001e5c <_strtol_l.constprop.0+0x100>
 8001d7a:	460d      	mov	r5, r1
 8001d7c:	462e      	mov	r6, r5
 8001d7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001d82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8001d86:	f017 0708 	ands.w	r7, r7, #8
 8001d8a:	d1f7      	bne.n	8001d7c <_strtol_l.constprop.0+0x20>
 8001d8c:	2c2d      	cmp	r4, #45	; 0x2d
 8001d8e:	d132      	bne.n	8001df6 <_strtol_l.constprop.0+0x9a>
 8001d90:	782c      	ldrb	r4, [r5, #0]
 8001d92:	2701      	movs	r7, #1
 8001d94:	1cb5      	adds	r5, r6, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d05b      	beq.n	8001e52 <_strtol_l.constprop.0+0xf6>
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d109      	bne.n	8001db2 <_strtol_l.constprop.0+0x56>
 8001d9e:	2c30      	cmp	r4, #48	; 0x30
 8001da0:	d107      	bne.n	8001db2 <_strtol_l.constprop.0+0x56>
 8001da2:	782c      	ldrb	r4, [r5, #0]
 8001da4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001da8:	2c58      	cmp	r4, #88	; 0x58
 8001daa:	d14d      	bne.n	8001e48 <_strtol_l.constprop.0+0xec>
 8001dac:	786c      	ldrb	r4, [r5, #1]
 8001dae:	2310      	movs	r3, #16
 8001db0:	3502      	adds	r5, #2
 8001db2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8001db6:	f108 38ff 	add.w	r8, r8, #4294967295
 8001dba:	f04f 0e00 	mov.w	lr, #0
 8001dbe:	fbb8 f9f3 	udiv	r9, r8, r3
 8001dc2:	4676      	mov	r6, lr
 8001dc4:	fb03 8a19 	mls	sl, r3, r9, r8
 8001dc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001dcc:	f1bc 0f09 	cmp.w	ip, #9
 8001dd0:	d816      	bhi.n	8001e00 <_strtol_l.constprop.0+0xa4>
 8001dd2:	4664      	mov	r4, ip
 8001dd4:	42a3      	cmp	r3, r4
 8001dd6:	dd24      	ble.n	8001e22 <_strtol_l.constprop.0+0xc6>
 8001dd8:	f1be 3fff 	cmp.w	lr, #4294967295
 8001ddc:	d008      	beq.n	8001df0 <_strtol_l.constprop.0+0x94>
 8001dde:	45b1      	cmp	r9, r6
 8001de0:	d31c      	bcc.n	8001e1c <_strtol_l.constprop.0+0xc0>
 8001de2:	d101      	bne.n	8001de8 <_strtol_l.constprop.0+0x8c>
 8001de4:	45a2      	cmp	sl, r4
 8001de6:	db19      	blt.n	8001e1c <_strtol_l.constprop.0+0xc0>
 8001de8:	fb06 4603 	mla	r6, r6, r3, r4
 8001dec:	f04f 0e01 	mov.w	lr, #1
 8001df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001df4:	e7e8      	b.n	8001dc8 <_strtol_l.constprop.0+0x6c>
 8001df6:	2c2b      	cmp	r4, #43	; 0x2b
 8001df8:	bf04      	itt	eq
 8001dfa:	782c      	ldrbeq	r4, [r5, #0]
 8001dfc:	1cb5      	addeq	r5, r6, #2
 8001dfe:	e7ca      	b.n	8001d96 <_strtol_l.constprop.0+0x3a>
 8001e00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001e04:	f1bc 0f19 	cmp.w	ip, #25
 8001e08:	d801      	bhi.n	8001e0e <_strtol_l.constprop.0+0xb2>
 8001e0a:	3c37      	subs	r4, #55	; 0x37
 8001e0c:	e7e2      	b.n	8001dd4 <_strtol_l.constprop.0+0x78>
 8001e0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001e12:	f1bc 0f19 	cmp.w	ip, #25
 8001e16:	d804      	bhi.n	8001e22 <_strtol_l.constprop.0+0xc6>
 8001e18:	3c57      	subs	r4, #87	; 0x57
 8001e1a:	e7db      	b.n	8001dd4 <_strtol_l.constprop.0+0x78>
 8001e1c:	f04f 3eff 	mov.w	lr, #4294967295
 8001e20:	e7e6      	b.n	8001df0 <_strtol_l.constprop.0+0x94>
 8001e22:	f1be 3fff 	cmp.w	lr, #4294967295
 8001e26:	d105      	bne.n	8001e34 <_strtol_l.constprop.0+0xd8>
 8001e28:	2322      	movs	r3, #34	; 0x22
 8001e2a:	6003      	str	r3, [r0, #0]
 8001e2c:	4646      	mov	r6, r8
 8001e2e:	b942      	cbnz	r2, 8001e42 <_strtol_l.constprop.0+0xe6>
 8001e30:	4630      	mov	r0, r6
 8001e32:	e79e      	b.n	8001d72 <_strtol_l.constprop.0+0x16>
 8001e34:	b107      	cbz	r7, 8001e38 <_strtol_l.constprop.0+0xdc>
 8001e36:	4276      	negs	r6, r6
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d0f9      	beq.n	8001e30 <_strtol_l.constprop.0+0xd4>
 8001e3c:	f1be 0f00 	cmp.w	lr, #0
 8001e40:	d000      	beq.n	8001e44 <_strtol_l.constprop.0+0xe8>
 8001e42:	1e69      	subs	r1, r5, #1
 8001e44:	6011      	str	r1, [r2, #0]
 8001e46:	e7f3      	b.n	8001e30 <_strtol_l.constprop.0+0xd4>
 8001e48:	2430      	movs	r4, #48	; 0x30
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1b1      	bne.n	8001db2 <_strtol_l.constprop.0+0x56>
 8001e4e:	2308      	movs	r3, #8
 8001e50:	e7af      	b.n	8001db2 <_strtol_l.constprop.0+0x56>
 8001e52:	2c30      	cmp	r4, #48	; 0x30
 8001e54:	d0a5      	beq.n	8001da2 <_strtol_l.constprop.0+0x46>
 8001e56:	230a      	movs	r3, #10
 8001e58:	e7ab      	b.n	8001db2 <_strtol_l.constprop.0+0x56>
 8001e5a:	bf00      	nop
 8001e5c:	080031c4 	.word	0x080031c4

08001e60 <strtol>:
 8001e60:	4613      	mov	r3, r2
 8001e62:	460a      	mov	r2, r1
 8001e64:	4601      	mov	r1, r0
 8001e66:	4802      	ldr	r0, [pc, #8]	; (8001e70 <strtol+0x10>)
 8001e68:	6800      	ldr	r0, [r0, #0]
 8001e6a:	f7ff bf77 	b.w	8001d5c <_strtol_l.constprop.0>
 8001e6e:	bf00      	nop
 8001e70:	20000064 	.word	0x20000064

08001e74 <std>:
 8001e74:	2300      	movs	r3, #0
 8001e76:	b510      	push	{r4, lr}
 8001e78:	4604      	mov	r4, r0
 8001e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e82:	6083      	str	r3, [r0, #8]
 8001e84:	8181      	strh	r1, [r0, #12]
 8001e86:	6643      	str	r3, [r0, #100]	; 0x64
 8001e88:	81c2      	strh	r2, [r0, #14]
 8001e8a:	6183      	str	r3, [r0, #24]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	2208      	movs	r2, #8
 8001e90:	305c      	adds	r0, #92	; 0x5c
 8001e92:	f000 fa15 	bl	80022c0 <memset>
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <std+0x58>)
 8001e98:	6263      	str	r3, [r4, #36]	; 0x24
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <std+0x5c>)
 8001e9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <std+0x60>)
 8001ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <std+0x64>)
 8001ea4:	6323      	str	r3, [r4, #48]	; 0x30
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <std+0x68>)
 8001ea8:	6224      	str	r4, [r4, #32]
 8001eaa:	429c      	cmp	r4, r3
 8001eac:	d006      	beq.n	8001ebc <std+0x48>
 8001eae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001eb2:	4294      	cmp	r4, r2
 8001eb4:	d002      	beq.n	8001ebc <std+0x48>
 8001eb6:	33d0      	adds	r3, #208	; 0xd0
 8001eb8:	429c      	cmp	r4, r3
 8001eba:	d105      	bne.n	8001ec8 <std+0x54>
 8001ebc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec4:	f000 ba84 	b.w	80023d0 <__retarget_lock_init_recursive>
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop
 8001ecc:	08002111 	.word	0x08002111
 8001ed0:	08002133 	.word	0x08002133
 8001ed4:	0800216b 	.word	0x0800216b
 8001ed8:	0800218f 	.word	0x0800218f
 8001edc:	20002270 	.word	0x20002270

08001ee0 <stdio_exit_handler>:
 8001ee0:	4a02      	ldr	r2, [pc, #8]	; (8001eec <stdio_exit_handler+0xc>)
 8001ee2:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <stdio_exit_handler+0x10>)
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <stdio_exit_handler+0x14>)
 8001ee6:	f000 b869 	b.w	8001fbc <_fwalk_sglue>
 8001eea:	bf00      	nop
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	08002dd5 	.word	0x08002dd5
 8001ef4:	20000018 	.word	0x20000018

08001ef8 <cleanup_stdio>:
 8001ef8:	6841      	ldr	r1, [r0, #4]
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <cleanup_stdio+0x34>)
 8001efc:	4299      	cmp	r1, r3
 8001efe:	b510      	push	{r4, lr}
 8001f00:	4604      	mov	r4, r0
 8001f02:	d001      	beq.n	8001f08 <cleanup_stdio+0x10>
 8001f04:	f000 ff66 	bl	8002dd4 <_fflush_r>
 8001f08:	68a1      	ldr	r1, [r4, #8]
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <cleanup_stdio+0x38>)
 8001f0c:	4299      	cmp	r1, r3
 8001f0e:	d002      	beq.n	8001f16 <cleanup_stdio+0x1e>
 8001f10:	4620      	mov	r0, r4
 8001f12:	f000 ff5f 	bl	8002dd4 <_fflush_r>
 8001f16:	68e1      	ldr	r1, [r4, #12]
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <cleanup_stdio+0x3c>)
 8001f1a:	4299      	cmp	r1, r3
 8001f1c:	d004      	beq.n	8001f28 <cleanup_stdio+0x30>
 8001f1e:	4620      	mov	r0, r4
 8001f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f24:	f000 bf56 	b.w	8002dd4 <_fflush_r>
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20002270 	.word	0x20002270
 8001f30:	200022d8 	.word	0x200022d8
 8001f34:	20002340 	.word	0x20002340

08001f38 <global_stdio_init.part.0>:
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <global_stdio_init.part.0+0x30>)
 8001f3c:	4c0b      	ldr	r4, [pc, #44]	; (8001f6c <global_stdio_init.part.0+0x34>)
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <global_stdio_init.part.0+0x38>)
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	4620      	mov	r0, r4
 8001f44:	2200      	movs	r2, #0
 8001f46:	2104      	movs	r1, #4
 8001f48:	f7ff ff94 	bl	8001e74 <std>
 8001f4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001f50:	2201      	movs	r2, #1
 8001f52:	2109      	movs	r1, #9
 8001f54:	f7ff ff8e 	bl	8001e74 <std>
 8001f58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f62:	2112      	movs	r1, #18
 8001f64:	f7ff bf86 	b.w	8001e74 <std>
 8001f68:	200023a8 	.word	0x200023a8
 8001f6c:	20002270 	.word	0x20002270
 8001f70:	08001ee1 	.word	0x08001ee1

08001f74 <__sfp_lock_acquire>:
 8001f74:	4801      	ldr	r0, [pc, #4]	; (8001f7c <__sfp_lock_acquire+0x8>)
 8001f76:	f000 ba2c 	b.w	80023d2 <__retarget_lock_acquire_recursive>
 8001f7a:	bf00      	nop
 8001f7c:	200023b1 	.word	0x200023b1

08001f80 <__sfp_lock_release>:
 8001f80:	4801      	ldr	r0, [pc, #4]	; (8001f88 <__sfp_lock_release+0x8>)
 8001f82:	f000 ba27 	b.w	80023d4 <__retarget_lock_release_recursive>
 8001f86:	bf00      	nop
 8001f88:	200023b1 	.word	0x200023b1

08001f8c <__sinit>:
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4604      	mov	r4, r0
 8001f90:	f7ff fff0 	bl	8001f74 <__sfp_lock_acquire>
 8001f94:	6a23      	ldr	r3, [r4, #32]
 8001f96:	b11b      	cbz	r3, 8001fa0 <__sinit+0x14>
 8001f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f9c:	f7ff bff0 	b.w	8001f80 <__sfp_lock_release>
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__sinit+0x28>)
 8001fa2:	6223      	str	r3, [r4, #32]
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__sinit+0x2c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f5      	bne.n	8001f98 <__sinit+0xc>
 8001fac:	f7ff ffc4 	bl	8001f38 <global_stdio_init.part.0>
 8001fb0:	e7f2      	b.n	8001f98 <__sinit+0xc>
 8001fb2:	bf00      	nop
 8001fb4:	08001ef9 	.word	0x08001ef9
 8001fb8:	200023a8 	.word	0x200023a8

08001fbc <_fwalk_sglue>:
 8001fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fc0:	4607      	mov	r7, r0
 8001fc2:	4688      	mov	r8, r1
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fcc:	f1b9 0901 	subs.w	r9, r9, #1
 8001fd0:	d505      	bpl.n	8001fde <_fwalk_sglue+0x22>
 8001fd2:	6824      	ldr	r4, [r4, #0]
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	d1f7      	bne.n	8001fc8 <_fwalk_sglue+0xc>
 8001fd8:	4630      	mov	r0, r6
 8001fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fde:	89ab      	ldrh	r3, [r5, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d907      	bls.n	8001ff4 <_fwalk_sglue+0x38>
 8001fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	d003      	beq.n	8001ff4 <_fwalk_sglue+0x38>
 8001fec:	4629      	mov	r1, r5
 8001fee:	4638      	mov	r0, r7
 8001ff0:	47c0      	blx	r8
 8001ff2:	4306      	orrs	r6, r0
 8001ff4:	3568      	adds	r5, #104	; 0x68
 8001ff6:	e7e9      	b.n	8001fcc <_fwalk_sglue+0x10>

08001ff8 <_fwrite_r>:
 8001ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ffc:	9c08      	ldr	r4, [sp, #32]
 8001ffe:	468a      	mov	sl, r1
 8002000:	4690      	mov	r8, r2
 8002002:	fb02 f903 	mul.w	r9, r2, r3
 8002006:	4606      	mov	r6, r0
 8002008:	b118      	cbz	r0, 8002012 <_fwrite_r+0x1a>
 800200a:	6a03      	ldr	r3, [r0, #32]
 800200c:	b90b      	cbnz	r3, 8002012 <_fwrite_r+0x1a>
 800200e:	f7ff ffbd 	bl	8001f8c <__sinit>
 8002012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002014:	07dd      	lsls	r5, r3, #31
 8002016:	d405      	bmi.n	8002024 <_fwrite_r+0x2c>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	0598      	lsls	r0, r3, #22
 800201c:	d402      	bmi.n	8002024 <_fwrite_r+0x2c>
 800201e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002020:	f000 f9d7 	bl	80023d2 <__retarget_lock_acquire_recursive>
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	0719      	lsls	r1, r3, #28
 8002028:	d516      	bpl.n	8002058 <_fwrite_r+0x60>
 800202a:	6923      	ldr	r3, [r4, #16]
 800202c:	b1a3      	cbz	r3, 8002058 <_fwrite_r+0x60>
 800202e:	2500      	movs	r5, #0
 8002030:	454d      	cmp	r5, r9
 8002032:	d01f      	beq.n	8002074 <_fwrite_r+0x7c>
 8002034:	68a7      	ldr	r7, [r4, #8]
 8002036:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800203a:	3f01      	subs	r7, #1
 800203c:	2f00      	cmp	r7, #0
 800203e:	60a7      	str	r7, [r4, #8]
 8002040:	da04      	bge.n	800204c <_fwrite_r+0x54>
 8002042:	69a3      	ldr	r3, [r4, #24]
 8002044:	429f      	cmp	r7, r3
 8002046:	db0f      	blt.n	8002068 <_fwrite_r+0x70>
 8002048:	290a      	cmp	r1, #10
 800204a:	d00d      	beq.n	8002068 <_fwrite_r+0x70>
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	6022      	str	r2, [r4, #0]
 8002052:	7019      	strb	r1, [r3, #0]
 8002054:	3501      	adds	r5, #1
 8002056:	e7eb      	b.n	8002030 <_fwrite_r+0x38>
 8002058:	4621      	mov	r1, r4
 800205a:	4630      	mov	r0, r6
 800205c:	f000 f8d8 	bl	8002210 <__swsetup_r>
 8002060:	2800      	cmp	r0, #0
 8002062:	d0e4      	beq.n	800202e <_fwrite_r+0x36>
 8002064:	2500      	movs	r5, #0
 8002066:	e005      	b.n	8002074 <_fwrite_r+0x7c>
 8002068:	4622      	mov	r2, r4
 800206a:	4630      	mov	r0, r6
 800206c:	f000 f893 	bl	8002196 <__swbuf_r>
 8002070:	3001      	adds	r0, #1
 8002072:	d1ef      	bne.n	8002054 <_fwrite_r+0x5c>
 8002074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002076:	07da      	lsls	r2, r3, #31
 8002078:	d405      	bmi.n	8002086 <_fwrite_r+0x8e>
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	059b      	lsls	r3, r3, #22
 800207e:	d402      	bmi.n	8002086 <_fwrite_r+0x8e>
 8002080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002082:	f000 f9a7 	bl	80023d4 <__retarget_lock_release_recursive>
 8002086:	fbb5 f0f8 	udiv	r0, r5, r8
 800208a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002090 <fwrite>:
 8002090:	b507      	push	{r0, r1, r2, lr}
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	460a      	mov	r2, r1
 8002098:	4601      	mov	r1, r0
 800209a:	4803      	ldr	r0, [pc, #12]	; (80020a8 <fwrite+0x18>)
 800209c:	6800      	ldr	r0, [r0, #0]
 800209e:	f7ff ffab 	bl	8001ff8 <_fwrite_r>
 80020a2:	b003      	add	sp, #12
 80020a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a8:	20000064 	.word	0x20000064

080020ac <iprintf>:
 80020ac:	b40f      	push	{r0, r1, r2, r3}
 80020ae:	b507      	push	{r0, r1, r2, lr}
 80020b0:	4906      	ldr	r1, [pc, #24]	; (80020cc <iprintf+0x20>)
 80020b2:	ab04      	add	r3, sp, #16
 80020b4:	6808      	ldr	r0, [r1, #0]
 80020b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80020ba:	6881      	ldr	r1, [r0, #8]
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	f000 fb59 	bl	8002774 <_vfiprintf_r>
 80020c2:	b003      	add	sp, #12
 80020c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80020c8:	b004      	add	sp, #16
 80020ca:	4770      	bx	lr
 80020cc:	20000064 	.word	0x20000064

080020d0 <siprintf>:
 80020d0:	b40e      	push	{r1, r2, r3}
 80020d2:	b500      	push	{lr}
 80020d4:	b09c      	sub	sp, #112	; 0x70
 80020d6:	ab1d      	add	r3, sp, #116	; 0x74
 80020d8:	9002      	str	r0, [sp, #8]
 80020da:	9006      	str	r0, [sp, #24]
 80020dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <siprintf+0x38>)
 80020e2:	9107      	str	r1, [sp, #28]
 80020e4:	9104      	str	r1, [sp, #16]
 80020e6:	4909      	ldr	r1, [pc, #36]	; (800210c <siprintf+0x3c>)
 80020e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020ec:	9105      	str	r1, [sp, #20]
 80020ee:	6800      	ldr	r0, [r0, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	a902      	add	r1, sp, #8
 80020f4:	f000 fa16 	bl	8002524 <_svfiprintf_r>
 80020f8:	9b02      	ldr	r3, [sp, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	b01c      	add	sp, #112	; 0x70
 8002100:	f85d eb04 	ldr.w	lr, [sp], #4
 8002104:	b003      	add	sp, #12
 8002106:	4770      	bx	lr
 8002108:	20000064 	.word	0x20000064
 800210c:	ffff0208 	.word	0xffff0208

08002110 <__sread>:
 8002110:	b510      	push	{r4, lr}
 8002112:	460c      	mov	r4, r1
 8002114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002118:	f000 f8fc 	bl	8002314 <_read_r>
 800211c:	2800      	cmp	r0, #0
 800211e:	bfab      	itete	ge
 8002120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002122:	89a3      	ldrhlt	r3, [r4, #12]
 8002124:	181b      	addge	r3, r3, r0
 8002126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800212a:	bfac      	ite	ge
 800212c:	6563      	strge	r3, [r4, #84]	; 0x54
 800212e:	81a3      	strhlt	r3, [r4, #12]
 8002130:	bd10      	pop	{r4, pc}

08002132 <__swrite>:
 8002132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002136:	461f      	mov	r7, r3
 8002138:	898b      	ldrh	r3, [r1, #12]
 800213a:	05db      	lsls	r3, r3, #23
 800213c:	4605      	mov	r5, r0
 800213e:	460c      	mov	r4, r1
 8002140:	4616      	mov	r6, r2
 8002142:	d505      	bpl.n	8002150 <__swrite+0x1e>
 8002144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002148:	2302      	movs	r3, #2
 800214a:	2200      	movs	r2, #0
 800214c:	f000 f8d0 	bl	80022f0 <_lseek_r>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	4632      	mov	r2, r6
 800215e:	463b      	mov	r3, r7
 8002160:	4628      	mov	r0, r5
 8002162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002166:	f000 b8f7 	b.w	8002358 <_write_r>

0800216a <__sseek>:
 800216a:	b510      	push	{r4, lr}
 800216c:	460c      	mov	r4, r1
 800216e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002172:	f000 f8bd 	bl	80022f0 <_lseek_r>
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	bf15      	itete	ne
 800217c:	6560      	strne	r0, [r4, #84]	; 0x54
 800217e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002186:	81a3      	strheq	r3, [r4, #12]
 8002188:	bf18      	it	ne
 800218a:	81a3      	strhne	r3, [r4, #12]
 800218c:	bd10      	pop	{r4, pc}

0800218e <__sclose>:
 800218e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002192:	f000 b89d 	b.w	80022d0 <_close_r>

08002196 <__swbuf_r>:
 8002196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002198:	460e      	mov	r6, r1
 800219a:	4614      	mov	r4, r2
 800219c:	4605      	mov	r5, r0
 800219e:	b118      	cbz	r0, 80021a8 <__swbuf_r+0x12>
 80021a0:	6a03      	ldr	r3, [r0, #32]
 80021a2:	b90b      	cbnz	r3, 80021a8 <__swbuf_r+0x12>
 80021a4:	f7ff fef2 	bl	8001f8c <__sinit>
 80021a8:	69a3      	ldr	r3, [r4, #24]
 80021aa:	60a3      	str	r3, [r4, #8]
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	071a      	lsls	r2, r3, #28
 80021b0:	d525      	bpl.n	80021fe <__swbuf_r+0x68>
 80021b2:	6923      	ldr	r3, [r4, #16]
 80021b4:	b31b      	cbz	r3, 80021fe <__swbuf_r+0x68>
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	6922      	ldr	r2, [r4, #16]
 80021ba:	1a98      	subs	r0, r3, r2
 80021bc:	6963      	ldr	r3, [r4, #20]
 80021be:	b2f6      	uxtb	r6, r6
 80021c0:	4283      	cmp	r3, r0
 80021c2:	4637      	mov	r7, r6
 80021c4:	dc04      	bgt.n	80021d0 <__swbuf_r+0x3a>
 80021c6:	4621      	mov	r1, r4
 80021c8:	4628      	mov	r0, r5
 80021ca:	f000 fe03 	bl	8002dd4 <_fflush_r>
 80021ce:	b9e0      	cbnz	r0, 800220a <__swbuf_r+0x74>
 80021d0:	68a3      	ldr	r3, [r4, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60a3      	str	r3, [r4, #8]
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	6022      	str	r2, [r4, #0]
 80021dc:	701e      	strb	r6, [r3, #0]
 80021de:	6962      	ldr	r2, [r4, #20]
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d004      	beq.n	80021f0 <__swbuf_r+0x5a>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	07db      	lsls	r3, r3, #31
 80021ea:	d506      	bpl.n	80021fa <__swbuf_r+0x64>
 80021ec:	2e0a      	cmp	r6, #10
 80021ee:	d104      	bne.n	80021fa <__swbuf_r+0x64>
 80021f0:	4621      	mov	r1, r4
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 fdee 	bl	8002dd4 <_fflush_r>
 80021f8:	b938      	cbnz	r0, 800220a <__swbuf_r+0x74>
 80021fa:	4638      	mov	r0, r7
 80021fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fe:	4621      	mov	r1, r4
 8002200:	4628      	mov	r0, r5
 8002202:	f000 f805 	bl	8002210 <__swsetup_r>
 8002206:	2800      	cmp	r0, #0
 8002208:	d0d5      	beq.n	80021b6 <__swbuf_r+0x20>
 800220a:	f04f 37ff 	mov.w	r7, #4294967295
 800220e:	e7f4      	b.n	80021fa <__swbuf_r+0x64>

08002210 <__swsetup_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <__swsetup_r+0xac>)
 8002214:	4605      	mov	r5, r0
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	460c      	mov	r4, r1
 800221a:	b118      	cbz	r0, 8002224 <__swsetup_r+0x14>
 800221c:	6a03      	ldr	r3, [r0, #32]
 800221e:	b90b      	cbnz	r3, 8002224 <__swsetup_r+0x14>
 8002220:	f7ff feb4 	bl	8001f8c <__sinit>
 8002224:	89a3      	ldrh	r3, [r4, #12]
 8002226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800222a:	0718      	lsls	r0, r3, #28
 800222c:	d422      	bmi.n	8002274 <__swsetup_r+0x64>
 800222e:	06d9      	lsls	r1, r3, #27
 8002230:	d407      	bmi.n	8002242 <__swsetup_r+0x32>
 8002232:	2309      	movs	r3, #9
 8002234:	602b      	str	r3, [r5, #0]
 8002236:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800223a:	81a3      	strh	r3, [r4, #12]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	e034      	b.n	80022ac <__swsetup_r+0x9c>
 8002242:	0758      	lsls	r0, r3, #29
 8002244:	d512      	bpl.n	800226c <__swsetup_r+0x5c>
 8002246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002248:	b141      	cbz	r1, 800225c <__swsetup_r+0x4c>
 800224a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800224e:	4299      	cmp	r1, r3
 8002250:	d002      	beq.n	8002258 <__swsetup_r+0x48>
 8002252:	4628      	mov	r0, r5
 8002254:	f000 f8c0 	bl	80023d8 <_free_r>
 8002258:	2300      	movs	r3, #0
 800225a:	6363      	str	r3, [r4, #52]	; 0x34
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002262:	81a3      	strh	r3, [r4, #12]
 8002264:	2300      	movs	r3, #0
 8002266:	6063      	str	r3, [r4, #4]
 8002268:	6923      	ldr	r3, [r4, #16]
 800226a:	6023      	str	r3, [r4, #0]
 800226c:	89a3      	ldrh	r3, [r4, #12]
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	81a3      	strh	r3, [r4, #12]
 8002274:	6923      	ldr	r3, [r4, #16]
 8002276:	b94b      	cbnz	r3, 800228c <__swsetup_r+0x7c>
 8002278:	89a3      	ldrh	r3, [r4, #12]
 800227a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800227e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002282:	d003      	beq.n	800228c <__swsetup_r+0x7c>
 8002284:	4621      	mov	r1, r4
 8002286:	4628      	mov	r0, r5
 8002288:	f000 fdf2 	bl	8002e70 <__smakebuf_r>
 800228c:	89a0      	ldrh	r0, [r4, #12]
 800228e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002292:	f010 0301 	ands.w	r3, r0, #1
 8002296:	d00a      	beq.n	80022ae <__swsetup_r+0x9e>
 8002298:	2300      	movs	r3, #0
 800229a:	60a3      	str	r3, [r4, #8]
 800229c:	6963      	ldr	r3, [r4, #20]
 800229e:	425b      	negs	r3, r3
 80022a0:	61a3      	str	r3, [r4, #24]
 80022a2:	6923      	ldr	r3, [r4, #16]
 80022a4:	b943      	cbnz	r3, 80022b8 <__swsetup_r+0xa8>
 80022a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022aa:	d1c4      	bne.n	8002236 <__swsetup_r+0x26>
 80022ac:	bd38      	pop	{r3, r4, r5, pc}
 80022ae:	0781      	lsls	r1, r0, #30
 80022b0:	bf58      	it	pl
 80022b2:	6963      	ldrpl	r3, [r4, #20]
 80022b4:	60a3      	str	r3, [r4, #8]
 80022b6:	e7f4      	b.n	80022a2 <__swsetup_r+0x92>
 80022b8:	2000      	movs	r0, #0
 80022ba:	e7f7      	b.n	80022ac <__swsetup_r+0x9c>
 80022bc:	20000064 	.word	0x20000064

080022c0 <memset>:
 80022c0:	4402      	add	r2, r0
 80022c2:	4603      	mov	r3, r0
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d100      	bne.n	80022ca <memset+0xa>
 80022c8:	4770      	bx	lr
 80022ca:	f803 1b01 	strb.w	r1, [r3], #1
 80022ce:	e7f9      	b.n	80022c4 <memset+0x4>

080022d0 <_close_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4d06      	ldr	r5, [pc, #24]	; (80022ec <_close_r+0x1c>)
 80022d4:	2300      	movs	r3, #0
 80022d6:	4604      	mov	r4, r0
 80022d8:	4608      	mov	r0, r1
 80022da:	602b      	str	r3, [r5, #0]
 80022dc:	f7ff fa9b 	bl	8001816 <_close>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	d102      	bne.n	80022ea <_close_r+0x1a>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	b103      	cbz	r3, 80022ea <_close_r+0x1a>
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	200023ac 	.word	0x200023ac

080022f0 <_lseek_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4d07      	ldr	r5, [pc, #28]	; (8002310 <_lseek_r+0x20>)
 80022f4:	4604      	mov	r4, r0
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	602a      	str	r2, [r5, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f7ff fab0 	bl	8001864 <_lseek>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_lseek_r+0x1e>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	b103      	cbz	r3, 800230e <_lseek_r+0x1e>
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	200023ac 	.word	0x200023ac

08002314 <_read_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4d07      	ldr	r5, [pc, #28]	; (8002334 <_read_r+0x20>)
 8002318:	4604      	mov	r4, r0
 800231a:	4608      	mov	r0, r1
 800231c:	4611      	mov	r1, r2
 800231e:	2200      	movs	r2, #0
 8002320:	602a      	str	r2, [r5, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	f7ff fa3e 	bl	80017a4 <_read>
 8002328:	1c43      	adds	r3, r0, #1
 800232a:	d102      	bne.n	8002332 <_read_r+0x1e>
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	b103      	cbz	r3, 8002332 <_read_r+0x1e>
 8002330:	6023      	str	r3, [r4, #0]
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	200023ac 	.word	0x200023ac

08002338 <_sbrk_r>:
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	4d06      	ldr	r5, [pc, #24]	; (8002354 <_sbrk_r+0x1c>)
 800233c:	2300      	movs	r3, #0
 800233e:	4604      	mov	r4, r0
 8002340:	4608      	mov	r0, r1
 8002342:	602b      	str	r3, [r5, #0]
 8002344:	f7ff fa9c 	bl	8001880 <_sbrk>
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	d102      	bne.n	8002352 <_sbrk_r+0x1a>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	b103      	cbz	r3, 8002352 <_sbrk_r+0x1a>
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	200023ac 	.word	0x200023ac

08002358 <_write_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4d07      	ldr	r5, [pc, #28]	; (8002378 <_write_r+0x20>)
 800235c:	4604      	mov	r4, r0
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	2200      	movs	r2, #0
 8002364:	602a      	str	r2, [r5, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f7ff fa39 	bl	80017de <_write>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d102      	bne.n	8002376 <_write_r+0x1e>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	b103      	cbz	r3, 8002376 <_write_r+0x1e>
 8002374:	6023      	str	r3, [r4, #0]
 8002376:	bd38      	pop	{r3, r4, r5, pc}
 8002378:	200023ac 	.word	0x200023ac

0800237c <__errno>:
 800237c:	4b01      	ldr	r3, [pc, #4]	; (8002384 <__errno+0x8>)
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000064 	.word	0x20000064

08002388 <__libc_init_array>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	4d0d      	ldr	r5, [pc, #52]	; (80023c0 <__libc_init_array+0x38>)
 800238c:	4c0d      	ldr	r4, [pc, #52]	; (80023c4 <__libc_init_array+0x3c>)
 800238e:	1b64      	subs	r4, r4, r5
 8002390:	10a4      	asrs	r4, r4, #2
 8002392:	2600      	movs	r6, #0
 8002394:	42a6      	cmp	r6, r4
 8002396:	d109      	bne.n	80023ac <__libc_init_array+0x24>
 8002398:	4d0b      	ldr	r5, [pc, #44]	; (80023c8 <__libc_init_array+0x40>)
 800239a:	4c0c      	ldr	r4, [pc, #48]	; (80023cc <__libc_init_array+0x44>)
 800239c:	f000 fe26 	bl	8002fec <_init>
 80023a0:	1b64      	subs	r4, r4, r5
 80023a2:	10a4      	asrs	r4, r4, #2
 80023a4:	2600      	movs	r6, #0
 80023a6:	42a6      	cmp	r6, r4
 80023a8:	d105      	bne.n	80023b6 <__libc_init_array+0x2e>
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b0:	4798      	blx	r3
 80023b2:	3601      	adds	r6, #1
 80023b4:	e7ee      	b.n	8002394 <__libc_init_array+0xc>
 80023b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ba:	4798      	blx	r3
 80023bc:	3601      	adds	r6, #1
 80023be:	e7f2      	b.n	80023a6 <__libc_init_array+0x1e>
 80023c0:	080032f8 	.word	0x080032f8
 80023c4:	080032f8 	.word	0x080032f8
 80023c8:	080032f8 	.word	0x080032f8
 80023cc:	080032fc 	.word	0x080032fc

080023d0 <__retarget_lock_init_recursive>:
 80023d0:	4770      	bx	lr

080023d2 <__retarget_lock_acquire_recursive>:
 80023d2:	4770      	bx	lr

080023d4 <__retarget_lock_release_recursive>:
 80023d4:	4770      	bx	lr
	...

080023d8 <_free_r>:
 80023d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023da:	2900      	cmp	r1, #0
 80023dc:	d044      	beq.n	8002468 <_free_r+0x90>
 80023de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023e2:	9001      	str	r0, [sp, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f1a1 0404 	sub.w	r4, r1, #4
 80023ea:	bfb8      	it	lt
 80023ec:	18e4      	addlt	r4, r4, r3
 80023ee:	f7ff fca9 	bl	8001d44 <__malloc_lock>
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <_free_r+0x94>)
 80023f4:	9801      	ldr	r0, [sp, #4]
 80023f6:	6813      	ldr	r3, [r2, #0]
 80023f8:	b933      	cbnz	r3, 8002408 <_free_r+0x30>
 80023fa:	6063      	str	r3, [r4, #4]
 80023fc:	6014      	str	r4, [r2, #0]
 80023fe:	b003      	add	sp, #12
 8002400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002404:	f7ff bca4 	b.w	8001d50 <__malloc_unlock>
 8002408:	42a3      	cmp	r3, r4
 800240a:	d908      	bls.n	800241e <_free_r+0x46>
 800240c:	6825      	ldr	r5, [r4, #0]
 800240e:	1961      	adds	r1, r4, r5
 8002410:	428b      	cmp	r3, r1
 8002412:	bf01      	itttt	eq
 8002414:	6819      	ldreq	r1, [r3, #0]
 8002416:	685b      	ldreq	r3, [r3, #4]
 8002418:	1949      	addeq	r1, r1, r5
 800241a:	6021      	streq	r1, [r4, #0]
 800241c:	e7ed      	b.n	80023fa <_free_r+0x22>
 800241e:	461a      	mov	r2, r3
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	b10b      	cbz	r3, 8002428 <_free_r+0x50>
 8002424:	42a3      	cmp	r3, r4
 8002426:	d9fa      	bls.n	800241e <_free_r+0x46>
 8002428:	6811      	ldr	r1, [r2, #0]
 800242a:	1855      	adds	r5, r2, r1
 800242c:	42a5      	cmp	r5, r4
 800242e:	d10b      	bne.n	8002448 <_free_r+0x70>
 8002430:	6824      	ldr	r4, [r4, #0]
 8002432:	4421      	add	r1, r4
 8002434:	1854      	adds	r4, r2, r1
 8002436:	42a3      	cmp	r3, r4
 8002438:	6011      	str	r1, [r2, #0]
 800243a:	d1e0      	bne.n	80023fe <_free_r+0x26>
 800243c:	681c      	ldr	r4, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	6053      	str	r3, [r2, #4]
 8002442:	440c      	add	r4, r1
 8002444:	6014      	str	r4, [r2, #0]
 8002446:	e7da      	b.n	80023fe <_free_r+0x26>
 8002448:	d902      	bls.n	8002450 <_free_r+0x78>
 800244a:	230c      	movs	r3, #12
 800244c:	6003      	str	r3, [r0, #0]
 800244e:	e7d6      	b.n	80023fe <_free_r+0x26>
 8002450:	6825      	ldr	r5, [r4, #0]
 8002452:	1961      	adds	r1, r4, r5
 8002454:	428b      	cmp	r3, r1
 8002456:	bf04      	itt	eq
 8002458:	6819      	ldreq	r1, [r3, #0]
 800245a:	685b      	ldreq	r3, [r3, #4]
 800245c:	6063      	str	r3, [r4, #4]
 800245e:	bf04      	itt	eq
 8002460:	1949      	addeq	r1, r1, r5
 8002462:	6021      	streq	r1, [r4, #0]
 8002464:	6054      	str	r4, [r2, #4]
 8002466:	e7ca      	b.n	80023fe <_free_r+0x26>
 8002468:	b003      	add	sp, #12
 800246a:	bd30      	pop	{r4, r5, pc}
 800246c:	20002268 	.word	0x20002268

08002470 <__ssputs_r>:
 8002470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002474:	688e      	ldr	r6, [r1, #8]
 8002476:	461f      	mov	r7, r3
 8002478:	42be      	cmp	r6, r7
 800247a:	680b      	ldr	r3, [r1, #0]
 800247c:	4682      	mov	sl, r0
 800247e:	460c      	mov	r4, r1
 8002480:	4690      	mov	r8, r2
 8002482:	d82c      	bhi.n	80024de <__ssputs_r+0x6e>
 8002484:	898a      	ldrh	r2, [r1, #12]
 8002486:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800248a:	d026      	beq.n	80024da <__ssputs_r+0x6a>
 800248c:	6965      	ldr	r5, [r4, #20]
 800248e:	6909      	ldr	r1, [r1, #16]
 8002490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002494:	eba3 0901 	sub.w	r9, r3, r1
 8002498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800249c:	1c7b      	adds	r3, r7, #1
 800249e:	444b      	add	r3, r9
 80024a0:	106d      	asrs	r5, r5, #1
 80024a2:	429d      	cmp	r5, r3
 80024a4:	bf38      	it	cc
 80024a6:	461d      	movcc	r5, r3
 80024a8:	0553      	lsls	r3, r2, #21
 80024aa:	d527      	bpl.n	80024fc <__ssputs_r+0x8c>
 80024ac:	4629      	mov	r1, r5
 80024ae:	f7ff fbc9 	bl	8001c44 <_malloc_r>
 80024b2:	4606      	mov	r6, r0
 80024b4:	b360      	cbz	r0, 8002510 <__ssputs_r+0xa0>
 80024b6:	6921      	ldr	r1, [r4, #16]
 80024b8:	464a      	mov	r2, r9
 80024ba:	f000 fd51 	bl	8002f60 <memcpy>
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	81a3      	strh	r3, [r4, #12]
 80024ca:	6126      	str	r6, [r4, #16]
 80024cc:	6165      	str	r5, [r4, #20]
 80024ce:	444e      	add	r6, r9
 80024d0:	eba5 0509 	sub.w	r5, r5, r9
 80024d4:	6026      	str	r6, [r4, #0]
 80024d6:	60a5      	str	r5, [r4, #8]
 80024d8:	463e      	mov	r6, r7
 80024da:	42be      	cmp	r6, r7
 80024dc:	d900      	bls.n	80024e0 <__ssputs_r+0x70>
 80024de:	463e      	mov	r6, r7
 80024e0:	6820      	ldr	r0, [r4, #0]
 80024e2:	4632      	mov	r2, r6
 80024e4:	4641      	mov	r1, r8
 80024e6:	f000 fcff 	bl	8002ee8 <memmove>
 80024ea:	68a3      	ldr	r3, [r4, #8]
 80024ec:	1b9b      	subs	r3, r3, r6
 80024ee:	60a3      	str	r3, [r4, #8]
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	4433      	add	r3, r6
 80024f4:	6023      	str	r3, [r4, #0]
 80024f6:	2000      	movs	r0, #0
 80024f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024fc:	462a      	mov	r2, r5
 80024fe:	f000 fd3d 	bl	8002f7c <_realloc_r>
 8002502:	4606      	mov	r6, r0
 8002504:	2800      	cmp	r0, #0
 8002506:	d1e0      	bne.n	80024ca <__ssputs_r+0x5a>
 8002508:	6921      	ldr	r1, [r4, #16]
 800250a:	4650      	mov	r0, sl
 800250c:	f7ff ff64 	bl	80023d8 <_free_r>
 8002510:	230c      	movs	r3, #12
 8002512:	f8ca 3000 	str.w	r3, [sl]
 8002516:	89a3      	ldrh	r3, [r4, #12]
 8002518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251c:	81a3      	strh	r3, [r4, #12]
 800251e:	f04f 30ff 	mov.w	r0, #4294967295
 8002522:	e7e9      	b.n	80024f8 <__ssputs_r+0x88>

08002524 <_svfiprintf_r>:
 8002524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002528:	4698      	mov	r8, r3
 800252a:	898b      	ldrh	r3, [r1, #12]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	b09d      	sub	sp, #116	; 0x74
 8002530:	4607      	mov	r7, r0
 8002532:	460d      	mov	r5, r1
 8002534:	4614      	mov	r4, r2
 8002536:	d50e      	bpl.n	8002556 <_svfiprintf_r+0x32>
 8002538:	690b      	ldr	r3, [r1, #16]
 800253a:	b963      	cbnz	r3, 8002556 <_svfiprintf_r+0x32>
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	f7ff fb81 	bl	8001c44 <_malloc_r>
 8002542:	6028      	str	r0, [r5, #0]
 8002544:	6128      	str	r0, [r5, #16]
 8002546:	b920      	cbnz	r0, 8002552 <_svfiprintf_r+0x2e>
 8002548:	230c      	movs	r3, #12
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	e0d0      	b.n	80026f4 <_svfiprintf_r+0x1d0>
 8002552:	2340      	movs	r3, #64	; 0x40
 8002554:	616b      	str	r3, [r5, #20]
 8002556:	2300      	movs	r3, #0
 8002558:	9309      	str	r3, [sp, #36]	; 0x24
 800255a:	2320      	movs	r3, #32
 800255c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002560:	f8cd 800c 	str.w	r8, [sp, #12]
 8002564:	2330      	movs	r3, #48	; 0x30
 8002566:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800270c <_svfiprintf_r+0x1e8>
 800256a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800256e:	f04f 0901 	mov.w	r9, #1
 8002572:	4623      	mov	r3, r4
 8002574:	469a      	mov	sl, r3
 8002576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800257a:	b10a      	cbz	r2, 8002580 <_svfiprintf_r+0x5c>
 800257c:	2a25      	cmp	r2, #37	; 0x25
 800257e:	d1f9      	bne.n	8002574 <_svfiprintf_r+0x50>
 8002580:	ebba 0b04 	subs.w	fp, sl, r4
 8002584:	d00b      	beq.n	800259e <_svfiprintf_r+0x7a>
 8002586:	465b      	mov	r3, fp
 8002588:	4622      	mov	r2, r4
 800258a:	4629      	mov	r1, r5
 800258c:	4638      	mov	r0, r7
 800258e:	f7ff ff6f 	bl	8002470 <__ssputs_r>
 8002592:	3001      	adds	r0, #1
 8002594:	f000 80a9 	beq.w	80026ea <_svfiprintf_r+0x1c6>
 8002598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800259a:	445a      	add	r2, fp
 800259c:	9209      	str	r2, [sp, #36]	; 0x24
 800259e:	f89a 3000 	ldrb.w	r3, [sl]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80a1 	beq.w	80026ea <_svfiprintf_r+0x1c6>
 80025a8:	2300      	movs	r3, #0
 80025aa:	f04f 32ff 	mov.w	r2, #4294967295
 80025ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025b2:	f10a 0a01 	add.w	sl, sl, #1
 80025b6:	9304      	str	r3, [sp, #16]
 80025b8:	9307      	str	r3, [sp, #28]
 80025ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025be:	931a      	str	r3, [sp, #104]	; 0x68
 80025c0:	4654      	mov	r4, sl
 80025c2:	2205      	movs	r2, #5
 80025c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c8:	4850      	ldr	r0, [pc, #320]	; (800270c <_svfiprintf_r+0x1e8>)
 80025ca:	f7fd fe19 	bl	8000200 <memchr>
 80025ce:	9a04      	ldr	r2, [sp, #16]
 80025d0:	b9d8      	cbnz	r0, 800260a <_svfiprintf_r+0xe6>
 80025d2:	06d0      	lsls	r0, r2, #27
 80025d4:	bf44      	itt	mi
 80025d6:	2320      	movmi	r3, #32
 80025d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025dc:	0711      	lsls	r1, r2, #28
 80025de:	bf44      	itt	mi
 80025e0:	232b      	movmi	r3, #43	; 0x2b
 80025e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025e6:	f89a 3000 	ldrb.w	r3, [sl]
 80025ea:	2b2a      	cmp	r3, #42	; 0x2a
 80025ec:	d015      	beq.n	800261a <_svfiprintf_r+0xf6>
 80025ee:	9a07      	ldr	r2, [sp, #28]
 80025f0:	4654      	mov	r4, sl
 80025f2:	2000      	movs	r0, #0
 80025f4:	f04f 0c0a 	mov.w	ip, #10
 80025f8:	4621      	mov	r1, r4
 80025fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025fe:	3b30      	subs	r3, #48	; 0x30
 8002600:	2b09      	cmp	r3, #9
 8002602:	d94d      	bls.n	80026a0 <_svfiprintf_r+0x17c>
 8002604:	b1b0      	cbz	r0, 8002634 <_svfiprintf_r+0x110>
 8002606:	9207      	str	r2, [sp, #28]
 8002608:	e014      	b.n	8002634 <_svfiprintf_r+0x110>
 800260a:	eba0 0308 	sub.w	r3, r0, r8
 800260e:	fa09 f303 	lsl.w	r3, r9, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	9304      	str	r3, [sp, #16]
 8002616:	46a2      	mov	sl, r4
 8002618:	e7d2      	b.n	80025c0 <_svfiprintf_r+0x9c>
 800261a:	9b03      	ldr	r3, [sp, #12]
 800261c:	1d19      	adds	r1, r3, #4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	9103      	str	r1, [sp, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	bfbb      	ittet	lt
 8002626:	425b      	neglt	r3, r3
 8002628:	f042 0202 	orrlt.w	r2, r2, #2
 800262c:	9307      	strge	r3, [sp, #28]
 800262e:	9307      	strlt	r3, [sp, #28]
 8002630:	bfb8      	it	lt
 8002632:	9204      	strlt	r2, [sp, #16]
 8002634:	7823      	ldrb	r3, [r4, #0]
 8002636:	2b2e      	cmp	r3, #46	; 0x2e
 8002638:	d10c      	bne.n	8002654 <_svfiprintf_r+0x130>
 800263a:	7863      	ldrb	r3, [r4, #1]
 800263c:	2b2a      	cmp	r3, #42	; 0x2a
 800263e:	d134      	bne.n	80026aa <_svfiprintf_r+0x186>
 8002640:	9b03      	ldr	r3, [sp, #12]
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	9203      	str	r2, [sp, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	bfb8      	it	lt
 800264c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002650:	3402      	adds	r4, #2
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800271c <_svfiprintf_r+0x1f8>
 8002658:	7821      	ldrb	r1, [r4, #0]
 800265a:	2203      	movs	r2, #3
 800265c:	4650      	mov	r0, sl
 800265e:	f7fd fdcf 	bl	8000200 <memchr>
 8002662:	b138      	cbz	r0, 8002674 <_svfiprintf_r+0x150>
 8002664:	9b04      	ldr	r3, [sp, #16]
 8002666:	eba0 000a 	sub.w	r0, r0, sl
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	4082      	lsls	r2, r0
 800266e:	4313      	orrs	r3, r2
 8002670:	3401      	adds	r4, #1
 8002672:	9304      	str	r3, [sp, #16]
 8002674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002678:	4825      	ldr	r0, [pc, #148]	; (8002710 <_svfiprintf_r+0x1ec>)
 800267a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800267e:	2206      	movs	r2, #6
 8002680:	f7fd fdbe 	bl	8000200 <memchr>
 8002684:	2800      	cmp	r0, #0
 8002686:	d038      	beq.n	80026fa <_svfiprintf_r+0x1d6>
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <_svfiprintf_r+0x1f0>)
 800268a:	bb1b      	cbnz	r3, 80026d4 <_svfiprintf_r+0x1b0>
 800268c:	9b03      	ldr	r3, [sp, #12]
 800268e:	3307      	adds	r3, #7
 8002690:	f023 0307 	bic.w	r3, r3, #7
 8002694:	3308      	adds	r3, #8
 8002696:	9303      	str	r3, [sp, #12]
 8002698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800269a:	4433      	add	r3, r6
 800269c:	9309      	str	r3, [sp, #36]	; 0x24
 800269e:	e768      	b.n	8002572 <_svfiprintf_r+0x4e>
 80026a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80026a4:	460c      	mov	r4, r1
 80026a6:	2001      	movs	r0, #1
 80026a8:	e7a6      	b.n	80025f8 <_svfiprintf_r+0xd4>
 80026aa:	2300      	movs	r3, #0
 80026ac:	3401      	adds	r4, #1
 80026ae:	9305      	str	r3, [sp, #20]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0c0a 	mov.w	ip, #10
 80026b6:	4620      	mov	r0, r4
 80026b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026bc:	3a30      	subs	r2, #48	; 0x30
 80026be:	2a09      	cmp	r2, #9
 80026c0:	d903      	bls.n	80026ca <_svfiprintf_r+0x1a6>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0c6      	beq.n	8002654 <_svfiprintf_r+0x130>
 80026c6:	9105      	str	r1, [sp, #20]
 80026c8:	e7c4      	b.n	8002654 <_svfiprintf_r+0x130>
 80026ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80026ce:	4604      	mov	r4, r0
 80026d0:	2301      	movs	r3, #1
 80026d2:	e7f0      	b.n	80026b6 <_svfiprintf_r+0x192>
 80026d4:	ab03      	add	r3, sp, #12
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	462a      	mov	r2, r5
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_svfiprintf_r+0x1f4>)
 80026dc:	a904      	add	r1, sp, #16
 80026de:	4638      	mov	r0, r7
 80026e0:	f3af 8000 	nop.w
 80026e4:	1c42      	adds	r2, r0, #1
 80026e6:	4606      	mov	r6, r0
 80026e8:	d1d6      	bne.n	8002698 <_svfiprintf_r+0x174>
 80026ea:	89ab      	ldrh	r3, [r5, #12]
 80026ec:	065b      	lsls	r3, r3, #25
 80026ee:	f53f af2d 	bmi.w	800254c <_svfiprintf_r+0x28>
 80026f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026f4:	b01d      	add	sp, #116	; 0x74
 80026f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fa:	ab03      	add	r3, sp, #12
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	462a      	mov	r2, r5
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <_svfiprintf_r+0x1f4>)
 8002702:	a904      	add	r1, sp, #16
 8002704:	4638      	mov	r0, r7
 8002706:	f000 f9bd 	bl	8002a84 <_printf_i>
 800270a:	e7eb      	b.n	80026e4 <_svfiprintf_r+0x1c0>
 800270c:	080032c4 	.word	0x080032c4
 8002710:	080032ce 	.word	0x080032ce
 8002714:	00000000 	.word	0x00000000
 8002718:	08002471 	.word	0x08002471
 800271c:	080032ca 	.word	0x080032ca

08002720 <__sfputc_r>:
 8002720:	6893      	ldr	r3, [r2, #8]
 8002722:	3b01      	subs	r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	b410      	push	{r4}
 8002728:	6093      	str	r3, [r2, #8]
 800272a:	da08      	bge.n	800273e <__sfputc_r+0x1e>
 800272c:	6994      	ldr	r4, [r2, #24]
 800272e:	42a3      	cmp	r3, r4
 8002730:	db01      	blt.n	8002736 <__sfputc_r+0x16>
 8002732:	290a      	cmp	r1, #10
 8002734:	d103      	bne.n	800273e <__sfputc_r+0x1e>
 8002736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800273a:	f7ff bd2c 	b.w	8002196 <__swbuf_r>
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	1c58      	adds	r0, r3, #1
 8002742:	6010      	str	r0, [r2, #0]
 8002744:	7019      	strb	r1, [r3, #0]
 8002746:	4608      	mov	r0, r1
 8002748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800274c:	4770      	bx	lr

0800274e <__sfputs_r>:
 800274e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002750:	4606      	mov	r6, r0
 8002752:	460f      	mov	r7, r1
 8002754:	4614      	mov	r4, r2
 8002756:	18d5      	adds	r5, r2, r3
 8002758:	42ac      	cmp	r4, r5
 800275a:	d101      	bne.n	8002760 <__sfputs_r+0x12>
 800275c:	2000      	movs	r0, #0
 800275e:	e007      	b.n	8002770 <__sfputs_r+0x22>
 8002760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002764:	463a      	mov	r2, r7
 8002766:	4630      	mov	r0, r6
 8002768:	f7ff ffda 	bl	8002720 <__sfputc_r>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d1f3      	bne.n	8002758 <__sfputs_r+0xa>
 8002770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002774 <_vfiprintf_r>:
 8002774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002778:	460d      	mov	r5, r1
 800277a:	b09d      	sub	sp, #116	; 0x74
 800277c:	4614      	mov	r4, r2
 800277e:	4698      	mov	r8, r3
 8002780:	4606      	mov	r6, r0
 8002782:	b118      	cbz	r0, 800278c <_vfiprintf_r+0x18>
 8002784:	6a03      	ldr	r3, [r0, #32]
 8002786:	b90b      	cbnz	r3, 800278c <_vfiprintf_r+0x18>
 8002788:	f7ff fc00 	bl	8001f8c <__sinit>
 800278c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800278e:	07d9      	lsls	r1, r3, #31
 8002790:	d405      	bmi.n	800279e <_vfiprintf_r+0x2a>
 8002792:	89ab      	ldrh	r3, [r5, #12]
 8002794:	059a      	lsls	r2, r3, #22
 8002796:	d402      	bmi.n	800279e <_vfiprintf_r+0x2a>
 8002798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800279a:	f7ff fe1a 	bl	80023d2 <__retarget_lock_acquire_recursive>
 800279e:	89ab      	ldrh	r3, [r5, #12]
 80027a0:	071b      	lsls	r3, r3, #28
 80027a2:	d501      	bpl.n	80027a8 <_vfiprintf_r+0x34>
 80027a4:	692b      	ldr	r3, [r5, #16]
 80027a6:	b99b      	cbnz	r3, 80027d0 <_vfiprintf_r+0x5c>
 80027a8:	4629      	mov	r1, r5
 80027aa:	4630      	mov	r0, r6
 80027ac:	f7ff fd30 	bl	8002210 <__swsetup_r>
 80027b0:	b170      	cbz	r0, 80027d0 <_vfiprintf_r+0x5c>
 80027b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027b4:	07dc      	lsls	r4, r3, #31
 80027b6:	d504      	bpl.n	80027c2 <_vfiprintf_r+0x4e>
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	b01d      	add	sp, #116	; 0x74
 80027be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c2:	89ab      	ldrh	r3, [r5, #12]
 80027c4:	0598      	lsls	r0, r3, #22
 80027c6:	d4f7      	bmi.n	80027b8 <_vfiprintf_r+0x44>
 80027c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027ca:	f7ff fe03 	bl	80023d4 <__retarget_lock_release_recursive>
 80027ce:	e7f3      	b.n	80027b8 <_vfiprintf_r+0x44>
 80027d0:	2300      	movs	r3, #0
 80027d2:	9309      	str	r3, [sp, #36]	; 0x24
 80027d4:	2320      	movs	r3, #32
 80027d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027da:	f8cd 800c 	str.w	r8, [sp, #12]
 80027de:	2330      	movs	r3, #48	; 0x30
 80027e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002994 <_vfiprintf_r+0x220>
 80027e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027e8:	f04f 0901 	mov.w	r9, #1
 80027ec:	4623      	mov	r3, r4
 80027ee:	469a      	mov	sl, r3
 80027f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027f4:	b10a      	cbz	r2, 80027fa <_vfiprintf_r+0x86>
 80027f6:	2a25      	cmp	r2, #37	; 0x25
 80027f8:	d1f9      	bne.n	80027ee <_vfiprintf_r+0x7a>
 80027fa:	ebba 0b04 	subs.w	fp, sl, r4
 80027fe:	d00b      	beq.n	8002818 <_vfiprintf_r+0xa4>
 8002800:	465b      	mov	r3, fp
 8002802:	4622      	mov	r2, r4
 8002804:	4629      	mov	r1, r5
 8002806:	4630      	mov	r0, r6
 8002808:	f7ff ffa1 	bl	800274e <__sfputs_r>
 800280c:	3001      	adds	r0, #1
 800280e:	f000 80a9 	beq.w	8002964 <_vfiprintf_r+0x1f0>
 8002812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002814:	445a      	add	r2, fp
 8002816:	9209      	str	r2, [sp, #36]	; 0x24
 8002818:	f89a 3000 	ldrb.w	r3, [sl]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a1 	beq.w	8002964 <_vfiprintf_r+0x1f0>
 8002822:	2300      	movs	r3, #0
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800282c:	f10a 0a01 	add.w	sl, sl, #1
 8002830:	9304      	str	r3, [sp, #16]
 8002832:	9307      	str	r3, [sp, #28]
 8002834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002838:	931a      	str	r3, [sp, #104]	; 0x68
 800283a:	4654      	mov	r4, sl
 800283c:	2205      	movs	r2, #5
 800283e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002842:	4854      	ldr	r0, [pc, #336]	; (8002994 <_vfiprintf_r+0x220>)
 8002844:	f7fd fcdc 	bl	8000200 <memchr>
 8002848:	9a04      	ldr	r2, [sp, #16]
 800284a:	b9d8      	cbnz	r0, 8002884 <_vfiprintf_r+0x110>
 800284c:	06d1      	lsls	r1, r2, #27
 800284e:	bf44      	itt	mi
 8002850:	2320      	movmi	r3, #32
 8002852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002856:	0713      	lsls	r3, r2, #28
 8002858:	bf44      	itt	mi
 800285a:	232b      	movmi	r3, #43	; 0x2b
 800285c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002860:	f89a 3000 	ldrb.w	r3, [sl]
 8002864:	2b2a      	cmp	r3, #42	; 0x2a
 8002866:	d015      	beq.n	8002894 <_vfiprintf_r+0x120>
 8002868:	9a07      	ldr	r2, [sp, #28]
 800286a:	4654      	mov	r4, sl
 800286c:	2000      	movs	r0, #0
 800286e:	f04f 0c0a 	mov.w	ip, #10
 8002872:	4621      	mov	r1, r4
 8002874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002878:	3b30      	subs	r3, #48	; 0x30
 800287a:	2b09      	cmp	r3, #9
 800287c:	d94d      	bls.n	800291a <_vfiprintf_r+0x1a6>
 800287e:	b1b0      	cbz	r0, 80028ae <_vfiprintf_r+0x13a>
 8002880:	9207      	str	r2, [sp, #28]
 8002882:	e014      	b.n	80028ae <_vfiprintf_r+0x13a>
 8002884:	eba0 0308 	sub.w	r3, r0, r8
 8002888:	fa09 f303 	lsl.w	r3, r9, r3
 800288c:	4313      	orrs	r3, r2
 800288e:	9304      	str	r3, [sp, #16]
 8002890:	46a2      	mov	sl, r4
 8002892:	e7d2      	b.n	800283a <_vfiprintf_r+0xc6>
 8002894:	9b03      	ldr	r3, [sp, #12]
 8002896:	1d19      	adds	r1, r3, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	9103      	str	r1, [sp, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	bfbb      	ittet	lt
 80028a0:	425b      	neglt	r3, r3
 80028a2:	f042 0202 	orrlt.w	r2, r2, #2
 80028a6:	9307      	strge	r3, [sp, #28]
 80028a8:	9307      	strlt	r3, [sp, #28]
 80028aa:	bfb8      	it	lt
 80028ac:	9204      	strlt	r2, [sp, #16]
 80028ae:	7823      	ldrb	r3, [r4, #0]
 80028b0:	2b2e      	cmp	r3, #46	; 0x2e
 80028b2:	d10c      	bne.n	80028ce <_vfiprintf_r+0x15a>
 80028b4:	7863      	ldrb	r3, [r4, #1]
 80028b6:	2b2a      	cmp	r3, #42	; 0x2a
 80028b8:	d134      	bne.n	8002924 <_vfiprintf_r+0x1b0>
 80028ba:	9b03      	ldr	r3, [sp, #12]
 80028bc:	1d1a      	adds	r2, r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	9203      	str	r2, [sp, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bfb8      	it	lt
 80028c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ca:	3402      	adds	r4, #2
 80028cc:	9305      	str	r3, [sp, #20]
 80028ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80029a4 <_vfiprintf_r+0x230>
 80028d2:	7821      	ldrb	r1, [r4, #0]
 80028d4:	2203      	movs	r2, #3
 80028d6:	4650      	mov	r0, sl
 80028d8:	f7fd fc92 	bl	8000200 <memchr>
 80028dc:	b138      	cbz	r0, 80028ee <_vfiprintf_r+0x17a>
 80028de:	9b04      	ldr	r3, [sp, #16]
 80028e0:	eba0 000a 	sub.w	r0, r0, sl
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	4082      	lsls	r2, r0
 80028e8:	4313      	orrs	r3, r2
 80028ea:	3401      	adds	r4, #1
 80028ec:	9304      	str	r3, [sp, #16]
 80028ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f2:	4829      	ldr	r0, [pc, #164]	; (8002998 <_vfiprintf_r+0x224>)
 80028f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028f8:	2206      	movs	r2, #6
 80028fa:	f7fd fc81 	bl	8000200 <memchr>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d03f      	beq.n	8002982 <_vfiprintf_r+0x20e>
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <_vfiprintf_r+0x228>)
 8002904:	bb1b      	cbnz	r3, 800294e <_vfiprintf_r+0x1da>
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	3307      	adds	r3, #7
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	3308      	adds	r3, #8
 8002910:	9303      	str	r3, [sp, #12]
 8002912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002914:	443b      	add	r3, r7
 8002916:	9309      	str	r3, [sp, #36]	; 0x24
 8002918:	e768      	b.n	80027ec <_vfiprintf_r+0x78>
 800291a:	fb0c 3202 	mla	r2, ip, r2, r3
 800291e:	460c      	mov	r4, r1
 8002920:	2001      	movs	r0, #1
 8002922:	e7a6      	b.n	8002872 <_vfiprintf_r+0xfe>
 8002924:	2300      	movs	r3, #0
 8002926:	3401      	adds	r4, #1
 8002928:	9305      	str	r3, [sp, #20]
 800292a:	4619      	mov	r1, r3
 800292c:	f04f 0c0a 	mov.w	ip, #10
 8002930:	4620      	mov	r0, r4
 8002932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002936:	3a30      	subs	r2, #48	; 0x30
 8002938:	2a09      	cmp	r2, #9
 800293a:	d903      	bls.n	8002944 <_vfiprintf_r+0x1d0>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0c6      	beq.n	80028ce <_vfiprintf_r+0x15a>
 8002940:	9105      	str	r1, [sp, #20]
 8002942:	e7c4      	b.n	80028ce <_vfiprintf_r+0x15a>
 8002944:	fb0c 2101 	mla	r1, ip, r1, r2
 8002948:	4604      	mov	r4, r0
 800294a:	2301      	movs	r3, #1
 800294c:	e7f0      	b.n	8002930 <_vfiprintf_r+0x1bc>
 800294e:	ab03      	add	r3, sp, #12
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	462a      	mov	r2, r5
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <_vfiprintf_r+0x22c>)
 8002956:	a904      	add	r1, sp, #16
 8002958:	4630      	mov	r0, r6
 800295a:	f3af 8000 	nop.w
 800295e:	4607      	mov	r7, r0
 8002960:	1c78      	adds	r0, r7, #1
 8002962:	d1d6      	bne.n	8002912 <_vfiprintf_r+0x19e>
 8002964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002966:	07d9      	lsls	r1, r3, #31
 8002968:	d405      	bmi.n	8002976 <_vfiprintf_r+0x202>
 800296a:	89ab      	ldrh	r3, [r5, #12]
 800296c:	059a      	lsls	r2, r3, #22
 800296e:	d402      	bmi.n	8002976 <_vfiprintf_r+0x202>
 8002970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002972:	f7ff fd2f 	bl	80023d4 <__retarget_lock_release_recursive>
 8002976:	89ab      	ldrh	r3, [r5, #12]
 8002978:	065b      	lsls	r3, r3, #25
 800297a:	f53f af1d 	bmi.w	80027b8 <_vfiprintf_r+0x44>
 800297e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002980:	e71c      	b.n	80027bc <_vfiprintf_r+0x48>
 8002982:	ab03      	add	r3, sp, #12
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	462a      	mov	r2, r5
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <_vfiprintf_r+0x22c>)
 800298a:	a904      	add	r1, sp, #16
 800298c:	4630      	mov	r0, r6
 800298e:	f000 f879 	bl	8002a84 <_printf_i>
 8002992:	e7e4      	b.n	800295e <_vfiprintf_r+0x1ea>
 8002994:	080032c4 	.word	0x080032c4
 8002998:	080032ce 	.word	0x080032ce
 800299c:	00000000 	.word	0x00000000
 80029a0:	0800274f 	.word	0x0800274f
 80029a4:	080032ca 	.word	0x080032ca

080029a8 <_printf_common>:
 80029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	4616      	mov	r6, r2
 80029ae:	4699      	mov	r9, r3
 80029b0:	688a      	ldr	r2, [r1, #8]
 80029b2:	690b      	ldr	r3, [r1, #16]
 80029b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bfb8      	it	lt
 80029bc:	4613      	movlt	r3, r2
 80029be:	6033      	str	r3, [r6, #0]
 80029c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029c4:	4607      	mov	r7, r0
 80029c6:	460c      	mov	r4, r1
 80029c8:	b10a      	cbz	r2, 80029ce <_printf_common+0x26>
 80029ca:	3301      	adds	r3, #1
 80029cc:	6033      	str	r3, [r6, #0]
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	0699      	lsls	r1, r3, #26
 80029d2:	bf42      	ittt	mi
 80029d4:	6833      	ldrmi	r3, [r6, #0]
 80029d6:	3302      	addmi	r3, #2
 80029d8:	6033      	strmi	r3, [r6, #0]
 80029da:	6825      	ldr	r5, [r4, #0]
 80029dc:	f015 0506 	ands.w	r5, r5, #6
 80029e0:	d106      	bne.n	80029f0 <_printf_common+0x48>
 80029e2:	f104 0a19 	add.w	sl, r4, #25
 80029e6:	68e3      	ldr	r3, [r4, #12]
 80029e8:	6832      	ldr	r2, [r6, #0]
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	42ab      	cmp	r3, r5
 80029ee:	dc26      	bgt.n	8002a3e <_printf_common+0x96>
 80029f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029f4:	1e13      	subs	r3, r2, #0
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	bf18      	it	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	0692      	lsls	r2, r2, #26
 80029fe:	d42b      	bmi.n	8002a58 <_printf_common+0xb0>
 8002a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a04:	4649      	mov	r1, r9
 8002a06:	4638      	mov	r0, r7
 8002a08:	47c0      	blx	r8
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	d01e      	beq.n	8002a4c <_printf_common+0xa4>
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	6922      	ldr	r2, [r4, #16]
 8002a12:	f003 0306 	and.w	r3, r3, #6
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf02      	ittt	eq
 8002a1a:	68e5      	ldreq	r5, [r4, #12]
 8002a1c:	6833      	ldreq	r3, [r6, #0]
 8002a1e:	1aed      	subeq	r5, r5, r3
 8002a20:	68a3      	ldr	r3, [r4, #8]
 8002a22:	bf0c      	ite	eq
 8002a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a28:	2500      	movne	r5, #0
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	bfc4      	itt	gt
 8002a2e:	1a9b      	subgt	r3, r3, r2
 8002a30:	18ed      	addgt	r5, r5, r3
 8002a32:	2600      	movs	r6, #0
 8002a34:	341a      	adds	r4, #26
 8002a36:	42b5      	cmp	r5, r6
 8002a38:	d11a      	bne.n	8002a70 <_printf_common+0xc8>
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	e008      	b.n	8002a50 <_printf_common+0xa8>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	4652      	mov	r2, sl
 8002a42:	4649      	mov	r1, r9
 8002a44:	4638      	mov	r0, r7
 8002a46:	47c0      	blx	r8
 8002a48:	3001      	adds	r0, #1
 8002a4a:	d103      	bne.n	8002a54 <_printf_common+0xac>
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a54:	3501      	adds	r5, #1
 8002a56:	e7c6      	b.n	80029e6 <_printf_common+0x3e>
 8002a58:	18e1      	adds	r1, r4, r3
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	2030      	movs	r0, #48	; 0x30
 8002a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a62:	4422      	add	r2, r4
 8002a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	e7c7      	b.n	8002a00 <_printf_common+0x58>
 8002a70:	2301      	movs	r3, #1
 8002a72:	4622      	mov	r2, r4
 8002a74:	4649      	mov	r1, r9
 8002a76:	4638      	mov	r0, r7
 8002a78:	47c0      	blx	r8
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d0e6      	beq.n	8002a4c <_printf_common+0xa4>
 8002a7e:	3601      	adds	r6, #1
 8002a80:	e7d9      	b.n	8002a36 <_printf_common+0x8e>
	...

08002a84 <_printf_i>:
 8002a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a88:	7e0f      	ldrb	r7, [r1, #24]
 8002a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a8c:	2f78      	cmp	r7, #120	; 0x78
 8002a8e:	4691      	mov	r9, r2
 8002a90:	4680      	mov	r8, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	469a      	mov	sl, r3
 8002a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a9a:	d807      	bhi.n	8002aac <_printf_i+0x28>
 8002a9c:	2f62      	cmp	r7, #98	; 0x62
 8002a9e:	d80a      	bhi.n	8002ab6 <_printf_i+0x32>
 8002aa0:	2f00      	cmp	r7, #0
 8002aa2:	f000 80d4 	beq.w	8002c4e <_printf_i+0x1ca>
 8002aa6:	2f58      	cmp	r7, #88	; 0x58
 8002aa8:	f000 80c0 	beq.w	8002c2c <_printf_i+0x1a8>
 8002aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ab4:	e03a      	b.n	8002b2c <_printf_i+0xa8>
 8002ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002aba:	2b15      	cmp	r3, #21
 8002abc:	d8f6      	bhi.n	8002aac <_printf_i+0x28>
 8002abe:	a101      	add	r1, pc, #4	; (adr r1, 8002ac4 <_printf_i+0x40>)
 8002ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ac4:	08002b1d 	.word	0x08002b1d
 8002ac8:	08002b31 	.word	0x08002b31
 8002acc:	08002aad 	.word	0x08002aad
 8002ad0:	08002aad 	.word	0x08002aad
 8002ad4:	08002aad 	.word	0x08002aad
 8002ad8:	08002aad 	.word	0x08002aad
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002aad 	.word	0x08002aad
 8002ae4:	08002aad 	.word	0x08002aad
 8002ae8:	08002aad 	.word	0x08002aad
 8002aec:	08002aad 	.word	0x08002aad
 8002af0:	08002c35 	.word	0x08002c35
 8002af4:	08002b5d 	.word	0x08002b5d
 8002af8:	08002bef 	.word	0x08002bef
 8002afc:	08002aad 	.word	0x08002aad
 8002b00:	08002aad 	.word	0x08002aad
 8002b04:	08002c57 	.word	0x08002c57
 8002b08:	08002aad 	.word	0x08002aad
 8002b0c:	08002b5d 	.word	0x08002b5d
 8002b10:	08002aad 	.word	0x08002aad
 8002b14:	08002aad 	.word	0x08002aad
 8002b18:	08002bf7 	.word	0x08002bf7
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	1d1a      	adds	r2, r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	602a      	str	r2, [r5, #0]
 8002b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e09f      	b.n	8002c70 <_printf_i+0x1ec>
 8002b30:	6820      	ldr	r0, [r4, #0]
 8002b32:	682b      	ldr	r3, [r5, #0]
 8002b34:	0607      	lsls	r7, r0, #24
 8002b36:	f103 0104 	add.w	r1, r3, #4
 8002b3a:	6029      	str	r1, [r5, #0]
 8002b3c:	d501      	bpl.n	8002b42 <_printf_i+0xbe>
 8002b3e:	681e      	ldr	r6, [r3, #0]
 8002b40:	e003      	b.n	8002b4a <_printf_i+0xc6>
 8002b42:	0646      	lsls	r6, r0, #25
 8002b44:	d5fb      	bpl.n	8002b3e <_printf_i+0xba>
 8002b46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b4a:	2e00      	cmp	r6, #0
 8002b4c:	da03      	bge.n	8002b56 <_printf_i+0xd2>
 8002b4e:	232d      	movs	r3, #45	; 0x2d
 8002b50:	4276      	negs	r6, r6
 8002b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b56:	485a      	ldr	r0, [pc, #360]	; (8002cc0 <_printf_i+0x23c>)
 8002b58:	230a      	movs	r3, #10
 8002b5a:	e012      	b.n	8002b82 <_printf_i+0xfe>
 8002b5c:	682b      	ldr	r3, [r5, #0]
 8002b5e:	6820      	ldr	r0, [r4, #0]
 8002b60:	1d19      	adds	r1, r3, #4
 8002b62:	6029      	str	r1, [r5, #0]
 8002b64:	0605      	lsls	r5, r0, #24
 8002b66:	d501      	bpl.n	8002b6c <_printf_i+0xe8>
 8002b68:	681e      	ldr	r6, [r3, #0]
 8002b6a:	e002      	b.n	8002b72 <_printf_i+0xee>
 8002b6c:	0641      	lsls	r1, r0, #25
 8002b6e:	d5fb      	bpl.n	8002b68 <_printf_i+0xe4>
 8002b70:	881e      	ldrh	r6, [r3, #0]
 8002b72:	4853      	ldr	r0, [pc, #332]	; (8002cc0 <_printf_i+0x23c>)
 8002b74:	2f6f      	cmp	r7, #111	; 0x6f
 8002b76:	bf0c      	ite	eq
 8002b78:	2308      	moveq	r3, #8
 8002b7a:	230a      	movne	r3, #10
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b82:	6865      	ldr	r5, [r4, #4]
 8002b84:	60a5      	str	r5, [r4, #8]
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	bfa2      	ittt	ge
 8002b8a:	6821      	ldrge	r1, [r4, #0]
 8002b8c:	f021 0104 	bicge.w	r1, r1, #4
 8002b90:	6021      	strge	r1, [r4, #0]
 8002b92:	b90e      	cbnz	r6, 8002b98 <_printf_i+0x114>
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	d04b      	beq.n	8002c30 <_printf_i+0x1ac>
 8002b98:	4615      	mov	r5, r2
 8002b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8002ba2:	5dc7      	ldrb	r7, [r0, r7]
 8002ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ba8:	4637      	mov	r7, r6
 8002baa:	42bb      	cmp	r3, r7
 8002bac:	460e      	mov	r6, r1
 8002bae:	d9f4      	bls.n	8002b9a <_printf_i+0x116>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d10b      	bne.n	8002bcc <_printf_i+0x148>
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	07de      	lsls	r6, r3, #31
 8002bb8:	d508      	bpl.n	8002bcc <_printf_i+0x148>
 8002bba:	6923      	ldr	r3, [r4, #16]
 8002bbc:	6861      	ldr	r1, [r4, #4]
 8002bbe:	4299      	cmp	r1, r3
 8002bc0:	bfde      	ittt	le
 8002bc2:	2330      	movle	r3, #48	; 0x30
 8002bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bcc:	1b52      	subs	r2, r2, r5
 8002bce:	6122      	str	r2, [r4, #16]
 8002bd0:	f8cd a000 	str.w	sl, [sp]
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	aa03      	add	r2, sp, #12
 8002bd8:	4621      	mov	r1, r4
 8002bda:	4640      	mov	r0, r8
 8002bdc:	f7ff fee4 	bl	80029a8 <_printf_common>
 8002be0:	3001      	adds	r0, #1
 8002be2:	d14a      	bne.n	8002c7a <_printf_i+0x1f6>
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	b004      	add	sp, #16
 8002bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	f043 0320 	orr.w	r3, r3, #32
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	4833      	ldr	r0, [pc, #204]	; (8002cc4 <_printf_i+0x240>)
 8002bf8:	2778      	movs	r7, #120	; 0x78
 8002bfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	6829      	ldr	r1, [r5, #0]
 8002c02:	061f      	lsls	r7, r3, #24
 8002c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c08:	d402      	bmi.n	8002c10 <_printf_i+0x18c>
 8002c0a:	065f      	lsls	r7, r3, #25
 8002c0c:	bf48      	it	mi
 8002c0e:	b2b6      	uxthmi	r6, r6
 8002c10:	07df      	lsls	r7, r3, #31
 8002c12:	bf48      	it	mi
 8002c14:	f043 0320 	orrmi.w	r3, r3, #32
 8002c18:	6029      	str	r1, [r5, #0]
 8002c1a:	bf48      	it	mi
 8002c1c:	6023      	strmi	r3, [r4, #0]
 8002c1e:	b91e      	cbnz	r6, 8002c28 <_printf_i+0x1a4>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	f023 0320 	bic.w	r3, r3, #32
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	2310      	movs	r3, #16
 8002c2a:	e7a7      	b.n	8002b7c <_printf_i+0xf8>
 8002c2c:	4824      	ldr	r0, [pc, #144]	; (8002cc0 <_printf_i+0x23c>)
 8002c2e:	e7e4      	b.n	8002bfa <_printf_i+0x176>
 8002c30:	4615      	mov	r5, r2
 8002c32:	e7bd      	b.n	8002bb0 <_printf_i+0x12c>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	6826      	ldr	r6, [r4, #0]
 8002c38:	6961      	ldr	r1, [r4, #20]
 8002c3a:	1d18      	adds	r0, r3, #4
 8002c3c:	6028      	str	r0, [r5, #0]
 8002c3e:	0635      	lsls	r5, r6, #24
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	d501      	bpl.n	8002c48 <_printf_i+0x1c4>
 8002c44:	6019      	str	r1, [r3, #0]
 8002c46:	e002      	b.n	8002c4e <_printf_i+0x1ca>
 8002c48:	0670      	lsls	r0, r6, #25
 8002c4a:	d5fb      	bpl.n	8002c44 <_printf_i+0x1c0>
 8002c4c:	8019      	strh	r1, [r3, #0]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	6123      	str	r3, [r4, #16]
 8002c52:	4615      	mov	r5, r2
 8002c54:	e7bc      	b.n	8002bd0 <_printf_i+0x14c>
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	1d1a      	adds	r2, r3, #4
 8002c5a:	602a      	str	r2, [r5, #0]
 8002c5c:	681d      	ldr	r5, [r3, #0]
 8002c5e:	6862      	ldr	r2, [r4, #4]
 8002c60:	2100      	movs	r1, #0
 8002c62:	4628      	mov	r0, r5
 8002c64:	f7fd facc 	bl	8000200 <memchr>
 8002c68:	b108      	cbz	r0, 8002c6e <_printf_i+0x1ea>
 8002c6a:	1b40      	subs	r0, r0, r5
 8002c6c:	6060      	str	r0, [r4, #4]
 8002c6e:	6863      	ldr	r3, [r4, #4]
 8002c70:	6123      	str	r3, [r4, #16]
 8002c72:	2300      	movs	r3, #0
 8002c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c78:	e7aa      	b.n	8002bd0 <_printf_i+0x14c>
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	462a      	mov	r2, r5
 8002c7e:	4649      	mov	r1, r9
 8002c80:	4640      	mov	r0, r8
 8002c82:	47d0      	blx	sl
 8002c84:	3001      	adds	r0, #1
 8002c86:	d0ad      	beq.n	8002be4 <_printf_i+0x160>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	079b      	lsls	r3, r3, #30
 8002c8c:	d413      	bmi.n	8002cb6 <_printf_i+0x232>
 8002c8e:	68e0      	ldr	r0, [r4, #12]
 8002c90:	9b03      	ldr	r3, [sp, #12]
 8002c92:	4298      	cmp	r0, r3
 8002c94:	bfb8      	it	lt
 8002c96:	4618      	movlt	r0, r3
 8002c98:	e7a6      	b.n	8002be8 <_printf_i+0x164>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	4640      	mov	r0, r8
 8002ca2:	47d0      	blx	sl
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d09d      	beq.n	8002be4 <_printf_i+0x160>
 8002ca8:	3501      	adds	r5, #1
 8002caa:	68e3      	ldr	r3, [r4, #12]
 8002cac:	9903      	ldr	r1, [sp, #12]
 8002cae:	1a5b      	subs	r3, r3, r1
 8002cb0:	42ab      	cmp	r3, r5
 8002cb2:	dcf2      	bgt.n	8002c9a <_printf_i+0x216>
 8002cb4:	e7eb      	b.n	8002c8e <_printf_i+0x20a>
 8002cb6:	2500      	movs	r5, #0
 8002cb8:	f104 0619 	add.w	r6, r4, #25
 8002cbc:	e7f5      	b.n	8002caa <_printf_i+0x226>
 8002cbe:	bf00      	nop
 8002cc0:	080032d5 	.word	0x080032d5
 8002cc4:	080032e6 	.word	0x080032e6

08002cc8 <__sflush_r>:
 8002cc8:	898a      	ldrh	r2, [r1, #12]
 8002cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cce:	4605      	mov	r5, r0
 8002cd0:	0710      	lsls	r0, r2, #28
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	d458      	bmi.n	8002d88 <__sflush_r+0xc0>
 8002cd6:	684b      	ldr	r3, [r1, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dc05      	bgt.n	8002ce8 <__sflush_r+0x20>
 8002cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	dc02      	bgt.n	8002ce8 <__sflush_r+0x20>
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cea:	2e00      	cmp	r6, #0
 8002cec:	d0f9      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cf4:	682f      	ldr	r7, [r5, #0]
 8002cf6:	6a21      	ldr	r1, [r4, #32]
 8002cf8:	602b      	str	r3, [r5, #0]
 8002cfa:	d032      	beq.n	8002d62 <__sflush_r+0x9a>
 8002cfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cfe:	89a3      	ldrh	r3, [r4, #12]
 8002d00:	075a      	lsls	r2, r3, #29
 8002d02:	d505      	bpl.n	8002d10 <__sflush_r+0x48>
 8002d04:	6863      	ldr	r3, [r4, #4]
 8002d06:	1ac0      	subs	r0, r0, r3
 8002d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d0a:	b10b      	cbz	r3, 8002d10 <__sflush_r+0x48>
 8002d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d0e:	1ac0      	subs	r0, r0, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	4602      	mov	r2, r0
 8002d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d16:	6a21      	ldr	r1, [r4, #32]
 8002d18:	4628      	mov	r0, r5
 8002d1a:	47b0      	blx	r6
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	d106      	bne.n	8002d30 <__sflush_r+0x68>
 8002d22:	6829      	ldr	r1, [r5, #0]
 8002d24:	291d      	cmp	r1, #29
 8002d26:	d82b      	bhi.n	8002d80 <__sflush_r+0xb8>
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <__sflush_r+0x108>)
 8002d2a:	410a      	asrs	r2, r1
 8002d2c:	07d6      	lsls	r6, r2, #31
 8002d2e:	d427      	bmi.n	8002d80 <__sflush_r+0xb8>
 8002d30:	2200      	movs	r2, #0
 8002d32:	6062      	str	r2, [r4, #4]
 8002d34:	04d9      	lsls	r1, r3, #19
 8002d36:	6922      	ldr	r2, [r4, #16]
 8002d38:	6022      	str	r2, [r4, #0]
 8002d3a:	d504      	bpl.n	8002d46 <__sflush_r+0x7e>
 8002d3c:	1c42      	adds	r2, r0, #1
 8002d3e:	d101      	bne.n	8002d44 <__sflush_r+0x7c>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b903      	cbnz	r3, 8002d46 <__sflush_r+0x7e>
 8002d44:	6560      	str	r0, [r4, #84]	; 0x54
 8002d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d48:	602f      	str	r7, [r5, #0]
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d0c9      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d52:	4299      	cmp	r1, r3
 8002d54:	d002      	beq.n	8002d5c <__sflush_r+0x94>
 8002d56:	4628      	mov	r0, r5
 8002d58:	f7ff fb3e 	bl	80023d8 <_free_r>
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	6360      	str	r0, [r4, #52]	; 0x34
 8002d60:	e7c0      	b.n	8002ce4 <__sflush_r+0x1c>
 8002d62:	2301      	movs	r3, #1
 8002d64:	4628      	mov	r0, r5
 8002d66:	47b0      	blx	r6
 8002d68:	1c41      	adds	r1, r0, #1
 8002d6a:	d1c8      	bne.n	8002cfe <__sflush_r+0x36>
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0c5      	beq.n	8002cfe <__sflush_r+0x36>
 8002d72:	2b1d      	cmp	r3, #29
 8002d74:	d001      	beq.n	8002d7a <__sflush_r+0xb2>
 8002d76:	2b16      	cmp	r3, #22
 8002d78:	d101      	bne.n	8002d7e <__sflush_r+0xb6>
 8002d7a:	602f      	str	r7, [r5, #0]
 8002d7c:	e7b1      	b.n	8002ce2 <__sflush_r+0x1a>
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	e7ad      	b.n	8002ce4 <__sflush_r+0x1c>
 8002d88:	690f      	ldr	r7, [r1, #16]
 8002d8a:	2f00      	cmp	r7, #0
 8002d8c:	d0a9      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002d8e:	0793      	lsls	r3, r2, #30
 8002d90:	680e      	ldr	r6, [r1, #0]
 8002d92:	bf08      	it	eq
 8002d94:	694b      	ldreq	r3, [r1, #20]
 8002d96:	600f      	str	r7, [r1, #0]
 8002d98:	bf18      	it	ne
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	eba6 0807 	sub.w	r8, r6, r7
 8002da0:	608b      	str	r3, [r1, #8]
 8002da2:	f1b8 0f00 	cmp.w	r8, #0
 8002da6:	dd9c      	ble.n	8002ce2 <__sflush_r+0x1a>
 8002da8:	6a21      	ldr	r1, [r4, #32]
 8002daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dac:	4643      	mov	r3, r8
 8002dae:	463a      	mov	r2, r7
 8002db0:	4628      	mov	r0, r5
 8002db2:	47b0      	blx	r6
 8002db4:	2800      	cmp	r0, #0
 8002db6:	dc06      	bgt.n	8002dc6 <__sflush_r+0xfe>
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	e78e      	b.n	8002ce4 <__sflush_r+0x1c>
 8002dc6:	4407      	add	r7, r0
 8002dc8:	eba8 0800 	sub.w	r8, r8, r0
 8002dcc:	e7e9      	b.n	8002da2 <__sflush_r+0xda>
 8002dce:	bf00      	nop
 8002dd0:	dfbffffe 	.word	0xdfbffffe

08002dd4 <_fflush_r>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	690b      	ldr	r3, [r1, #16]
 8002dd8:	4605      	mov	r5, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	b913      	cbnz	r3, 8002de4 <_fflush_r+0x10>
 8002dde:	2500      	movs	r5, #0
 8002de0:	4628      	mov	r0, r5
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	b118      	cbz	r0, 8002dee <_fflush_r+0x1a>
 8002de6:	6a03      	ldr	r3, [r0, #32]
 8002de8:	b90b      	cbnz	r3, 8002dee <_fflush_r+0x1a>
 8002dea:	f7ff f8cf 	bl	8001f8c <__sinit>
 8002dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f3      	beq.n	8002dde <_fflush_r+0xa>
 8002df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002df8:	07d0      	lsls	r0, r2, #31
 8002dfa:	d404      	bmi.n	8002e06 <_fflush_r+0x32>
 8002dfc:	0599      	lsls	r1, r3, #22
 8002dfe:	d402      	bmi.n	8002e06 <_fflush_r+0x32>
 8002e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e02:	f7ff fae6 	bl	80023d2 <__retarget_lock_acquire_recursive>
 8002e06:	4628      	mov	r0, r5
 8002e08:	4621      	mov	r1, r4
 8002e0a:	f7ff ff5d 	bl	8002cc8 <__sflush_r>
 8002e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e10:	07da      	lsls	r2, r3, #31
 8002e12:	4605      	mov	r5, r0
 8002e14:	d4e4      	bmi.n	8002de0 <_fflush_r+0xc>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	059b      	lsls	r3, r3, #22
 8002e1a:	d4e1      	bmi.n	8002de0 <_fflush_r+0xc>
 8002e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e1e:	f7ff fad9 	bl	80023d4 <__retarget_lock_release_recursive>
 8002e22:	e7dd      	b.n	8002de0 <_fflush_r+0xc>

08002e24 <__swhatbuf_r>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	460c      	mov	r4, r1
 8002e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e2c:	2900      	cmp	r1, #0
 8002e2e:	b096      	sub	sp, #88	; 0x58
 8002e30:	4615      	mov	r5, r2
 8002e32:	461e      	mov	r6, r3
 8002e34:	da0d      	bge.n	8002e52 <__swhatbuf_r+0x2e>
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	bf0c      	ite	eq
 8002e42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002e46:	2340      	movne	r3, #64	; 0x40
 8002e48:	2000      	movs	r0, #0
 8002e4a:	6031      	str	r1, [r6, #0]
 8002e4c:	602b      	str	r3, [r5, #0]
 8002e4e:	b016      	add	sp, #88	; 0x58
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	466a      	mov	r2, sp
 8002e54:	f000 f862 	bl	8002f1c <_fstat_r>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	dbec      	blt.n	8002e36 <__swhatbuf_r+0x12>
 8002e5c:	9901      	ldr	r1, [sp, #4]
 8002e5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002e62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002e66:	4259      	negs	r1, r3
 8002e68:	4159      	adcs	r1, r3
 8002e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e6e:	e7eb      	b.n	8002e48 <__swhatbuf_r+0x24>

08002e70 <__smakebuf_r>:
 8002e70:	898b      	ldrh	r3, [r1, #12]
 8002e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e74:	079d      	lsls	r5, r3, #30
 8002e76:	4606      	mov	r6, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	d507      	bpl.n	8002e8c <__smakebuf_r+0x1c>
 8002e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e80:	6023      	str	r3, [r4, #0]
 8002e82:	6123      	str	r3, [r4, #16]
 8002e84:	2301      	movs	r3, #1
 8002e86:	6163      	str	r3, [r4, #20]
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	ab01      	add	r3, sp, #4
 8002e8e:	466a      	mov	r2, sp
 8002e90:	f7ff ffc8 	bl	8002e24 <__swhatbuf_r>
 8002e94:	9900      	ldr	r1, [sp, #0]
 8002e96:	4605      	mov	r5, r0
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f7fe fed3 	bl	8001c44 <_malloc_r>
 8002e9e:	b948      	cbnz	r0, 8002eb4 <__smakebuf_r+0x44>
 8002ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ea4:	059a      	lsls	r2, r3, #22
 8002ea6:	d4ef      	bmi.n	8002e88 <__smakebuf_r+0x18>
 8002ea8:	f023 0303 	bic.w	r3, r3, #3
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	81a3      	strh	r3, [r4, #12]
 8002eb2:	e7e3      	b.n	8002e7c <__smakebuf_r+0xc>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	6020      	str	r0, [r4, #0]
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	9b00      	ldr	r3, [sp, #0]
 8002ec0:	6163      	str	r3, [r4, #20]
 8002ec2:	9b01      	ldr	r3, [sp, #4]
 8002ec4:	6120      	str	r0, [r4, #16]
 8002ec6:	b15b      	cbz	r3, 8002ee0 <__smakebuf_r+0x70>
 8002ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f000 f837 	bl	8002f40 <_isatty_r>
 8002ed2:	b128      	cbz	r0, 8002ee0 <__smakebuf_r+0x70>
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	f023 0303 	bic.w	r3, r3, #3
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	81a3      	strh	r3, [r4, #12]
 8002ee0:	89a3      	ldrh	r3, [r4, #12]
 8002ee2:	431d      	orrs	r5, r3
 8002ee4:	81a5      	strh	r5, [r4, #12]
 8002ee6:	e7cf      	b.n	8002e88 <__smakebuf_r+0x18>

08002ee8 <memmove>:
 8002ee8:	4288      	cmp	r0, r1
 8002eea:	b510      	push	{r4, lr}
 8002eec:	eb01 0402 	add.w	r4, r1, r2
 8002ef0:	d902      	bls.n	8002ef8 <memmove+0x10>
 8002ef2:	4284      	cmp	r4, r0
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	d807      	bhi.n	8002f08 <memmove+0x20>
 8002ef8:	1e43      	subs	r3, r0, #1
 8002efa:	42a1      	cmp	r1, r4
 8002efc:	d008      	beq.n	8002f10 <memmove+0x28>
 8002efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f06:	e7f8      	b.n	8002efa <memmove+0x12>
 8002f08:	4402      	add	r2, r0
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	428a      	cmp	r2, r1
 8002f0e:	d100      	bne.n	8002f12 <memmove+0x2a>
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f1a:	e7f7      	b.n	8002f0c <memmove+0x24>

08002f1c <_fstat_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4d07      	ldr	r5, [pc, #28]	; (8002f3c <_fstat_r+0x20>)
 8002f20:	2300      	movs	r3, #0
 8002f22:	4604      	mov	r4, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	602b      	str	r3, [r5, #0]
 8002f2a:	f7fe fc80 	bl	800182e <_fstat>
 8002f2e:	1c43      	adds	r3, r0, #1
 8002f30:	d102      	bne.n	8002f38 <_fstat_r+0x1c>
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	b103      	cbz	r3, 8002f38 <_fstat_r+0x1c>
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	bd38      	pop	{r3, r4, r5, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200023ac 	.word	0x200023ac

08002f40 <_isatty_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4d06      	ldr	r5, [pc, #24]	; (8002f5c <_isatty_r+0x1c>)
 8002f44:	2300      	movs	r3, #0
 8002f46:	4604      	mov	r4, r0
 8002f48:	4608      	mov	r0, r1
 8002f4a:	602b      	str	r3, [r5, #0]
 8002f4c:	f7fe fc7f 	bl	800184e <_isatty>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d102      	bne.n	8002f5a <_isatty_r+0x1a>
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	b103      	cbz	r3, 8002f5a <_isatty_r+0x1a>
 8002f58:	6023      	str	r3, [r4, #0]
 8002f5a:	bd38      	pop	{r3, r4, r5, pc}
 8002f5c:	200023ac 	.word	0x200023ac

08002f60 <memcpy>:
 8002f60:	440a      	add	r2, r1
 8002f62:	4291      	cmp	r1, r2
 8002f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f68:	d100      	bne.n	8002f6c <memcpy+0xc>
 8002f6a:	4770      	bx	lr
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f76:	4291      	cmp	r1, r2
 8002f78:	d1f9      	bne.n	8002f6e <memcpy+0xe>
 8002f7a:	bd10      	pop	{r4, pc}

08002f7c <_realloc_r>:
 8002f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f80:	4680      	mov	r8, r0
 8002f82:	4614      	mov	r4, r2
 8002f84:	460e      	mov	r6, r1
 8002f86:	b921      	cbnz	r1, 8002f92 <_realloc_r+0x16>
 8002f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	f7fe be59 	b.w	8001c44 <_malloc_r>
 8002f92:	b92a      	cbnz	r2, 8002fa0 <_realloc_r+0x24>
 8002f94:	f7ff fa20 	bl	80023d8 <_free_r>
 8002f98:	4625      	mov	r5, r4
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa0:	f000 f81b 	bl	8002fda <_malloc_usable_size_r>
 8002fa4:	4284      	cmp	r4, r0
 8002fa6:	4607      	mov	r7, r0
 8002fa8:	d802      	bhi.n	8002fb0 <_realloc_r+0x34>
 8002faa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fae:	d812      	bhi.n	8002fd6 <_realloc_r+0x5a>
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	f7fe fe46 	bl	8001c44 <_malloc_r>
 8002fb8:	4605      	mov	r5, r0
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d0ed      	beq.n	8002f9a <_realloc_r+0x1e>
 8002fbe:	42bc      	cmp	r4, r7
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	bf28      	it	cs
 8002fc6:	463a      	movcs	r2, r7
 8002fc8:	f7ff ffca 	bl	8002f60 <memcpy>
 8002fcc:	4631      	mov	r1, r6
 8002fce:	4640      	mov	r0, r8
 8002fd0:	f7ff fa02 	bl	80023d8 <_free_r>
 8002fd4:	e7e1      	b.n	8002f9a <_realloc_r+0x1e>
 8002fd6:	4635      	mov	r5, r6
 8002fd8:	e7df      	b.n	8002f9a <_realloc_r+0x1e>

08002fda <_malloc_usable_size_r>:
 8002fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fde:	1f18      	subs	r0, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bfbc      	itt	lt
 8002fe4:	580b      	ldrlt	r3, [r1, r0]
 8002fe6:	18c0      	addlt	r0, r0, r3
 8002fe8:	4770      	bx	lr
	...

08002fec <_init>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_fini>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr
