
Project1_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08002ca8  08002ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f3c  08002f3c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002f3c  08002f3c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f3c  08002f3c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  20000064  08002fa8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002180  08002fa8  00022180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f6c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007ac  00000000  00000000  00022043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  000227f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000153  00000000  00000000  000229d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002588b  00000000  00000000  00022b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ce1  00000000  00000000  000483b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6eb1  00000000  00000000  0004b097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000011e0  00000000  00000000  00131f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00133128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c90 	.word	0x08002c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08002c90 	.word	0x08002c90

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <clock_init>:

#include "stm32l476xx.h"



void clock_init(void) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <clock_init+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <clock_init+0x68>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000b9c:	bf00      	nop
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <clock_init+0x68>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f9      	beq.n	8000b9e <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <clock_init+0x68>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <clock_init+0x68>)
 8000bb0:	f023 0303 	bic.w	r3, r3, #3
 8000bb4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <clock_init+0x68>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <clock_init+0x68>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 8000bc2:	bf00      	nop
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <clock_init+0x68>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f003 030c 	and.w	r3, r3, #12
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f9      	beq.n	8000bc4 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <clock_init+0x68>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <clock_init+0x68>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <clock_init+0x68>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <clock_init+0x68>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <TIM_Init>:

void TIM_Init(void){
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

    // Enable GPIOA clock
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // Enable GPIOA clock
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <TIM_Init+0x74>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <TIM_Init+0x74>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	; 0x4c
		GPIOA->MODER &= ~GPIO_MODER_MODER0;    // Clear mode bits for pin 0
 8000c08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c12:	f023 0303 	bic.w	r3, r3, #3
 8000c16:	6013      	str	r3, [r2, #0]
		GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0;    // Clear pull-up/pull-down bits for pin 0
 8000c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c22:	f023 0303 	bic.w	r3, r3, #3
 8000c26:	60d3      	str	r3, [r2, #12]
		/* If you want to change it uncomment the below line */
		/* TIM3->ARR = ANY_VALUE_YOU_WANT */
		/* Set the TIM3 timer channel 1 as input */
		/* CC1S bits are writable only when the channel1 is off */
		/* After reset, all the timer channels are turned off */
		TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6193      	str	r3, [r2, #24]
		/* Enable the TIM3 channel1 and keep the default configuration (state after
		reset) for channel polarity */
		TIM2->CCER |= TIM_CCER_CC1E;
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6213      	str	r3, [r2, #32]
		/* Start the timer counter */
		TIM2->CR1 |= TIM_CR1_CEN;
 8000c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6013      	str	r3, [r2, #0]
		/* Clear the Capture event flag for channel 1 */
		TIM2->SR = ~TIM_SR_CC1IF;
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	f06f 0202 	mvn.w	r2, #2
 8000c60:	611a      	str	r2, [r3, #16]
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000

08000c70 <set_timer_base>:
// runs the power on self-test. Returns true if the test passes, false otherwise
//confirm that the GPIO port is seeing pulses at least once in 100 milliseconds
_Bool power_on_self_test( void );

// ask user for expected period, sets timer clock accordingly. Return period or 0 if invalid
int set_timer_base( void ){
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	return lowerLimit;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <set_timer_base+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000000 	.word	0x20000000

08000c88 <printString>:

// Captures 1 line of text from console. Returns nul terminated string when \n is entered
void get_line ( uint8_t *buffer, int max_length );

void printString(char* string){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	n = sprintf((char *)buffer, "%s", string);
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4909      	ldr	r1, [pc, #36]	; (8000cb8 <printString+0x30>)
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <printString+0x34>)
 8000c96:	f000 ffbf 	bl	8001c18 <siprintf>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <printString+0x38>)
 8000c9e:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <printString+0x38>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4905      	ldr	r1, [pc, #20]	; (8000cbc <printString+0x34>)
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <printString+0x3c>)
 8000caa:	f000 fdf6 	bl	800189a <USART_Write>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08002ca8 	.word	0x08002ca8
 8000cbc:	20000084 	.word	0x20000084
 8000cc0:	200000e8 	.word	0x200000e8
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <printChar>:

void printChar(char ch){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	n = sprintf((char *)buffer, "%c", ch);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4909      	ldr	r1, [pc, #36]	; (8000cfc <printChar+0x34>)
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <printChar+0x38>)
 8000cda:	f000 ff9d 	bl	8001c18 <siprintf>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <printChar+0x3c>)
 8000ce2:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <printChar+0x3c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4905      	ldr	r1, [pc, #20]	; (8000d00 <printChar+0x38>)
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <printChar+0x40>)
 8000cee:	f000 fdd4 	bl	800189a <USART_Write>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	08002cac 	.word	0x08002cac
 8000d00:	20000084 	.word	0x20000084
 8000d04:	200000e8 	.word	0x200000e8
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	00000000 	.word	0x00000000

08000d10 <power_on_self_test>:

_Bool power_on_self_test(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	    //POST Pass if it saw a signal
	  while((TIM2->SR & 0x02)){
 8000d16:	bf00      	nop
 8000d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <power_on_self_test+0x1e>
		  pulseDetected = true;
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <power_on_self_test+0xd0>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
		  break;
 8000d2c:	bf00      	nop
	  }
	  	//possibly change for variable clock tbd
		volatile int MS = (int)((TIM2->CNT / 80000000.0) * 1000000.0);
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fbed 	bl	8000514 <__aeabi_ui2d>
 8000d3a:	a325      	add	r3, pc, #148	; (adr r3, 8000dd0 <power_on_self_test+0xc0>)
 8000d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d40:	f7ff fd8c 	bl	800085c <__aeabi_ddiv>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	a322      	add	r3, pc, #136	; (adr r3, 8000dd8 <power_on_self_test+0xc8>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fc59 	bl	8000608 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff feed 	bl	8000b3c <__aeabi_d2iz>
 8000d62:	4603      	mov	r3, r0
 8000d64:	607b      	str	r3, [r7, #4]
		//Checks if it has been 100 ms
		 while(MS < 1000.0){
 8000d66:	e026      	b.n	8000db6 <power_on_self_test+0xa6>
			  if((TIM2->SR & 0x02)){
 8000d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <power_on_self_test+0x6e>
				  pulseDetected = true;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <power_on_self_test+0xd0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
				  break;
 8000d7c:	e01f      	b.n	8000dbe <power_on_self_test+0xae>
			  }
			  MS = (int)((TIM2->CNT / 80000000.0) * 1000000.0);
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fbc5 	bl	8000514 <__aeabi_ui2d>
 8000d8a:	a311      	add	r3, pc, #68	; (adr r3, 8000dd0 <power_on_self_test+0xc0>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f7ff fd64 	bl	800085c <__aeabi_ddiv>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	a30e      	add	r3, pc, #56	; (adr r3, 8000dd8 <power_on_self_test+0xc8>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4619      	mov	r1, r3
 8000dae:	f7ff fec5 	bl	8000b3c <__aeabi_d2iz>
 8000db2:	4603      	mov	r3, r0
 8000db4:	607b      	str	r3, [r7, #4]
		 while(MS < 1000.0){
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dbc:	dbd4      	blt.n	8000d68 <power_on_self_test+0x58>
		  }
		 return pulseDetected;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <power_on_self_test+0xd0>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3

}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	f3af 8000 	nop.w
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	419312d0 	.word	0x419312d0
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	412e8480 	.word	0x412e8480
 8000de0:	20000080 	.word	0x20000080
 8000de4:	00000000 	.word	0x00000000

08000de8 <TIM_Period>:

void TIM_Period(void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
	  //initialize meas array
	  for(int i = 0; i < 1000; i ++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e007      	b.n	8000e04 <TIM_Period+0x1c>
		  meas[i] = 0;
 8000df4:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <TIM_Period+0x140>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i = 0; i < 1000; i ++){
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e0a:	dbf3      	blt.n	8000df4 <TIM_Period+0xc>
	  }
	  int idx = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
	  int PrevMeas = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]

	  while(idx != 1000){
 8000e14:	e074      	b.n	8000f00 <TIM_Period+0x118>
				 if((TIM2->SR & 0x02)){	//We read a signal in
 8000e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d06d      	beq.n	8000f00 <TIM_Period+0x118>
					 //This is our first ever measurement
					 if(PrevMeas == 0){
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d11c      	bne.n	8000e64 <TIM_Period+0x7c>
						 PrevMeas = (int)((TIM2->CCR1 / 80000000.0) * 1000000.0);
 8000e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fb6f 	bl	8000514 <__aeabi_ui2d>
 8000e36:	a338      	add	r3, pc, #224	; (adr r3, 8000f18 <TIM_Period+0x130>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fd0e 	bl	800085c <__aeabi_ddiv>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	a335      	add	r3, pc, #212	; (adr r3, 8000f20 <TIM_Period+0x138>)
 8000e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4e:	f7ff fbdb 	bl	8000608 <__aeabi_dmul>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f7ff fe6f 	bl	8000b3c <__aeabi_d2iz>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	e04d      	b.n	8000f00 <TIM_Period+0x118>
					 }
					 else{
						 //Add the measurement to the array IF it is in bounds
						 int MS = (int)((TIM2->CCR1 / 80000000.0) * 1000000.0) - PrevMeas;
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb52 	bl	8000514 <__aeabi_ui2d>
 8000e70:	a329      	add	r3, pc, #164	; (adr r3, 8000f18 <TIM_Period+0x130>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fcf1 	bl	800085c <__aeabi_ddiv>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	a327      	add	r3, pc, #156	; (adr r3, 8000f20 <TIM_Period+0x138>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff fbbe 	bl	8000608 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fe52 	bl	8000b3c <__aeabi_d2iz>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	603b      	str	r3, [r7, #0]
						 PrevMeas = (int)((TIM2->CCR1 / 80000000.0) * 1000000.0);
 8000ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb34 	bl	8000514 <__aeabi_ui2d>
 8000eac:	a31a      	add	r3, pc, #104	; (adr r3, 8000f18 <TIM_Period+0x130>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fcd3 	bl	800085c <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	a318      	add	r3, pc, #96	; (adr r3, 8000f20 <TIM_Period+0x138>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fba0 	bl	8000608 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fe34 	bl	8000b3c <__aeabi_d2iz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	607b      	str	r3, [r7, #4]
						 if(MS >= lowerLimit && MS <= (lowerLimit + 100)){
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <TIM_Period+0x144>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d30e      	bcc.n	8000f00 <TIM_Period+0x118>
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <TIM_Period+0x144>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d307      	bcc.n	8000f00 <TIM_Period+0x118>
							 meas[idx] = MS;
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <TIM_Period+0x140>)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							 idx ++;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
	  while(idx != 1000){
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f06:	d186      	bne.n	8000e16 <TIM_Period+0x2e>
						 	 }
					 	 }
				 	 }
			  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	f3af 8000 	nop.w
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	419312d0 	.word	0x419312d0
 8000f20:	00000000 	.word	0x00000000
 8000f24:	412e8480 	.word	0x412e8480
 8000f28:	200000ec 	.word	0x200000ec
 8000f2c:	20000000 	.word	0x20000000

08000f30 <swap>:

void swap(int *a, int *b) {
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    int temp = *a;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	601a      	str	r2, [r3, #0]
    *b = temp;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	601a      	str	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <printValues>:

void printValues(int arr[], int n) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < n-1; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e028      	b.n	8000fbe <printValues+0x62>
        for (int j = 0; j < n-i-1; j++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	e01b      	b.n	8000faa <printValues+0x4e>
            if (arr[j] > arr[j+1]) {
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	440b      	add	r3, r1
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dd0b      	ble.n	8000fa4 <printValues+0x48>
                swap(&arr[j], &arr[j+1]);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	18d0      	adds	r0, r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	3301      	adds	r3, #1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff ffc6 	bl	8000f30 <swap>
        for (int j = 0; j < n-i-1; j++) {
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbdc      	blt.n	8000f72 <printValues+0x16>
    for (int i = 0; i < n-1; i++) {
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbd1      	blt.n	8000f6c <printValues+0x10>
            }
        }
    }
    for (int i = 0; i < 1000 ; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e01d      	b.n	800100a <printValues+0xae>
    			  if(arr[i] > 0){
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	dd13      	ble.n	8001004 <printValues+0xa8>
    				  printString((char *) printf("Index %d: %d\n", i, arr[i]));
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <printValues+0xc0>)
 8000fec:	f000 fe02 	bl	8001bf4 <iprintf>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fe48 	bl	8000c88 <printString>
    				  USART_Write(USART2, buffer, n);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4908      	ldr	r1, [pc, #32]	; (8001020 <printValues+0xc4>)
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <printValues+0xc8>)
 8001000:	f000 fc4b 	bl	800189a <USART_Write>
    for (int i = 0; i < 1000 ; i++) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001010:	dbdd      	blt.n	8000fce <printValues+0x72>
    			  }
    	  	  }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08002cb0 	.word	0x08002cb0
 8001020:	20000084 	.word	0x20000084
 8001024:	40004400 	.word	0x40004400

08001028 <Start_Timer>:

void Start_Timer(void) {
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
    // Start the timer by enabling the counter
    TIM2->CR1 |= TIM_CR1_CEN;
 800102c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]
    TIM2->CNT &= 0;
 800103c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <Stop_Timer>:

void Stop_Timer(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
    // Stop the timer by disabling the counter
    TIM2->CR1 &= ~TIM_CR1_CEN;
 8001058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]
    TIM2->CNT &= 0;
 8001068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <TIM_Duty>:

void TIM_Duty(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
	TIM2->PSC = 15;
 8001086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800108a:	220f      	movs	r2, #15
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
	    	  double tFall = 0.0;
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	    	  double tRise = 0.0;
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	    	  double tEnd  = 0.0;
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    	  // Stop TIM2 Channel 1
	    	  TIM2->CCER &= ~TIM_CCER_CC1E;
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6213      	str	r3, [r2, #32]

	    	  // Stop TIM2 Channel 2
	    	  TIM2->CCER &= ~TIM_CCER_CC2E;
 80010c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	6213      	str	r3, [r2, #32]
	    	  TIM2->CNT = 0;
 80010d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
			// Start TIM2 Channel 1
			TIM2->CCER |= TIM_CCER_CC1E;
 80010da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6213      	str	r3, [r2, #32]

			// Start TIM2 Channel 2
			TIM2->CCER |= TIM_CCER_CC2E;
 80010ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f4:	f043 0310 	orr.w	r3, r3, #16
 80010f8:	6213      	str	r3, [r2, #32]
	    	  int ind = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
	    	  while(ind != 1001){
 80010fe:	e0b7      	b.n	8001270 <TIM_Duty+0x1f0>
	    		  if((TIM2->SR & 0x02)){
 8001100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d029      	beq.n	8001162 <TIM_Duty+0xe2>
	    			  if(tRise == 0.0){
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800111a:	f7ff fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00f      	beq.n	8001144 <TIM_Duty+0xc4>
	    				  tRise = TIM2->CCR1 / 80000000.0 ;
 8001124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f9f2 	bl	8000514 <__aeabi_ui2d>
 8001130:	a366      	add	r3, pc, #408	; (adr r3, 80012cc <TIM_Duty+0x24c>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fb91 	bl	800085c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001142:	e00e      	b.n	8001162 <TIM_Duty+0xe2>
	    			  }
	    			  else{
	    				  tEnd = TIM2->CCR1 / 80000000.0 ;
 8001144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9e2 	bl	8000514 <__aeabi_ui2d>
 8001150:	a35e      	add	r3, pc, #376	; (adr r3, 80012cc <TIM_Duty+0x24c>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fb81 	bl	800085c <__aeabi_ddiv>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    			  }
	    		  }
	    		  if((TIM2->SR & 0x04)){
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00f      	beq.n	8001190 <TIM_Duty+0x110>
	    			  	  tFall = (TIM2->CCR2 / 80000000.0) ;
 8001170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9cc 	bl	8000514 <__aeabi_ui2d>
 800117c:	a353      	add	r3, pc, #332	; (adr r3, 80012cc <TIM_Duty+0x24c>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fb6b 	bl	800085c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	    			  	  continue;
 800118e:	e06f      	b.n	8001270 <TIM_Duty+0x1f0>
	    		  }
	    		  //We can calculate the duty cycle
	    		  if((tFall != 0.0) && (tRise != 0.0) && (tEnd != 0.0)){
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800119c:	f7ff fc9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d000      	beq.n	80011a8 <TIM_Duty+0x128>
 80011a6:	e063      	b.n	8001270 <TIM_Duty+0x1f0>
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011b4:	f7ff fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d000      	beq.n	80011c0 <TIM_Duty+0x140>
 80011be:	e057      	b.n	8001270 <TIM_Duty+0x1f0>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011cc:	f7ff fc84 	bl	8000ad8 <__aeabi_dcmpeq>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d000      	beq.n	80011d8 <TIM_Duty+0x158>
 80011d6:	e04b      	b.n	8001270 <TIM_Duty+0x1f0>
	    			  double tOn = tFall - tRise;
 80011d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011e0:	f7ff f85a 	bl	8000298 <__aeabi_dsub>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    			  double tOff = tEnd - tFall;
 80011ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011f4:	f7ff f850 	bl	8000298 <__aeabi_dsub>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	    			  double DutyCyc = tOn / (tOn + tOff);
 8001200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001204:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001208:	f7ff f848 	bl	800029c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001214:	f7ff fb22 	bl	800085c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2300 	strd	r2, r3, [r7]
	    			  //We throw out the first measurement because it hasnt seen the next pulse yet
	    			  if(ind != 0){
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d011      	beq.n	800124a <TIM_Duty+0x1ca>
	    			  dutys[ind] = DutyCyc * 10000;
 8001226:	a32b      	add	r3, pc, #172	; (adr r3, 80012d4 <TIM_Duty+0x254>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001230:	f7ff f9ea 	bl	8000608 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fc7e 	bl	8000b3c <__aeabi_d2iz>
 8001240:	4602      	mov	r2, r0
 8001242:	4921      	ldr	r1, [pc, #132]	; (80012c8 <TIM_Duty+0x248>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    			  }
	    			  //reset the fall and end times
	    			  tFall = 0.0;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	    			  tRise = tEnd;
 8001256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800125a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	    			  tEnd = 0.0;
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	e9c7 2308 	strd	r2, r3, [r7, #32]
					  ind ++;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
	    	  while(ind != 1001){
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001276:	4293      	cmp	r3, r2
 8001278:	f47f af42 	bne.w	8001100 <TIM_Duty+0x80>

	    		  }

	    	  }
	    	  for(int i = 0; i < 1001; i ++){
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	e015      	b.n	80012ae <TIM_Duty+0x22e>
	    		  if(dutys[i] > 10000){
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <TIM_Duty+0x248>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	f242 7210 	movw	r2, #10000	; 0x2710
 800128e:	4293      	cmp	r3, r2
 8001290:	dd0a      	ble.n	80012a8 <TIM_Duty+0x228>
	    			  // Adjust for extremely high freq
	    			  dutys[i] = dutys[i] - 10000;
 8001292:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <TIM_Duty+0x248>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800129e:	3b10      	subs	r3, #16
 80012a0:	4909      	ldr	r1, [pc, #36]	; (80012c8 <TIM_Duty+0x248>)
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	    	  for(int i = 0; i < 1001; i ++){
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	3301      	adds	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012b4:	dde5      	ble.n	8001282 <TIM_Duty+0x202>
	    		  }
	    	  }
	    	  ind = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
}
 80012ba:	bf00      	nop
 80012bc:	3738      	adds	r7, #56	; 0x38
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	2000108c 	.word	0x2000108c
 80012cc:	00000000 	.word	0x00000000
 80012d0:	419312d0 	.word	0x419312d0
 80012d4:	00000000 	.word	0x00000000
 80012d8:	40c38800 	.word	0x40c38800

080012dc <main>:
//////////////////////////////////////////////////////////////
// Embedded code usually consists of 2 components
//  - The init section is run once at startup and initializes all low level drivers and modules
//  - A main loop that runs forever that calls the application tasks repeatedly.
////////////////
int main(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

    // Initialization executed once at startup
//    UART_Init();
    TIM_Init();
 80012e2:	f7ff fc89 	bl	8000bf8 <TIM_Init>
    Stop_Timer();
 80012e6:	f7ff feb5 	bl	8001054 <Stop_Timer>
	USART2_Init(9600);			// Initialize USART for terminal
 80012ea:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80012ee:	f000 f9e9 	bl	80016c4 <USART2_Init>
	clock_init();				// Initialize clock
 80012f2:	f7ff fc4b 	bl	8000b8c <clock_init>
    while( power_on_self_test() == false)
 80012f6:	bf00      	nop
 80012f8:	f7ff fd0a 	bl	8000d10 <power_on_self_test>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f083 0301 	eor.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f7      	bne.n	80012f8 <main+0x1c>
    // Main loop runs forever
    while(1)
    {
    	// 1. Print “Enter expected period or <CR> if no change”. Wait for user response

    	printString("\r\nWould you like to use the default limits:\r\nLower: 450\r\nUpper: 550\r\n");
 8001308:	4874      	ldr	r0, [pc, #464]	; (80014dc <main+0x200>)
 800130a:	f7ff fcbd 	bl	8000c88 <printString>
    	char rx = USART_Read(USART2);
 800130e:	4874      	ldr	r0, [pc, #464]	; (80014e0 <main+0x204>)
 8001310:	f000 faae 	bl	8001870 <USART_Read>
 8001314:	4603      	mov	r3, r0
 8001316:	75fb      	strb	r3, [r7, #23]
    	int i = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]

    	while (rx != '\r'){										// loop waits for the return command before processing input
 800131c:	e010      	b.n	8001340 <main+0x64>
    		printChar(rx);
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fcd1 	bl	8000cc8 <printChar>
			command[i] = rx;									// adds input to buffer to process command
 8001326:	1d3a      	adds	r2, r7, #4
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4413      	add	r3, r2
 800132c:	7dfa      	ldrb	r2, [r7, #23]
 800132e:	701a      	strb	r2, [r3, #0]
			i++;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	3301      	adds	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
			rx = USART_Read(USART2);							// reads next character
 8001336:	486a      	ldr	r0, [pc, #424]	; (80014e0 <main+0x204>)
 8001338:	f000 fa9a 	bl	8001870 <USART_Read>
 800133c:	4603      	mov	r3, r0
 800133e:	75fb      	strb	r3, [r7, #23]
    	while (rx != '\r'){										// loop waits for the return command before processing input
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b0d      	cmp	r3, #13
 8001344:	d1eb      	bne.n	800131e <main+0x42>
    	}
    	command[i] = '\0';										// terminates inputed command
 8001346:	1d3a      	adds	r2, r7, #4
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4413      	add	r3, r2
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]

    	for (int index = 0; index < i; index++){
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e01a      	b.n	800138c <main+0xb0>
    		command[index] = tolower(command[index]);			// makes command case insensitive
 8001356:	1d3a      	adds	r2, r7, #4
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	72fb      	strb	r3, [r7, #11]
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	3301      	adds	r3, #1
 8001364:	4a5f      	ldr	r2, [pc, #380]	; (80014e4 <main+0x208>)
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <main+0x9c>
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	3320      	adds	r3, #32
 8001376:	e000      	b.n	800137a <main+0x9e>
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	b2d9      	uxtb	r1, r3
 800137c:	1d3a      	adds	r2, r7, #4
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	460a      	mov	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
    	for (int index = 0; index < i; index++){
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbe0      	blt.n	8001356 <main+0x7a>
    	}


    	if (strcmp("yes", (char *) command)){					// checks for custom limits
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4853      	ldr	r0, [pc, #332]	; (80014e8 <main+0x20c>)
 800139a:	f7fe ff19 	bl	80001d0 <strcmp>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d07c      	beq.n	800149e <main+0x1c2>
    		printString("\r\nWhat would you like the lower limit to be? (must be between 50 and 950): ");
 80013a4:	4851      	ldr	r0, [pc, #324]	; (80014ec <main+0x210>)
 80013a6:	f7ff fc6f 	bl	8000c88 <printString>
    		rx = USART_Read(USART2);
 80013aa:	484d      	ldr	r0, [pc, #308]	; (80014e0 <main+0x204>)
 80013ac:	f000 fa60 	bl	8001870 <USART_Read>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]
    		i = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]

    		while (rx != '\r'){									// loop waits for the return command before processing input
 80013b8:	e010      	b.n	80013dc <main+0x100>
				printChar(rx);
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fc83 	bl	8000cc8 <printChar>
				command[i] = rx;								// adds input to buffer to process input limit
 80013c2:	1d3a      	adds	r2, r7, #4
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4413      	add	r3, r2
 80013c8:	7dfa      	ldrb	r2, [r7, #23]
 80013ca:	701a      	strb	r2, [r3, #0]
				i++;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	3301      	adds	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
				rx = USART_Read(USART2);						// reads next character
 80013d2:	4843      	ldr	r0, [pc, #268]	; (80014e0 <main+0x204>)
 80013d4:	f000 fa4c 	bl	8001870 <USART_Read>
 80013d8:	4603      	mov	r3, r0
 80013da:	75fb      	strb	r3, [r7, #23]
    		while (rx != '\r'){									// loop waits for the return command before processing input
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b0d      	cmp	r3, #13
 80013e0:	d1eb      	bne.n	80013ba <main+0xde>
    		}
    		command[i] = '\0';									// terminates inputed string for processing
 80013e2:	1d3a      	adds	r2, r7, #4
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4413      	add	r3, r2
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
    		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 faab 	bl	800194e <atoi>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <main+0x214>)
 80013fe:	601a      	str	r2, [r3, #0]

			while (lowerLimit < 50 || lowerLimit > 950){
 8001400:	e02b      	b.n	800145a <main+0x17e>

				printString("\r\nLower limit must be between 50 and 950. Please enter a new limit: ");
 8001402:	483c      	ldr	r0, [pc, #240]	; (80014f4 <main+0x218>)
 8001404:	f7ff fc40 	bl	8000c88 <printString>
				rx = USART_Read(USART2);
 8001408:	4835      	ldr	r0, [pc, #212]	; (80014e0 <main+0x204>)
 800140a:	f000 fa31 	bl	8001870 <USART_Read>
 800140e:	4603      	mov	r3, r0
 8001410:	75fb      	strb	r3, [r7, #23]

				while (rx != '\r'){									// loop waits for the return command before processing input
 8001412:	e010      	b.n	8001436 <main+0x15a>
					printChar(rx);
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc56 	bl	8000cc8 <printChar>
					command[i] = rx;								// adds input to buffer to process input limit
 800141c:	1d3a      	adds	r2, r7, #4
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4413      	add	r3, r2
 8001422:	7dfa      	ldrb	r2, [r7, #23]
 8001424:	701a      	strb	r2, [r3, #0]
					i++;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3301      	adds	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
					rx = USART_Read(USART2);						// reads next character
 800142c:	482c      	ldr	r0, [pc, #176]	; (80014e0 <main+0x204>)
 800142e:	f000 fa1f 	bl	8001870 <USART_Read>
 8001432:	4603      	mov	r3, r0
 8001434:	75fb      	strb	r3, [r7, #23]
				while (rx != '\r'){									// loop waits for the return command before processing input
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	2b0d      	cmp	r3, #13
 800143a:	d1eb      	bne.n	8001414 <main+0x138>
				}

		   		command[i] = '\0';									// terminates inputed string for processing
 800143c:	1d3a      	adds	r2, r7, #4
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
		   		i = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
		   		lowerLimit = atoi((char *)command);					// converts string of int into int for use as limit
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fa7e 	bl	800194e <atoi>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <main+0x214>)
 8001458:	601a      	str	r2, [r3, #0]
			while (lowerLimit < 50 || lowerLimit > 950){
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <main+0x214>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b31      	cmp	r3, #49	; 0x31
 8001460:	d9cf      	bls.n	8001402 <main+0x126>
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <main+0x214>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f240 32b6 	movw	r2, #950	; 0x3b6
 800146a:	4293      	cmp	r3, r2
 800146c:	d8c9      	bhi.n	8001402 <main+0x126>
			}
			upperLimit = lowerLimit + 100;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <main+0x214>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3364      	adds	r3, #100	; 0x64
 8001474:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <main+0x21c>)
 8001476:	6013      	str	r3, [r2, #0]
			printString((char *) printf("\r\nLower limit: %lu, Upper limit: %lu", lowerLimit, upperLimit));
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <main+0x214>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <main+0x21c>)
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	481e      	ldr	r0, [pc, #120]	; (80014fc <main+0x220>)
 8001484:	f000 fbb6 	bl	8001bf4 <iprintf>
 8001488:	4603      	mov	r3, r0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fbfc 	bl	8000c88 <printString>
			USART_Write(USART2, buffer, n);
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <main+0x224>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	491b      	ldr	r1, [pc, #108]	; (8001504 <main+0x228>)
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <main+0x204>)
 800149a:	f000 f9fe 	bl	800189a <USART_Write>
    	}
    	printString("\r\n");					// starts a new line (since input may have been last thing to print)
 800149e:	481a      	ldr	r0, [pc, #104]	; (8001508 <main+0x22c>)
 80014a0:	f7ff fbf2 	bl	8000c88 <printString>

    	printString("Limits are currently set, program can run to calculate\r\n\r\n");
 80014a4:	4819      	ldr	r0, [pc, #100]	; (800150c <main+0x230>)
 80014a6:	f7ff fbef 	bl	8000c88 <printString>

    	// 2. if yes, read new period then set up timer clock

        while( set_timer_base() == 0 )
 80014aa:	bf00      	nop
 80014ac:	f7ff fbe0 	bl	8000c70 <set_timer_base>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0fa      	beq.n	80014ac <main+0x1d0>
          ;

        // 3. read 100 pulses
        Start_Timer();
 80014b6:	f7ff fdb7 	bl	8001028 <Start_Timer>
    	TIM_Period();
 80014ba:	f7ff fc95 	bl	8000de8 <TIM_Period>
    	printValues(meas, 1000);
 80014be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014c2:	4813      	ldr	r0, [pc, #76]	; (8001510 <main+0x234>)
 80014c4:	f7ff fd4a 	bl	8000f5c <printValues>
    	Start_Timer();
 80014c8:	f7ff fdae 	bl	8001028 <Start_Timer>
    	TIM_Duty();
 80014cc:	f7ff fdd8 	bl	8001080 <TIM_Duty>
    	printValues(dutys,1001);
 80014d0:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <main+0x238>)
 80014d6:	f7ff fd41 	bl	8000f5c <printValues>
    {
 80014da:	e715      	b.n	8001308 <main+0x2c>
 80014dc:	08002cc0 	.word	0x08002cc0
 80014e0:	40004400 	.word	0x40004400
 80014e4:	08002e07 	.word	0x08002e07
 80014e8:	08002d08 	.word	0x08002d08
 80014ec:	08002d0c 	.word	0x08002d0c
 80014f0:	20000000 	.word	0x20000000
 80014f4:	08002d58 	.word	0x08002d58
 80014f8:	20000004 	.word	0x20000004
 80014fc:	08002da0 	.word	0x08002da0
 8001500:	200000e8 	.word	0x200000e8
 8001504:	20000084 	.word	0x20000084
 8001508:	08002dc8 	.word	0x08002dc8
 800150c:	08002dcc 	.word	0x08002dcc
 8001510:	200000ec 	.word	0x200000ec
 8001514:	2000108c 	.word	0x2000108c

08001518 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
  }

  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
  }
  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b2:	605a      	str	r2, [r3, #4]
  return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_isatty>:

int _isatty(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f000 fbaa 	bl	8001d7c <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20018000 	.word	0x20018000
 8001654:	00000400 	.word	0x00000400
 8001658:	20002030 	.word	0x20002030
 800165c:	20002180 	.word	0x20002180

08001660 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <SystemInit+0x5c>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <SystemInit+0x5c>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <SystemInit+0x60>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <SystemInit+0x60>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <SystemInit+0x60>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <SystemInit+0x60>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <SystemInit+0x60>)
 800168c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001690:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001694:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <SystemInit+0x60>)
 8001698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <SystemInit+0x60>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <SystemInit+0x60>)
 80016a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SystemInit+0x60>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	40021000 	.word	0x40021000

080016c4 <USART2_Init>:
// UART Ports:
// ===================================================
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	/* Init the low level hardware : GPIO, CLOCK */
	uint32_t tmpreg;
	(void) tmpreg;	/// avoid compiler warning

	// enable USART2 CLK
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80016cc:	4b65      	ldr	r3, [pc, #404]	; (8001864 <USART2_Init+0x1a0>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	4a64      	ldr	r2, [pc, #400]	; (8001864 <USART2_Init+0x1a0>)
 80016d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d6:	6593      	str	r3, [r2, #88]	; 0x58
	tmpreg = RCC->APB1ENR1 & RCC_APB1ENR1_USART2EN;	// Delay after an RCC peripheral clock enabling
 80016d8:	4b62      	ldr	r3, [pc, #392]	; (8001864 <USART2_Init+0x1a0>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	617b      	str	r3, [r7, #20]

	// enable GPIOA CLK
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80016e2:	4b60      	ldr	r3, [pc, #384]	; (8001864 <USART2_Init+0x1a0>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a5f      	ldr	r2, [pc, #380]	; (8001864 <USART2_Init+0x1a0>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
	tmpreg = RCC->AHB2ENR & RCC_AHB2ENR_GPIOAEN;		// Delay after an RCC peripheral clock enabling
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <USART2_Init+0x1a0>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	617b      	str	r3, [r7, #20]

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 80016f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001706:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 8001708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001712:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001716:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 8001718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001722:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001726:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 8001728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001732:	f023 030c 	bic.w	r3, r3, #12
 8001736:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 8001738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001746:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 8001748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001756:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 8001758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001766:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 8001768:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001772:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001776:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 8001778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001786:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 8001788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001792:	f043 0320 	orr.w	r3, r3, #32
 8001796:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 8001798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a6:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <USART2_Init+0x1a4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2e      	ldr	r2, [pc, #184]	; (8001868 <USART2_Init+0x1a4>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <USART2_Init+0x1a4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <USART2_Init+0x1a4>)
 80017ba:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 80017be:	f023 031c 	bic.w	r3, r3, #28
 80017c2:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <USART2_Init+0x1a4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a27      	ldr	r2, [pc, #156]	; (8001868 <USART2_Init+0x1a4>)
 80017ca:	f043 030c 	orr.w	r3, r3, #12
 80017ce:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <USART2_Init+0x1a4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a24      	ldr	r2, [pc, #144]	; (8001868 <USART2_Init+0x1a4>)
 80017d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017da:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <USART2_Init+0x1a4>)
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <USART2_Init+0x1a4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <USART2_Init+0x1a4>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <USART2_Init+0x1a4>)
 80017ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80017ee:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <USART2_Init+0x1a4>)
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <USART2_Init+0x1a4>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <USART2_Init+0x1a8>)
 80017fa:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	085a      	lsrs	r2, r3, #1
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	441a      	add	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	60fb      	str	r3, [r7, #12]
	USART2->BRR = usartdiv;
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <USART2_Init+0x1a4>)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <USART2_Init+0x1a4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <USART2_Init+0x1a4>)
 800181a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800181e:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <USART2_Init+0x1a4>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a10      	ldr	r2, [pc, #64]	; (8001868 <USART2_Init+0x1a4>)
 8001826:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800182a:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <USART2_Init+0x1a4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <USART2_Init+0x1a4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8001838:	bf00      	nop
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <USART2_Init+0x1a4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f9      	beq.n	800183a <USART2_Init+0x176>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8001846:	bf00      	nop
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <USART2_Init+0x1a4>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f9      	beq.n	8001848 <USART2_Init+0x184>
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40004400 	.word	0x40004400
 800186c:	00f42400 	.word	0x00f42400

08001870 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8001878:	bf00      	nop
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f9      	beq.n	800187a <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800188a:	b29b      	uxth	r3, r3
 800188c:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800189a:	b480      	push	{r7}
 800189c:	b087      	sub	sp, #28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e010      	b.n	80018ce <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 80018ac:	bf00      	nop
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f9      	beq.n	80018ae <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d8ea      	bhi.n	80018ac <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 80018d6:	bf00      	nop
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f9      	beq.n	80018d8 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	61da      	str	r2, [r3, #28]
}   
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001900:	f7ff feae 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <LoopForever+0x6>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	; (800193c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <LoopForever+0xe>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	; (8001948 <LoopForever+0x16>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f000 fa2d 	bl	8001d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192e:	f7ff fcd5 	bl	80012dc <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001934:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001940:	08002f44 	.word	0x08002f44
  ldr r2, =_sbss
 8001944:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001948:	20002180 	.word	0x20002180

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>

0800194e <atoi>:
 800194e:	220a      	movs	r2, #10
 8001950:	2100      	movs	r1, #0
 8001952:	f000 b883 	b.w	8001a5c <strtol>
	...

08001958 <_strtol_l.constprop.0>:
 8001958:	2b01      	cmp	r3, #1
 800195a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800195e:	d001      	beq.n	8001964 <_strtol_l.constprop.0+0xc>
 8001960:	2b24      	cmp	r3, #36	; 0x24
 8001962:	d906      	bls.n	8001972 <_strtol_l.constprop.0+0x1a>
 8001964:	f000 fa0a 	bl	8001d7c <__errno>
 8001968:	2316      	movs	r3, #22
 800196a:	6003      	str	r3, [r0, #0]
 800196c:	2000      	movs	r0, #0
 800196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001972:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001a58 <_strtol_l.constprop.0+0x100>
 8001976:	460d      	mov	r5, r1
 8001978:	462e      	mov	r6, r5
 800197a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800197e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8001982:	f017 0708 	ands.w	r7, r7, #8
 8001986:	d1f7      	bne.n	8001978 <_strtol_l.constprop.0+0x20>
 8001988:	2c2d      	cmp	r4, #45	; 0x2d
 800198a:	d132      	bne.n	80019f2 <_strtol_l.constprop.0+0x9a>
 800198c:	782c      	ldrb	r4, [r5, #0]
 800198e:	2701      	movs	r7, #1
 8001990:	1cb5      	adds	r5, r6, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d05b      	beq.n	8001a4e <_strtol_l.constprop.0+0xf6>
 8001996:	2b10      	cmp	r3, #16
 8001998:	d109      	bne.n	80019ae <_strtol_l.constprop.0+0x56>
 800199a:	2c30      	cmp	r4, #48	; 0x30
 800199c:	d107      	bne.n	80019ae <_strtol_l.constprop.0+0x56>
 800199e:	782c      	ldrb	r4, [r5, #0]
 80019a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80019a4:	2c58      	cmp	r4, #88	; 0x58
 80019a6:	d14d      	bne.n	8001a44 <_strtol_l.constprop.0+0xec>
 80019a8:	786c      	ldrb	r4, [r5, #1]
 80019aa:	2310      	movs	r3, #16
 80019ac:	3502      	adds	r5, #2
 80019ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80019b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80019b6:	f04f 0e00 	mov.w	lr, #0
 80019ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80019be:	4676      	mov	r6, lr
 80019c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80019c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80019c8:	f1bc 0f09 	cmp.w	ip, #9
 80019cc:	d816      	bhi.n	80019fc <_strtol_l.constprop.0+0xa4>
 80019ce:	4664      	mov	r4, ip
 80019d0:	42a3      	cmp	r3, r4
 80019d2:	dd24      	ble.n	8001a1e <_strtol_l.constprop.0+0xc6>
 80019d4:	f1be 3fff 	cmp.w	lr, #4294967295
 80019d8:	d008      	beq.n	80019ec <_strtol_l.constprop.0+0x94>
 80019da:	45b1      	cmp	r9, r6
 80019dc:	d31c      	bcc.n	8001a18 <_strtol_l.constprop.0+0xc0>
 80019de:	d101      	bne.n	80019e4 <_strtol_l.constprop.0+0x8c>
 80019e0:	45a2      	cmp	sl, r4
 80019e2:	db19      	blt.n	8001a18 <_strtol_l.constprop.0+0xc0>
 80019e4:	fb06 4603 	mla	r6, r6, r3, r4
 80019e8:	f04f 0e01 	mov.w	lr, #1
 80019ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80019f0:	e7e8      	b.n	80019c4 <_strtol_l.constprop.0+0x6c>
 80019f2:	2c2b      	cmp	r4, #43	; 0x2b
 80019f4:	bf04      	itt	eq
 80019f6:	782c      	ldrbeq	r4, [r5, #0]
 80019f8:	1cb5      	addeq	r5, r6, #2
 80019fa:	e7ca      	b.n	8001992 <_strtol_l.constprop.0+0x3a>
 80019fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001a00:	f1bc 0f19 	cmp.w	ip, #25
 8001a04:	d801      	bhi.n	8001a0a <_strtol_l.constprop.0+0xb2>
 8001a06:	3c37      	subs	r4, #55	; 0x37
 8001a08:	e7e2      	b.n	80019d0 <_strtol_l.constprop.0+0x78>
 8001a0a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001a0e:	f1bc 0f19 	cmp.w	ip, #25
 8001a12:	d804      	bhi.n	8001a1e <_strtol_l.constprop.0+0xc6>
 8001a14:	3c57      	subs	r4, #87	; 0x57
 8001a16:	e7db      	b.n	80019d0 <_strtol_l.constprop.0+0x78>
 8001a18:	f04f 3eff 	mov.w	lr, #4294967295
 8001a1c:	e7e6      	b.n	80019ec <_strtol_l.constprop.0+0x94>
 8001a1e:	f1be 3fff 	cmp.w	lr, #4294967295
 8001a22:	d105      	bne.n	8001a30 <_strtol_l.constprop.0+0xd8>
 8001a24:	2322      	movs	r3, #34	; 0x22
 8001a26:	6003      	str	r3, [r0, #0]
 8001a28:	4646      	mov	r6, r8
 8001a2a:	b942      	cbnz	r2, 8001a3e <_strtol_l.constprop.0+0xe6>
 8001a2c:	4630      	mov	r0, r6
 8001a2e:	e79e      	b.n	800196e <_strtol_l.constprop.0+0x16>
 8001a30:	b107      	cbz	r7, 8001a34 <_strtol_l.constprop.0+0xdc>
 8001a32:	4276      	negs	r6, r6
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	d0f9      	beq.n	8001a2c <_strtol_l.constprop.0+0xd4>
 8001a38:	f1be 0f00 	cmp.w	lr, #0
 8001a3c:	d000      	beq.n	8001a40 <_strtol_l.constprop.0+0xe8>
 8001a3e:	1e69      	subs	r1, r5, #1
 8001a40:	6011      	str	r1, [r2, #0]
 8001a42:	e7f3      	b.n	8001a2c <_strtol_l.constprop.0+0xd4>
 8001a44:	2430      	movs	r4, #48	; 0x30
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1b1      	bne.n	80019ae <_strtol_l.constprop.0+0x56>
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	e7af      	b.n	80019ae <_strtol_l.constprop.0+0x56>
 8001a4e:	2c30      	cmp	r4, #48	; 0x30
 8001a50:	d0a5      	beq.n	800199e <_strtol_l.constprop.0+0x46>
 8001a52:	230a      	movs	r3, #10
 8001a54:	e7ab      	b.n	80019ae <_strtol_l.constprop.0+0x56>
 8001a56:	bf00      	nop
 8001a58:	08002e08 	.word	0x08002e08

08001a5c <strtol>:
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	460a      	mov	r2, r1
 8001a60:	4601      	mov	r1, r0
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <strtol+0x10>)
 8001a64:	6800      	ldr	r0, [r0, #0]
 8001a66:	f7ff bf77 	b.w	8001958 <_strtol_l.constprop.0>
 8001a6a:	bf00      	nop
 8001a6c:	20000060 	.word	0x20000060

08001a70 <std>:
 8001a70:	2300      	movs	r3, #0
 8001a72:	b510      	push	{r4, lr}
 8001a74:	4604      	mov	r4, r0
 8001a76:	e9c0 3300 	strd	r3, r3, [r0]
 8001a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a7e:	6083      	str	r3, [r0, #8]
 8001a80:	8181      	strh	r1, [r0, #12]
 8001a82:	6643      	str	r3, [r0, #100]	; 0x64
 8001a84:	81c2      	strh	r2, [r0, #14]
 8001a86:	6183      	str	r3, [r0, #24]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	305c      	adds	r0, #92	; 0x5c
 8001a8e:	f000 f926 	bl	8001cde <memset>
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <std+0x58>)
 8001a94:	6263      	str	r3, [r4, #36]	; 0x24
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <std+0x5c>)
 8001a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <std+0x60>)
 8001a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <std+0x64>)
 8001aa0:	6323      	str	r3, [r4, #48]	; 0x30
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <std+0x68>)
 8001aa4:	6224      	str	r4, [r4, #32]
 8001aa6:	429c      	cmp	r4, r3
 8001aa8:	d006      	beq.n	8001ab8 <std+0x48>
 8001aaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001aae:	4294      	cmp	r4, r2
 8001ab0:	d002      	beq.n	8001ab8 <std+0x48>
 8001ab2:	33d0      	adds	r3, #208	; 0xd0
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d105      	bne.n	8001ac4 <std+0x54>
 8001ab8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac0:	f000 b986 	b.w	8001dd0 <__retarget_lock_init_recursive>
 8001ac4:	bd10      	pop	{r4, pc}
 8001ac6:	bf00      	nop
 8001ac8:	08001c59 	.word	0x08001c59
 8001acc:	08001c7b 	.word	0x08001c7b
 8001ad0:	08001cb3 	.word	0x08001cb3
 8001ad4:	08001cd7 	.word	0x08001cd7
 8001ad8:	20002034 	.word	0x20002034

08001adc <stdio_exit_handler>:
 8001adc:	4a02      	ldr	r2, [pc, #8]	; (8001ae8 <stdio_exit_handler+0xc>)
 8001ade:	4903      	ldr	r1, [pc, #12]	; (8001aec <stdio_exit_handler+0x10>)
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <stdio_exit_handler+0x14>)
 8001ae2:	f000 b869 	b.w	8001bb8 <_fwalk_sglue>
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	0800292d 	.word	0x0800292d
 8001af0:	20000014 	.word	0x20000014

08001af4 <cleanup_stdio>:
 8001af4:	6841      	ldr	r1, [r0, #4]
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <cleanup_stdio+0x34>)
 8001af8:	4299      	cmp	r1, r3
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	d001      	beq.n	8001b04 <cleanup_stdio+0x10>
 8001b00:	f000 ff14 	bl	800292c <_fflush_r>
 8001b04:	68a1      	ldr	r1, [r4, #8]
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <cleanup_stdio+0x38>)
 8001b08:	4299      	cmp	r1, r3
 8001b0a:	d002      	beq.n	8001b12 <cleanup_stdio+0x1e>
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f000 ff0d 	bl	800292c <_fflush_r>
 8001b12:	68e1      	ldr	r1, [r4, #12]
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <cleanup_stdio+0x3c>)
 8001b16:	4299      	cmp	r1, r3
 8001b18:	d004      	beq.n	8001b24 <cleanup_stdio+0x30>
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b20:	f000 bf04 	b.w	800292c <_fflush_r>
 8001b24:	bd10      	pop	{r4, pc}
 8001b26:	bf00      	nop
 8001b28:	20002034 	.word	0x20002034
 8001b2c:	2000209c 	.word	0x2000209c
 8001b30:	20002104 	.word	0x20002104

08001b34 <global_stdio_init.part.0>:
 8001b34:	b510      	push	{r4, lr}
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <global_stdio_init.part.0+0x30>)
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <global_stdio_init.part.0+0x34>)
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <global_stdio_init.part.0+0x38>)
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	4620      	mov	r0, r4
 8001b40:	2200      	movs	r2, #0
 8001b42:	2104      	movs	r1, #4
 8001b44:	f7ff ff94 	bl	8001a70 <std>
 8001b48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2109      	movs	r1, #9
 8001b50:	f7ff ff8e 	bl	8001a70 <std>
 8001b54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001b58:	2202      	movs	r2, #2
 8001b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b5e:	2112      	movs	r1, #18
 8001b60:	f7ff bf86 	b.w	8001a70 <std>
 8001b64:	2000216c 	.word	0x2000216c
 8001b68:	20002034 	.word	0x20002034
 8001b6c:	08001add 	.word	0x08001add

08001b70 <__sfp_lock_acquire>:
 8001b70:	4801      	ldr	r0, [pc, #4]	; (8001b78 <__sfp_lock_acquire+0x8>)
 8001b72:	f000 b92e 	b.w	8001dd2 <__retarget_lock_acquire_recursive>
 8001b76:	bf00      	nop
 8001b78:	20002175 	.word	0x20002175

08001b7c <__sfp_lock_release>:
 8001b7c:	4801      	ldr	r0, [pc, #4]	; (8001b84 <__sfp_lock_release+0x8>)
 8001b7e:	f000 b929 	b.w	8001dd4 <__retarget_lock_release_recursive>
 8001b82:	bf00      	nop
 8001b84:	20002175 	.word	0x20002175

08001b88 <__sinit>:
 8001b88:	b510      	push	{r4, lr}
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	f7ff fff0 	bl	8001b70 <__sfp_lock_acquire>
 8001b90:	6a23      	ldr	r3, [r4, #32]
 8001b92:	b11b      	cbz	r3, 8001b9c <__sinit+0x14>
 8001b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b98:	f7ff bff0 	b.w	8001b7c <__sfp_lock_release>
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__sinit+0x28>)
 8001b9e:	6223      	str	r3, [r4, #32]
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__sinit+0x2c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f5      	bne.n	8001b94 <__sinit+0xc>
 8001ba8:	f7ff ffc4 	bl	8001b34 <global_stdio_init.part.0>
 8001bac:	e7f2      	b.n	8001b94 <__sinit+0xc>
 8001bae:	bf00      	nop
 8001bb0:	08001af5 	.word	0x08001af5
 8001bb4:	2000216c 	.word	0x2000216c

08001bb8 <_fwalk_sglue>:
 8001bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bbc:	4607      	mov	r7, r0
 8001bbe:	4688      	mov	r8, r1
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	2600      	movs	r6, #0
 8001bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8001bcc:	d505      	bpl.n	8001bda <_fwalk_sglue+0x22>
 8001bce:	6824      	ldr	r4, [r4, #0]
 8001bd0:	2c00      	cmp	r4, #0
 8001bd2:	d1f7      	bne.n	8001bc4 <_fwalk_sglue+0xc>
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bda:	89ab      	ldrh	r3, [r5, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d907      	bls.n	8001bf0 <_fwalk_sglue+0x38>
 8001be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001be4:	3301      	adds	r3, #1
 8001be6:	d003      	beq.n	8001bf0 <_fwalk_sglue+0x38>
 8001be8:	4629      	mov	r1, r5
 8001bea:	4638      	mov	r0, r7
 8001bec:	47c0      	blx	r8
 8001bee:	4306      	orrs	r6, r0
 8001bf0:	3568      	adds	r5, #104	; 0x68
 8001bf2:	e7e9      	b.n	8001bc8 <_fwalk_sglue+0x10>

08001bf4 <iprintf>:
 8001bf4:	b40f      	push	{r0, r1, r2, r3}
 8001bf6:	b507      	push	{r0, r1, r2, lr}
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <iprintf+0x20>)
 8001bfa:	ab04      	add	r3, sp, #16
 8001bfc:	6808      	ldr	r0, [r1, #0]
 8001bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c02:	6881      	ldr	r1, [r0, #8]
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	f000 fb61 	bl	80022cc <_vfiprintf_r>
 8001c0a:	b003      	add	sp, #12
 8001c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c10:	b004      	add	sp, #16
 8001c12:	4770      	bx	lr
 8001c14:	20000060 	.word	0x20000060

08001c18 <siprintf>:
 8001c18:	b40e      	push	{r1, r2, r3}
 8001c1a:	b500      	push	{lr}
 8001c1c:	b09c      	sub	sp, #112	; 0x70
 8001c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8001c20:	9002      	str	r0, [sp, #8]
 8001c22:	9006      	str	r0, [sp, #24]
 8001c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <siprintf+0x38>)
 8001c2a:	9107      	str	r1, [sp, #28]
 8001c2c:	9104      	str	r1, [sp, #16]
 8001c2e:	4909      	ldr	r1, [pc, #36]	; (8001c54 <siprintf+0x3c>)
 8001c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c34:	9105      	str	r1, [sp, #20]
 8001c36:	6800      	ldr	r0, [r0, #0]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	a902      	add	r1, sp, #8
 8001c3c:	f000 fa1e 	bl	800207c <_svfiprintf_r>
 8001c40:	9b02      	ldr	r3, [sp, #8]
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	b01c      	add	sp, #112	; 0x70
 8001c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c4c:	b003      	add	sp, #12
 8001c4e:	4770      	bx	lr
 8001c50:	20000060 	.word	0x20000060
 8001c54:	ffff0208 	.word	0xffff0208

08001c58 <__sread>:
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c60:	f000 f868 	bl	8001d34 <_read_r>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	bfab      	itete	ge
 8001c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8001c6c:	181b      	addge	r3, r3, r0
 8001c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c72:	bfac      	ite	ge
 8001c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c76:	81a3      	strhlt	r3, [r4, #12]
 8001c78:	bd10      	pop	{r4, pc}

08001c7a <__swrite>:
 8001c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7e:	461f      	mov	r7, r3
 8001c80:	898b      	ldrh	r3, [r1, #12]
 8001c82:	05db      	lsls	r3, r3, #23
 8001c84:	4605      	mov	r5, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	4616      	mov	r6, r2
 8001c8a:	d505      	bpl.n	8001c98 <__swrite+0x1e>
 8001c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c90:	2302      	movs	r3, #2
 8001c92:	2200      	movs	r2, #0
 8001c94:	f000 f83c 	bl	8001d10 <_lseek_r>
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ca2:	81a3      	strh	r3, [r4, #12]
 8001ca4:	4632      	mov	r2, r6
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4628      	mov	r0, r5
 8001caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cae:	f000 b853 	b.w	8001d58 <_write_r>

08001cb2 <__sseek>:
 8001cb2:	b510      	push	{r4, lr}
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cba:	f000 f829 	bl	8001d10 <_lseek_r>
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	89a3      	ldrh	r3, [r4, #12]
 8001cc2:	bf15      	itete	ne
 8001cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cce:	81a3      	strheq	r3, [r4, #12]
 8001cd0:	bf18      	it	ne
 8001cd2:	81a3      	strhne	r3, [r4, #12]
 8001cd4:	bd10      	pop	{r4, pc}

08001cd6 <__sclose>:
 8001cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cda:	f000 b809 	b.w	8001cf0 <_close_r>

08001cde <memset>:
 8001cde:	4402      	add	r2, r0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <memset+0xa>
 8001ce6:	4770      	bx	lr
 8001ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8001cec:	e7f9      	b.n	8001ce2 <memset+0x4>
	...

08001cf0 <_close_r>:
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	4d06      	ldr	r5, [pc, #24]	; (8001d0c <_close_r+0x1c>)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	602b      	str	r3, [r5, #0]
 8001cfc:	f7ff fc45 	bl	800158a <_close>
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	d102      	bne.n	8001d0a <_close_r+0x1a>
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	b103      	cbz	r3, 8001d0a <_close_r+0x1a>
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
 8001d0c:	20002170 	.word	0x20002170

08001d10 <_lseek_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	4d07      	ldr	r5, [pc, #28]	; (8001d30 <_lseek_r+0x20>)
 8001d14:	4604      	mov	r4, r0
 8001d16:	4608      	mov	r0, r1
 8001d18:	4611      	mov	r1, r2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	602a      	str	r2, [r5, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f7ff fc5a 	bl	80015d8 <_lseek>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	d102      	bne.n	8001d2e <_lseek_r+0x1e>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	b103      	cbz	r3, 8001d2e <_lseek_r+0x1e>
 8001d2c:	6023      	str	r3, [r4, #0]
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
 8001d30:	20002170 	.word	0x20002170

08001d34 <_read_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4d07      	ldr	r5, [pc, #28]	; (8001d54 <_read_r+0x20>)
 8001d38:	4604      	mov	r4, r0
 8001d3a:	4608      	mov	r0, r1
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	2200      	movs	r2, #0
 8001d40:	602a      	str	r2, [r5, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f7ff fbe8 	bl	8001518 <_read>
 8001d48:	1c43      	adds	r3, r0, #1
 8001d4a:	d102      	bne.n	8001d52 <_read_r+0x1e>
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	b103      	cbz	r3, 8001d52 <_read_r+0x1e>
 8001d50:	6023      	str	r3, [r4, #0]
 8001d52:	bd38      	pop	{r3, r4, r5, pc}
 8001d54:	20002170 	.word	0x20002170

08001d58 <_write_r>:
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4d07      	ldr	r5, [pc, #28]	; (8001d78 <_write_r+0x20>)
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	4608      	mov	r0, r1
 8001d60:	4611      	mov	r1, r2
 8001d62:	2200      	movs	r2, #0
 8001d64:	602a      	str	r2, [r5, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f7ff fbf3 	bl	8001552 <_write>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	d102      	bne.n	8001d76 <_write_r+0x1e>
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	b103      	cbz	r3, 8001d76 <_write_r+0x1e>
 8001d74:	6023      	str	r3, [r4, #0]
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
 8001d78:	20002170 	.word	0x20002170

08001d7c <__errno>:
 8001d7c:	4b01      	ldr	r3, [pc, #4]	; (8001d84 <__errno+0x8>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000060 	.word	0x20000060

08001d88 <__libc_init_array>:
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	4d0d      	ldr	r5, [pc, #52]	; (8001dc0 <__libc_init_array+0x38>)
 8001d8c:	4c0d      	ldr	r4, [pc, #52]	; (8001dc4 <__libc_init_array+0x3c>)
 8001d8e:	1b64      	subs	r4, r4, r5
 8001d90:	10a4      	asrs	r4, r4, #2
 8001d92:	2600      	movs	r6, #0
 8001d94:	42a6      	cmp	r6, r4
 8001d96:	d109      	bne.n	8001dac <__libc_init_array+0x24>
 8001d98:	4d0b      	ldr	r5, [pc, #44]	; (8001dc8 <__libc_init_array+0x40>)
 8001d9a:	4c0c      	ldr	r4, [pc, #48]	; (8001dcc <__libc_init_array+0x44>)
 8001d9c:	f000 ff78 	bl	8002c90 <_init>
 8001da0:	1b64      	subs	r4, r4, r5
 8001da2:	10a4      	asrs	r4, r4, #2
 8001da4:	2600      	movs	r6, #0
 8001da6:	42a6      	cmp	r6, r4
 8001da8:	d105      	bne.n	8001db6 <__libc_init_array+0x2e>
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
 8001dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db0:	4798      	blx	r3
 8001db2:	3601      	adds	r6, #1
 8001db4:	e7ee      	b.n	8001d94 <__libc_init_array+0xc>
 8001db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dba:	4798      	blx	r3
 8001dbc:	3601      	adds	r6, #1
 8001dbe:	e7f2      	b.n	8001da6 <__libc_init_array+0x1e>
 8001dc0:	08002f3c 	.word	0x08002f3c
 8001dc4:	08002f3c 	.word	0x08002f3c
 8001dc8:	08002f3c 	.word	0x08002f3c
 8001dcc:	08002f40 	.word	0x08002f40

08001dd0 <__retarget_lock_init_recursive>:
 8001dd0:	4770      	bx	lr

08001dd2 <__retarget_lock_acquire_recursive>:
 8001dd2:	4770      	bx	lr

08001dd4 <__retarget_lock_release_recursive>:
 8001dd4:	4770      	bx	lr
	...

08001dd8 <_free_r>:
 8001dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dda:	2900      	cmp	r1, #0
 8001ddc:	d044      	beq.n	8001e68 <_free_r+0x90>
 8001dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001de2:	9001      	str	r0, [sp, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f1a1 0404 	sub.w	r4, r1, #4
 8001dea:	bfb8      	it	lt
 8001dec:	18e4      	addlt	r4, r4, r3
 8001dee:	f000 f8df 	bl	8001fb0 <__malloc_lock>
 8001df2:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <_free_r+0x94>)
 8001df4:	9801      	ldr	r0, [sp, #4]
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	b933      	cbnz	r3, 8001e08 <_free_r+0x30>
 8001dfa:	6063      	str	r3, [r4, #4]
 8001dfc:	6014      	str	r4, [r2, #0]
 8001dfe:	b003      	add	sp, #12
 8001e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e04:	f000 b8da 	b.w	8001fbc <__malloc_unlock>
 8001e08:	42a3      	cmp	r3, r4
 8001e0a:	d908      	bls.n	8001e1e <_free_r+0x46>
 8001e0c:	6825      	ldr	r5, [r4, #0]
 8001e0e:	1961      	adds	r1, r4, r5
 8001e10:	428b      	cmp	r3, r1
 8001e12:	bf01      	itttt	eq
 8001e14:	6819      	ldreq	r1, [r3, #0]
 8001e16:	685b      	ldreq	r3, [r3, #4]
 8001e18:	1949      	addeq	r1, r1, r5
 8001e1a:	6021      	streq	r1, [r4, #0]
 8001e1c:	e7ed      	b.n	8001dfa <_free_r+0x22>
 8001e1e:	461a      	mov	r2, r3
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	b10b      	cbz	r3, 8001e28 <_free_r+0x50>
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	d9fa      	bls.n	8001e1e <_free_r+0x46>
 8001e28:	6811      	ldr	r1, [r2, #0]
 8001e2a:	1855      	adds	r5, r2, r1
 8001e2c:	42a5      	cmp	r5, r4
 8001e2e:	d10b      	bne.n	8001e48 <_free_r+0x70>
 8001e30:	6824      	ldr	r4, [r4, #0]
 8001e32:	4421      	add	r1, r4
 8001e34:	1854      	adds	r4, r2, r1
 8001e36:	42a3      	cmp	r3, r4
 8001e38:	6011      	str	r1, [r2, #0]
 8001e3a:	d1e0      	bne.n	8001dfe <_free_r+0x26>
 8001e3c:	681c      	ldr	r4, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	6053      	str	r3, [r2, #4]
 8001e42:	440c      	add	r4, r1
 8001e44:	6014      	str	r4, [r2, #0]
 8001e46:	e7da      	b.n	8001dfe <_free_r+0x26>
 8001e48:	d902      	bls.n	8001e50 <_free_r+0x78>
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	6003      	str	r3, [r0, #0]
 8001e4e:	e7d6      	b.n	8001dfe <_free_r+0x26>
 8001e50:	6825      	ldr	r5, [r4, #0]
 8001e52:	1961      	adds	r1, r4, r5
 8001e54:	428b      	cmp	r3, r1
 8001e56:	bf04      	itt	eq
 8001e58:	6819      	ldreq	r1, [r3, #0]
 8001e5a:	685b      	ldreq	r3, [r3, #4]
 8001e5c:	6063      	str	r3, [r4, #4]
 8001e5e:	bf04      	itt	eq
 8001e60:	1949      	addeq	r1, r1, r5
 8001e62:	6021      	streq	r1, [r4, #0]
 8001e64:	6054      	str	r4, [r2, #4]
 8001e66:	e7ca      	b.n	8001dfe <_free_r+0x26>
 8001e68:	b003      	add	sp, #12
 8001e6a:	bd30      	pop	{r4, r5, pc}
 8001e6c:	20002178 	.word	0x20002178

08001e70 <sbrk_aligned>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	4e0e      	ldr	r6, [pc, #56]	; (8001eac <sbrk_aligned+0x3c>)
 8001e74:	460c      	mov	r4, r1
 8001e76:	6831      	ldr	r1, [r6, #0]
 8001e78:	4605      	mov	r5, r0
 8001e7a:	b911      	cbnz	r1, 8001e82 <sbrk_aligned+0x12>
 8001e7c:	f000 fe2e 	bl	8002adc <_sbrk_r>
 8001e80:	6030      	str	r0, [r6, #0]
 8001e82:	4621      	mov	r1, r4
 8001e84:	4628      	mov	r0, r5
 8001e86:	f000 fe29 	bl	8002adc <_sbrk_r>
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	d00a      	beq.n	8001ea4 <sbrk_aligned+0x34>
 8001e8e:	1cc4      	adds	r4, r0, #3
 8001e90:	f024 0403 	bic.w	r4, r4, #3
 8001e94:	42a0      	cmp	r0, r4
 8001e96:	d007      	beq.n	8001ea8 <sbrk_aligned+0x38>
 8001e98:	1a21      	subs	r1, r4, r0
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f000 fe1e 	bl	8002adc <_sbrk_r>
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	d101      	bne.n	8001ea8 <sbrk_aligned+0x38>
 8001ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	2000217c 	.word	0x2000217c

08001eb0 <_malloc_r>:
 8001eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eb4:	1ccd      	adds	r5, r1, #3
 8001eb6:	f025 0503 	bic.w	r5, r5, #3
 8001eba:	3508      	adds	r5, #8
 8001ebc:	2d0c      	cmp	r5, #12
 8001ebe:	bf38      	it	cc
 8001ec0:	250c      	movcc	r5, #12
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	4607      	mov	r7, r0
 8001ec6:	db01      	blt.n	8001ecc <_malloc_r+0x1c>
 8001ec8:	42a9      	cmp	r1, r5
 8001eca:	d905      	bls.n	8001ed8 <_malloc_r+0x28>
 8001ecc:	230c      	movs	r3, #12
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	2600      	movs	r6, #0
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ed8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001fac <_malloc_r+0xfc>
 8001edc:	f000 f868 	bl	8001fb0 <__malloc_lock>
 8001ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	bb5c      	cbnz	r4, 8001f40 <_malloc_r+0x90>
 8001ee8:	4629      	mov	r1, r5
 8001eea:	4638      	mov	r0, r7
 8001eec:	f7ff ffc0 	bl	8001e70 <sbrk_aligned>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	d155      	bne.n	8001fa2 <_malloc_r+0xf2>
 8001ef6:	f8d8 4000 	ldr.w	r4, [r8]
 8001efa:	4626      	mov	r6, r4
 8001efc:	2e00      	cmp	r6, #0
 8001efe:	d145      	bne.n	8001f8c <_malloc_r+0xdc>
 8001f00:	2c00      	cmp	r4, #0
 8001f02:	d048      	beq.n	8001f96 <_malloc_r+0xe6>
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	4631      	mov	r1, r6
 8001f08:	4638      	mov	r0, r7
 8001f0a:	eb04 0903 	add.w	r9, r4, r3
 8001f0e:	f000 fde5 	bl	8002adc <_sbrk_r>
 8001f12:	4581      	cmp	r9, r0
 8001f14:	d13f      	bne.n	8001f96 <_malloc_r+0xe6>
 8001f16:	6821      	ldr	r1, [r4, #0]
 8001f18:	1a6d      	subs	r5, r5, r1
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4638      	mov	r0, r7
 8001f1e:	f7ff ffa7 	bl	8001e70 <sbrk_aligned>
 8001f22:	3001      	adds	r0, #1
 8001f24:	d037      	beq.n	8001f96 <_malloc_r+0xe6>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	442b      	add	r3, r5
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d038      	beq.n	8001fa6 <_malloc_r+0xf6>
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	42a2      	cmp	r2, r4
 8001f38:	d12b      	bne.n	8001f92 <_malloc_r+0xe2>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e00f      	b.n	8001f60 <_malloc_r+0xb0>
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	1b52      	subs	r2, r2, r5
 8001f44:	d41f      	bmi.n	8001f86 <_malloc_r+0xd6>
 8001f46:	2a0b      	cmp	r2, #11
 8001f48:	d917      	bls.n	8001f7a <_malloc_r+0xca>
 8001f4a:	1961      	adds	r1, r4, r5
 8001f4c:	42a3      	cmp	r3, r4
 8001f4e:	6025      	str	r5, [r4, #0]
 8001f50:	bf18      	it	ne
 8001f52:	6059      	strne	r1, [r3, #4]
 8001f54:	6863      	ldr	r3, [r4, #4]
 8001f56:	bf08      	it	eq
 8001f58:	f8c8 1000 	streq.w	r1, [r8]
 8001f5c:	5162      	str	r2, [r4, r5]
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	4638      	mov	r0, r7
 8001f62:	f104 060b 	add.w	r6, r4, #11
 8001f66:	f000 f829 	bl	8001fbc <__malloc_unlock>
 8001f6a:	f026 0607 	bic.w	r6, r6, #7
 8001f6e:	1d23      	adds	r3, r4, #4
 8001f70:	1af2      	subs	r2, r6, r3
 8001f72:	d0ae      	beq.n	8001ed2 <_malloc_r+0x22>
 8001f74:	1b9b      	subs	r3, r3, r6
 8001f76:	50a3      	str	r3, [r4, r2]
 8001f78:	e7ab      	b.n	8001ed2 <_malloc_r+0x22>
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	6862      	ldr	r2, [r4, #4]
 8001f7e:	d1dd      	bne.n	8001f3c <_malloc_r+0x8c>
 8001f80:	f8c8 2000 	str.w	r2, [r8]
 8001f84:	e7ec      	b.n	8001f60 <_malloc_r+0xb0>
 8001f86:	4623      	mov	r3, r4
 8001f88:	6864      	ldr	r4, [r4, #4]
 8001f8a:	e7ac      	b.n	8001ee6 <_malloc_r+0x36>
 8001f8c:	4634      	mov	r4, r6
 8001f8e:	6876      	ldr	r6, [r6, #4]
 8001f90:	e7b4      	b.n	8001efc <_malloc_r+0x4c>
 8001f92:	4613      	mov	r3, r2
 8001f94:	e7cc      	b.n	8001f30 <_malloc_r+0x80>
 8001f96:	230c      	movs	r3, #12
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	f000 f80e 	bl	8001fbc <__malloc_unlock>
 8001fa0:	e797      	b.n	8001ed2 <_malloc_r+0x22>
 8001fa2:	6025      	str	r5, [r4, #0]
 8001fa4:	e7dc      	b.n	8001f60 <_malloc_r+0xb0>
 8001fa6:	605b      	str	r3, [r3, #4]
 8001fa8:	deff      	udf	#255	; 0xff
 8001faa:	bf00      	nop
 8001fac:	20002178 	.word	0x20002178

08001fb0 <__malloc_lock>:
 8001fb0:	4801      	ldr	r0, [pc, #4]	; (8001fb8 <__malloc_lock+0x8>)
 8001fb2:	f7ff bf0e 	b.w	8001dd2 <__retarget_lock_acquire_recursive>
 8001fb6:	bf00      	nop
 8001fb8:	20002174 	.word	0x20002174

08001fbc <__malloc_unlock>:
 8001fbc:	4801      	ldr	r0, [pc, #4]	; (8001fc4 <__malloc_unlock+0x8>)
 8001fbe:	f7ff bf09 	b.w	8001dd4 <__retarget_lock_release_recursive>
 8001fc2:	bf00      	nop
 8001fc4:	20002174 	.word	0x20002174

08001fc8 <__ssputs_r>:
 8001fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fcc:	688e      	ldr	r6, [r1, #8]
 8001fce:	461f      	mov	r7, r3
 8001fd0:	42be      	cmp	r6, r7
 8001fd2:	680b      	ldr	r3, [r1, #0]
 8001fd4:	4682      	mov	sl, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4690      	mov	r8, r2
 8001fda:	d82c      	bhi.n	8002036 <__ssputs_r+0x6e>
 8001fdc:	898a      	ldrh	r2, [r1, #12]
 8001fde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fe2:	d026      	beq.n	8002032 <__ssputs_r+0x6a>
 8001fe4:	6965      	ldr	r5, [r4, #20]
 8001fe6:	6909      	ldr	r1, [r1, #16]
 8001fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fec:	eba3 0901 	sub.w	r9, r3, r1
 8001ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ff4:	1c7b      	adds	r3, r7, #1
 8001ff6:	444b      	add	r3, r9
 8001ff8:	106d      	asrs	r5, r5, #1
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	bf38      	it	cc
 8001ffe:	461d      	movcc	r5, r3
 8002000:	0553      	lsls	r3, r2, #21
 8002002:	d527      	bpl.n	8002054 <__ssputs_r+0x8c>
 8002004:	4629      	mov	r1, r5
 8002006:	f7ff ff53 	bl	8001eb0 <_malloc_r>
 800200a:	4606      	mov	r6, r0
 800200c:	b360      	cbz	r0, 8002068 <__ssputs_r+0xa0>
 800200e:	6921      	ldr	r1, [r4, #16]
 8002010:	464a      	mov	r2, r9
 8002012:	f000 fd73 	bl	8002afc <memcpy>
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	81a3      	strh	r3, [r4, #12]
 8002022:	6126      	str	r6, [r4, #16]
 8002024:	6165      	str	r5, [r4, #20]
 8002026:	444e      	add	r6, r9
 8002028:	eba5 0509 	sub.w	r5, r5, r9
 800202c:	6026      	str	r6, [r4, #0]
 800202e:	60a5      	str	r5, [r4, #8]
 8002030:	463e      	mov	r6, r7
 8002032:	42be      	cmp	r6, r7
 8002034:	d900      	bls.n	8002038 <__ssputs_r+0x70>
 8002036:	463e      	mov	r6, r7
 8002038:	6820      	ldr	r0, [r4, #0]
 800203a:	4632      	mov	r2, r6
 800203c:	4641      	mov	r1, r8
 800203e:	f000 fd33 	bl	8002aa8 <memmove>
 8002042:	68a3      	ldr	r3, [r4, #8]
 8002044:	1b9b      	subs	r3, r3, r6
 8002046:	60a3      	str	r3, [r4, #8]
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	4433      	add	r3, r6
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	2000      	movs	r0, #0
 8002050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002054:	462a      	mov	r2, r5
 8002056:	f000 fd5f 	bl	8002b18 <_realloc_r>
 800205a:	4606      	mov	r6, r0
 800205c:	2800      	cmp	r0, #0
 800205e:	d1e0      	bne.n	8002022 <__ssputs_r+0x5a>
 8002060:	6921      	ldr	r1, [r4, #16]
 8002062:	4650      	mov	r0, sl
 8002064:	f7ff feb8 	bl	8001dd8 <_free_r>
 8002068:	230c      	movs	r3, #12
 800206a:	f8ca 3000 	str.w	r3, [sl]
 800206e:	89a3      	ldrh	r3, [r4, #12]
 8002070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002074:	81a3      	strh	r3, [r4, #12]
 8002076:	f04f 30ff 	mov.w	r0, #4294967295
 800207a:	e7e9      	b.n	8002050 <__ssputs_r+0x88>

0800207c <_svfiprintf_r>:
 800207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002080:	4698      	mov	r8, r3
 8002082:	898b      	ldrh	r3, [r1, #12]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	b09d      	sub	sp, #116	; 0x74
 8002088:	4607      	mov	r7, r0
 800208a:	460d      	mov	r5, r1
 800208c:	4614      	mov	r4, r2
 800208e:	d50e      	bpl.n	80020ae <_svfiprintf_r+0x32>
 8002090:	690b      	ldr	r3, [r1, #16]
 8002092:	b963      	cbnz	r3, 80020ae <_svfiprintf_r+0x32>
 8002094:	2140      	movs	r1, #64	; 0x40
 8002096:	f7ff ff0b 	bl	8001eb0 <_malloc_r>
 800209a:	6028      	str	r0, [r5, #0]
 800209c:	6128      	str	r0, [r5, #16]
 800209e:	b920      	cbnz	r0, 80020aa <_svfiprintf_r+0x2e>
 80020a0:	230c      	movs	r3, #12
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	e0d0      	b.n	800224c <_svfiprintf_r+0x1d0>
 80020aa:	2340      	movs	r3, #64	; 0x40
 80020ac:	616b      	str	r3, [r5, #20]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9309      	str	r3, [sp, #36]	; 0x24
 80020b2:	2320      	movs	r3, #32
 80020b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80020bc:	2330      	movs	r3, #48	; 0x30
 80020be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002264 <_svfiprintf_r+0x1e8>
 80020c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020c6:	f04f 0901 	mov.w	r9, #1
 80020ca:	4623      	mov	r3, r4
 80020cc:	469a      	mov	sl, r3
 80020ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020d2:	b10a      	cbz	r2, 80020d8 <_svfiprintf_r+0x5c>
 80020d4:	2a25      	cmp	r2, #37	; 0x25
 80020d6:	d1f9      	bne.n	80020cc <_svfiprintf_r+0x50>
 80020d8:	ebba 0b04 	subs.w	fp, sl, r4
 80020dc:	d00b      	beq.n	80020f6 <_svfiprintf_r+0x7a>
 80020de:	465b      	mov	r3, fp
 80020e0:	4622      	mov	r2, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	4638      	mov	r0, r7
 80020e6:	f7ff ff6f 	bl	8001fc8 <__ssputs_r>
 80020ea:	3001      	adds	r0, #1
 80020ec:	f000 80a9 	beq.w	8002242 <_svfiprintf_r+0x1c6>
 80020f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020f2:	445a      	add	r2, fp
 80020f4:	9209      	str	r2, [sp, #36]	; 0x24
 80020f6:	f89a 3000 	ldrb.w	r3, [sl]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80a1 	beq.w	8002242 <_svfiprintf_r+0x1c6>
 8002100:	2300      	movs	r3, #0
 8002102:	f04f 32ff 	mov.w	r2, #4294967295
 8002106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800210a:	f10a 0a01 	add.w	sl, sl, #1
 800210e:	9304      	str	r3, [sp, #16]
 8002110:	9307      	str	r3, [sp, #28]
 8002112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002116:	931a      	str	r3, [sp, #104]	; 0x68
 8002118:	4654      	mov	r4, sl
 800211a:	2205      	movs	r2, #5
 800211c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002120:	4850      	ldr	r0, [pc, #320]	; (8002264 <_svfiprintf_r+0x1e8>)
 8002122:	f7fe f865 	bl	80001f0 <memchr>
 8002126:	9a04      	ldr	r2, [sp, #16]
 8002128:	b9d8      	cbnz	r0, 8002162 <_svfiprintf_r+0xe6>
 800212a:	06d0      	lsls	r0, r2, #27
 800212c:	bf44      	itt	mi
 800212e:	2320      	movmi	r3, #32
 8002130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002134:	0711      	lsls	r1, r2, #28
 8002136:	bf44      	itt	mi
 8002138:	232b      	movmi	r3, #43	; 0x2b
 800213a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800213e:	f89a 3000 	ldrb.w	r3, [sl]
 8002142:	2b2a      	cmp	r3, #42	; 0x2a
 8002144:	d015      	beq.n	8002172 <_svfiprintf_r+0xf6>
 8002146:	9a07      	ldr	r2, [sp, #28]
 8002148:	4654      	mov	r4, sl
 800214a:	2000      	movs	r0, #0
 800214c:	f04f 0c0a 	mov.w	ip, #10
 8002150:	4621      	mov	r1, r4
 8002152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002156:	3b30      	subs	r3, #48	; 0x30
 8002158:	2b09      	cmp	r3, #9
 800215a:	d94d      	bls.n	80021f8 <_svfiprintf_r+0x17c>
 800215c:	b1b0      	cbz	r0, 800218c <_svfiprintf_r+0x110>
 800215e:	9207      	str	r2, [sp, #28]
 8002160:	e014      	b.n	800218c <_svfiprintf_r+0x110>
 8002162:	eba0 0308 	sub.w	r3, r0, r8
 8002166:	fa09 f303 	lsl.w	r3, r9, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	9304      	str	r3, [sp, #16]
 800216e:	46a2      	mov	sl, r4
 8002170:	e7d2      	b.n	8002118 <_svfiprintf_r+0x9c>
 8002172:	9b03      	ldr	r3, [sp, #12]
 8002174:	1d19      	adds	r1, r3, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	9103      	str	r1, [sp, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	bfbb      	ittet	lt
 800217e:	425b      	neglt	r3, r3
 8002180:	f042 0202 	orrlt.w	r2, r2, #2
 8002184:	9307      	strge	r3, [sp, #28]
 8002186:	9307      	strlt	r3, [sp, #28]
 8002188:	bfb8      	it	lt
 800218a:	9204      	strlt	r2, [sp, #16]
 800218c:	7823      	ldrb	r3, [r4, #0]
 800218e:	2b2e      	cmp	r3, #46	; 0x2e
 8002190:	d10c      	bne.n	80021ac <_svfiprintf_r+0x130>
 8002192:	7863      	ldrb	r3, [r4, #1]
 8002194:	2b2a      	cmp	r3, #42	; 0x2a
 8002196:	d134      	bne.n	8002202 <_svfiprintf_r+0x186>
 8002198:	9b03      	ldr	r3, [sp, #12]
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	9203      	str	r2, [sp, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bfb8      	it	lt
 80021a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80021a8:	3402      	adds	r4, #2
 80021aa:	9305      	str	r3, [sp, #20]
 80021ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002274 <_svfiprintf_r+0x1f8>
 80021b0:	7821      	ldrb	r1, [r4, #0]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4650      	mov	r0, sl
 80021b6:	f7fe f81b 	bl	80001f0 <memchr>
 80021ba:	b138      	cbz	r0, 80021cc <_svfiprintf_r+0x150>
 80021bc:	9b04      	ldr	r3, [sp, #16]
 80021be:	eba0 000a 	sub.w	r0, r0, sl
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	4082      	lsls	r2, r0
 80021c6:	4313      	orrs	r3, r2
 80021c8:	3401      	adds	r4, #1
 80021ca:	9304      	str	r3, [sp, #16]
 80021cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021d0:	4825      	ldr	r0, [pc, #148]	; (8002268 <_svfiprintf_r+0x1ec>)
 80021d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021d6:	2206      	movs	r2, #6
 80021d8:	f7fe f80a 	bl	80001f0 <memchr>
 80021dc:	2800      	cmp	r0, #0
 80021de:	d038      	beq.n	8002252 <_svfiprintf_r+0x1d6>
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <_svfiprintf_r+0x1f0>)
 80021e2:	bb1b      	cbnz	r3, 800222c <_svfiprintf_r+0x1b0>
 80021e4:	9b03      	ldr	r3, [sp, #12]
 80021e6:	3307      	adds	r3, #7
 80021e8:	f023 0307 	bic.w	r3, r3, #7
 80021ec:	3308      	adds	r3, #8
 80021ee:	9303      	str	r3, [sp, #12]
 80021f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021f2:	4433      	add	r3, r6
 80021f4:	9309      	str	r3, [sp, #36]	; 0x24
 80021f6:	e768      	b.n	80020ca <_svfiprintf_r+0x4e>
 80021f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80021fc:	460c      	mov	r4, r1
 80021fe:	2001      	movs	r0, #1
 8002200:	e7a6      	b.n	8002150 <_svfiprintf_r+0xd4>
 8002202:	2300      	movs	r3, #0
 8002204:	3401      	adds	r4, #1
 8002206:	9305      	str	r3, [sp, #20]
 8002208:	4619      	mov	r1, r3
 800220a:	f04f 0c0a 	mov.w	ip, #10
 800220e:	4620      	mov	r0, r4
 8002210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002214:	3a30      	subs	r2, #48	; 0x30
 8002216:	2a09      	cmp	r2, #9
 8002218:	d903      	bls.n	8002222 <_svfiprintf_r+0x1a6>
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0c6      	beq.n	80021ac <_svfiprintf_r+0x130>
 800221e:	9105      	str	r1, [sp, #20]
 8002220:	e7c4      	b.n	80021ac <_svfiprintf_r+0x130>
 8002222:	fb0c 2101 	mla	r1, ip, r1, r2
 8002226:	4604      	mov	r4, r0
 8002228:	2301      	movs	r3, #1
 800222a:	e7f0      	b.n	800220e <_svfiprintf_r+0x192>
 800222c:	ab03      	add	r3, sp, #12
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	462a      	mov	r2, r5
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <_svfiprintf_r+0x1f4>)
 8002234:	a904      	add	r1, sp, #16
 8002236:	4638      	mov	r0, r7
 8002238:	f3af 8000 	nop.w
 800223c:	1c42      	adds	r2, r0, #1
 800223e:	4606      	mov	r6, r0
 8002240:	d1d6      	bne.n	80021f0 <_svfiprintf_r+0x174>
 8002242:	89ab      	ldrh	r3, [r5, #12]
 8002244:	065b      	lsls	r3, r3, #25
 8002246:	f53f af2d 	bmi.w	80020a4 <_svfiprintf_r+0x28>
 800224a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800224c:	b01d      	add	sp, #116	; 0x74
 800224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002252:	ab03      	add	r3, sp, #12
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	462a      	mov	r2, r5
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <_svfiprintf_r+0x1f4>)
 800225a:	a904      	add	r1, sp, #16
 800225c:	4638      	mov	r0, r7
 800225e:	f000 f9bd 	bl	80025dc <_printf_i>
 8002262:	e7eb      	b.n	800223c <_svfiprintf_r+0x1c0>
 8002264:	08002f08 	.word	0x08002f08
 8002268:	08002f12 	.word	0x08002f12
 800226c:	00000000 	.word	0x00000000
 8002270:	08001fc9 	.word	0x08001fc9
 8002274:	08002f0e 	.word	0x08002f0e

08002278 <__sfputc_r>:
 8002278:	6893      	ldr	r3, [r2, #8]
 800227a:	3b01      	subs	r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	b410      	push	{r4}
 8002280:	6093      	str	r3, [r2, #8]
 8002282:	da08      	bge.n	8002296 <__sfputc_r+0x1e>
 8002284:	6994      	ldr	r4, [r2, #24]
 8002286:	42a3      	cmp	r3, r4
 8002288:	db01      	blt.n	800228e <__sfputc_r+0x16>
 800228a:	290a      	cmp	r1, #10
 800228c:	d103      	bne.n	8002296 <__sfputc_r+0x1e>
 800228e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002292:	f000 bb73 	b.w	800297c <__swbuf_r>
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	1c58      	adds	r0, r3, #1
 800229a:	6010      	str	r0, [r2, #0]
 800229c:	7019      	strb	r1, [r3, #0]
 800229e:	4608      	mov	r0, r1
 80022a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <__sfputs_r>:
 80022a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a8:	4606      	mov	r6, r0
 80022aa:	460f      	mov	r7, r1
 80022ac:	4614      	mov	r4, r2
 80022ae:	18d5      	adds	r5, r2, r3
 80022b0:	42ac      	cmp	r4, r5
 80022b2:	d101      	bne.n	80022b8 <__sfputs_r+0x12>
 80022b4:	2000      	movs	r0, #0
 80022b6:	e007      	b.n	80022c8 <__sfputs_r+0x22>
 80022b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022bc:	463a      	mov	r2, r7
 80022be:	4630      	mov	r0, r6
 80022c0:	f7ff ffda 	bl	8002278 <__sfputc_r>
 80022c4:	1c43      	adds	r3, r0, #1
 80022c6:	d1f3      	bne.n	80022b0 <__sfputs_r+0xa>
 80022c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022cc <_vfiprintf_r>:
 80022cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d0:	460d      	mov	r5, r1
 80022d2:	b09d      	sub	sp, #116	; 0x74
 80022d4:	4614      	mov	r4, r2
 80022d6:	4698      	mov	r8, r3
 80022d8:	4606      	mov	r6, r0
 80022da:	b118      	cbz	r0, 80022e4 <_vfiprintf_r+0x18>
 80022dc:	6a03      	ldr	r3, [r0, #32]
 80022de:	b90b      	cbnz	r3, 80022e4 <_vfiprintf_r+0x18>
 80022e0:	f7ff fc52 	bl	8001b88 <__sinit>
 80022e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022e6:	07d9      	lsls	r1, r3, #31
 80022e8:	d405      	bmi.n	80022f6 <_vfiprintf_r+0x2a>
 80022ea:	89ab      	ldrh	r3, [r5, #12]
 80022ec:	059a      	lsls	r2, r3, #22
 80022ee:	d402      	bmi.n	80022f6 <_vfiprintf_r+0x2a>
 80022f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022f2:	f7ff fd6e 	bl	8001dd2 <__retarget_lock_acquire_recursive>
 80022f6:	89ab      	ldrh	r3, [r5, #12]
 80022f8:	071b      	lsls	r3, r3, #28
 80022fa:	d501      	bpl.n	8002300 <_vfiprintf_r+0x34>
 80022fc:	692b      	ldr	r3, [r5, #16]
 80022fe:	b99b      	cbnz	r3, 8002328 <_vfiprintf_r+0x5c>
 8002300:	4629      	mov	r1, r5
 8002302:	4630      	mov	r0, r6
 8002304:	f000 fb78 	bl	80029f8 <__swsetup_r>
 8002308:	b170      	cbz	r0, 8002328 <_vfiprintf_r+0x5c>
 800230a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800230c:	07dc      	lsls	r4, r3, #31
 800230e:	d504      	bpl.n	800231a <_vfiprintf_r+0x4e>
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	b01d      	add	sp, #116	; 0x74
 8002316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231a:	89ab      	ldrh	r3, [r5, #12]
 800231c:	0598      	lsls	r0, r3, #22
 800231e:	d4f7      	bmi.n	8002310 <_vfiprintf_r+0x44>
 8002320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002322:	f7ff fd57 	bl	8001dd4 <__retarget_lock_release_recursive>
 8002326:	e7f3      	b.n	8002310 <_vfiprintf_r+0x44>
 8002328:	2300      	movs	r3, #0
 800232a:	9309      	str	r3, [sp, #36]	; 0x24
 800232c:	2320      	movs	r3, #32
 800232e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002332:	f8cd 800c 	str.w	r8, [sp, #12]
 8002336:	2330      	movs	r3, #48	; 0x30
 8002338:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80024ec <_vfiprintf_r+0x220>
 800233c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002340:	f04f 0901 	mov.w	r9, #1
 8002344:	4623      	mov	r3, r4
 8002346:	469a      	mov	sl, r3
 8002348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800234c:	b10a      	cbz	r2, 8002352 <_vfiprintf_r+0x86>
 800234e:	2a25      	cmp	r2, #37	; 0x25
 8002350:	d1f9      	bne.n	8002346 <_vfiprintf_r+0x7a>
 8002352:	ebba 0b04 	subs.w	fp, sl, r4
 8002356:	d00b      	beq.n	8002370 <_vfiprintf_r+0xa4>
 8002358:	465b      	mov	r3, fp
 800235a:	4622      	mov	r2, r4
 800235c:	4629      	mov	r1, r5
 800235e:	4630      	mov	r0, r6
 8002360:	f7ff ffa1 	bl	80022a6 <__sfputs_r>
 8002364:	3001      	adds	r0, #1
 8002366:	f000 80a9 	beq.w	80024bc <_vfiprintf_r+0x1f0>
 800236a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800236c:	445a      	add	r2, fp
 800236e:	9209      	str	r2, [sp, #36]	; 0x24
 8002370:	f89a 3000 	ldrb.w	r3, [sl]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a1 	beq.w	80024bc <_vfiprintf_r+0x1f0>
 800237a:	2300      	movs	r3, #0
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002384:	f10a 0a01 	add.w	sl, sl, #1
 8002388:	9304      	str	r3, [sp, #16]
 800238a:	9307      	str	r3, [sp, #28]
 800238c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002390:	931a      	str	r3, [sp, #104]	; 0x68
 8002392:	4654      	mov	r4, sl
 8002394:	2205      	movs	r2, #5
 8002396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800239a:	4854      	ldr	r0, [pc, #336]	; (80024ec <_vfiprintf_r+0x220>)
 800239c:	f7fd ff28 	bl	80001f0 <memchr>
 80023a0:	9a04      	ldr	r2, [sp, #16]
 80023a2:	b9d8      	cbnz	r0, 80023dc <_vfiprintf_r+0x110>
 80023a4:	06d1      	lsls	r1, r2, #27
 80023a6:	bf44      	itt	mi
 80023a8:	2320      	movmi	r3, #32
 80023aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023ae:	0713      	lsls	r3, r2, #28
 80023b0:	bf44      	itt	mi
 80023b2:	232b      	movmi	r3, #43	; 0x2b
 80023b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023b8:	f89a 3000 	ldrb.w	r3, [sl]
 80023bc:	2b2a      	cmp	r3, #42	; 0x2a
 80023be:	d015      	beq.n	80023ec <_vfiprintf_r+0x120>
 80023c0:	9a07      	ldr	r2, [sp, #28]
 80023c2:	4654      	mov	r4, sl
 80023c4:	2000      	movs	r0, #0
 80023c6:	f04f 0c0a 	mov.w	ip, #10
 80023ca:	4621      	mov	r1, r4
 80023cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023d0:	3b30      	subs	r3, #48	; 0x30
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	d94d      	bls.n	8002472 <_vfiprintf_r+0x1a6>
 80023d6:	b1b0      	cbz	r0, 8002406 <_vfiprintf_r+0x13a>
 80023d8:	9207      	str	r2, [sp, #28]
 80023da:	e014      	b.n	8002406 <_vfiprintf_r+0x13a>
 80023dc:	eba0 0308 	sub.w	r3, r0, r8
 80023e0:	fa09 f303 	lsl.w	r3, r9, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	9304      	str	r3, [sp, #16]
 80023e8:	46a2      	mov	sl, r4
 80023ea:	e7d2      	b.n	8002392 <_vfiprintf_r+0xc6>
 80023ec:	9b03      	ldr	r3, [sp, #12]
 80023ee:	1d19      	adds	r1, r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	9103      	str	r1, [sp, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bfbb      	ittet	lt
 80023f8:	425b      	neglt	r3, r3
 80023fa:	f042 0202 	orrlt.w	r2, r2, #2
 80023fe:	9307      	strge	r3, [sp, #28]
 8002400:	9307      	strlt	r3, [sp, #28]
 8002402:	bfb8      	it	lt
 8002404:	9204      	strlt	r2, [sp, #16]
 8002406:	7823      	ldrb	r3, [r4, #0]
 8002408:	2b2e      	cmp	r3, #46	; 0x2e
 800240a:	d10c      	bne.n	8002426 <_vfiprintf_r+0x15a>
 800240c:	7863      	ldrb	r3, [r4, #1]
 800240e:	2b2a      	cmp	r3, #42	; 0x2a
 8002410:	d134      	bne.n	800247c <_vfiprintf_r+0x1b0>
 8002412:	9b03      	ldr	r3, [sp, #12]
 8002414:	1d1a      	adds	r2, r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	9203      	str	r2, [sp, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	bfb8      	it	lt
 800241e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002422:	3402      	adds	r4, #2
 8002424:	9305      	str	r3, [sp, #20]
 8002426:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80024fc <_vfiprintf_r+0x230>
 800242a:	7821      	ldrb	r1, [r4, #0]
 800242c:	2203      	movs	r2, #3
 800242e:	4650      	mov	r0, sl
 8002430:	f7fd fede 	bl	80001f0 <memchr>
 8002434:	b138      	cbz	r0, 8002446 <_vfiprintf_r+0x17a>
 8002436:	9b04      	ldr	r3, [sp, #16]
 8002438:	eba0 000a 	sub.w	r0, r0, sl
 800243c:	2240      	movs	r2, #64	; 0x40
 800243e:	4082      	lsls	r2, r0
 8002440:	4313      	orrs	r3, r2
 8002442:	3401      	adds	r4, #1
 8002444:	9304      	str	r3, [sp, #16]
 8002446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800244a:	4829      	ldr	r0, [pc, #164]	; (80024f0 <_vfiprintf_r+0x224>)
 800244c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002450:	2206      	movs	r2, #6
 8002452:	f7fd fecd 	bl	80001f0 <memchr>
 8002456:	2800      	cmp	r0, #0
 8002458:	d03f      	beq.n	80024da <_vfiprintf_r+0x20e>
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <_vfiprintf_r+0x228>)
 800245c:	bb1b      	cbnz	r3, 80024a6 <_vfiprintf_r+0x1da>
 800245e:	9b03      	ldr	r3, [sp, #12]
 8002460:	3307      	adds	r3, #7
 8002462:	f023 0307 	bic.w	r3, r3, #7
 8002466:	3308      	adds	r3, #8
 8002468:	9303      	str	r3, [sp, #12]
 800246a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800246c:	443b      	add	r3, r7
 800246e:	9309      	str	r3, [sp, #36]	; 0x24
 8002470:	e768      	b.n	8002344 <_vfiprintf_r+0x78>
 8002472:	fb0c 3202 	mla	r2, ip, r2, r3
 8002476:	460c      	mov	r4, r1
 8002478:	2001      	movs	r0, #1
 800247a:	e7a6      	b.n	80023ca <_vfiprintf_r+0xfe>
 800247c:	2300      	movs	r3, #0
 800247e:	3401      	adds	r4, #1
 8002480:	9305      	str	r3, [sp, #20]
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 0c0a 	mov.w	ip, #10
 8002488:	4620      	mov	r0, r4
 800248a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800248e:	3a30      	subs	r2, #48	; 0x30
 8002490:	2a09      	cmp	r2, #9
 8002492:	d903      	bls.n	800249c <_vfiprintf_r+0x1d0>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0c6      	beq.n	8002426 <_vfiprintf_r+0x15a>
 8002498:	9105      	str	r1, [sp, #20]
 800249a:	e7c4      	b.n	8002426 <_vfiprintf_r+0x15a>
 800249c:	fb0c 2101 	mla	r1, ip, r1, r2
 80024a0:	4604      	mov	r4, r0
 80024a2:	2301      	movs	r3, #1
 80024a4:	e7f0      	b.n	8002488 <_vfiprintf_r+0x1bc>
 80024a6:	ab03      	add	r3, sp, #12
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	462a      	mov	r2, r5
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <_vfiprintf_r+0x22c>)
 80024ae:	a904      	add	r1, sp, #16
 80024b0:	4630      	mov	r0, r6
 80024b2:	f3af 8000 	nop.w
 80024b6:	4607      	mov	r7, r0
 80024b8:	1c78      	adds	r0, r7, #1
 80024ba:	d1d6      	bne.n	800246a <_vfiprintf_r+0x19e>
 80024bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024be:	07d9      	lsls	r1, r3, #31
 80024c0:	d405      	bmi.n	80024ce <_vfiprintf_r+0x202>
 80024c2:	89ab      	ldrh	r3, [r5, #12]
 80024c4:	059a      	lsls	r2, r3, #22
 80024c6:	d402      	bmi.n	80024ce <_vfiprintf_r+0x202>
 80024c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024ca:	f7ff fc83 	bl	8001dd4 <__retarget_lock_release_recursive>
 80024ce:	89ab      	ldrh	r3, [r5, #12]
 80024d0:	065b      	lsls	r3, r3, #25
 80024d2:	f53f af1d 	bmi.w	8002310 <_vfiprintf_r+0x44>
 80024d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024d8:	e71c      	b.n	8002314 <_vfiprintf_r+0x48>
 80024da:	ab03      	add	r3, sp, #12
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	462a      	mov	r2, r5
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <_vfiprintf_r+0x22c>)
 80024e2:	a904      	add	r1, sp, #16
 80024e4:	4630      	mov	r0, r6
 80024e6:	f000 f879 	bl	80025dc <_printf_i>
 80024ea:	e7e4      	b.n	80024b6 <_vfiprintf_r+0x1ea>
 80024ec:	08002f08 	.word	0x08002f08
 80024f0:	08002f12 	.word	0x08002f12
 80024f4:	00000000 	.word	0x00000000
 80024f8:	080022a7 	.word	0x080022a7
 80024fc:	08002f0e 	.word	0x08002f0e

08002500 <_printf_common>:
 8002500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002504:	4616      	mov	r6, r2
 8002506:	4699      	mov	r9, r3
 8002508:	688a      	ldr	r2, [r1, #8]
 800250a:	690b      	ldr	r3, [r1, #16]
 800250c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002510:	4293      	cmp	r3, r2
 8002512:	bfb8      	it	lt
 8002514:	4613      	movlt	r3, r2
 8002516:	6033      	str	r3, [r6, #0]
 8002518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800251c:	4607      	mov	r7, r0
 800251e:	460c      	mov	r4, r1
 8002520:	b10a      	cbz	r2, 8002526 <_printf_common+0x26>
 8002522:	3301      	adds	r3, #1
 8002524:	6033      	str	r3, [r6, #0]
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	0699      	lsls	r1, r3, #26
 800252a:	bf42      	ittt	mi
 800252c:	6833      	ldrmi	r3, [r6, #0]
 800252e:	3302      	addmi	r3, #2
 8002530:	6033      	strmi	r3, [r6, #0]
 8002532:	6825      	ldr	r5, [r4, #0]
 8002534:	f015 0506 	ands.w	r5, r5, #6
 8002538:	d106      	bne.n	8002548 <_printf_common+0x48>
 800253a:	f104 0a19 	add.w	sl, r4, #25
 800253e:	68e3      	ldr	r3, [r4, #12]
 8002540:	6832      	ldr	r2, [r6, #0]
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	42ab      	cmp	r3, r5
 8002546:	dc26      	bgt.n	8002596 <_printf_common+0x96>
 8002548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800254c:	1e13      	subs	r3, r2, #0
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	bf18      	it	ne
 8002552:	2301      	movne	r3, #1
 8002554:	0692      	lsls	r2, r2, #26
 8002556:	d42b      	bmi.n	80025b0 <_printf_common+0xb0>
 8002558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800255c:	4649      	mov	r1, r9
 800255e:	4638      	mov	r0, r7
 8002560:	47c0      	blx	r8
 8002562:	3001      	adds	r0, #1
 8002564:	d01e      	beq.n	80025a4 <_printf_common+0xa4>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	6922      	ldr	r2, [r4, #16]
 800256a:	f003 0306 	and.w	r3, r3, #6
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf02      	ittt	eq
 8002572:	68e5      	ldreq	r5, [r4, #12]
 8002574:	6833      	ldreq	r3, [r6, #0]
 8002576:	1aed      	subeq	r5, r5, r3
 8002578:	68a3      	ldr	r3, [r4, #8]
 800257a:	bf0c      	ite	eq
 800257c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002580:	2500      	movne	r5, #0
 8002582:	4293      	cmp	r3, r2
 8002584:	bfc4      	itt	gt
 8002586:	1a9b      	subgt	r3, r3, r2
 8002588:	18ed      	addgt	r5, r5, r3
 800258a:	2600      	movs	r6, #0
 800258c:	341a      	adds	r4, #26
 800258e:	42b5      	cmp	r5, r6
 8002590:	d11a      	bne.n	80025c8 <_printf_common+0xc8>
 8002592:	2000      	movs	r0, #0
 8002594:	e008      	b.n	80025a8 <_printf_common+0xa8>
 8002596:	2301      	movs	r3, #1
 8002598:	4652      	mov	r2, sl
 800259a:	4649      	mov	r1, r9
 800259c:	4638      	mov	r0, r7
 800259e:	47c0      	blx	r8
 80025a0:	3001      	adds	r0, #1
 80025a2:	d103      	bne.n	80025ac <_printf_common+0xac>
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ac:	3501      	adds	r5, #1
 80025ae:	e7c6      	b.n	800253e <_printf_common+0x3e>
 80025b0:	18e1      	adds	r1, r4, r3
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	2030      	movs	r0, #48	; 0x30
 80025b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025ba:	4422      	add	r2, r4
 80025bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025c4:	3302      	adds	r3, #2
 80025c6:	e7c7      	b.n	8002558 <_printf_common+0x58>
 80025c8:	2301      	movs	r3, #1
 80025ca:	4622      	mov	r2, r4
 80025cc:	4649      	mov	r1, r9
 80025ce:	4638      	mov	r0, r7
 80025d0:	47c0      	blx	r8
 80025d2:	3001      	adds	r0, #1
 80025d4:	d0e6      	beq.n	80025a4 <_printf_common+0xa4>
 80025d6:	3601      	adds	r6, #1
 80025d8:	e7d9      	b.n	800258e <_printf_common+0x8e>
	...

080025dc <_printf_i>:
 80025dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025e0:	7e0f      	ldrb	r7, [r1, #24]
 80025e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80025e4:	2f78      	cmp	r7, #120	; 0x78
 80025e6:	4691      	mov	r9, r2
 80025e8:	4680      	mov	r8, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	469a      	mov	sl, r3
 80025ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80025f2:	d807      	bhi.n	8002604 <_printf_i+0x28>
 80025f4:	2f62      	cmp	r7, #98	; 0x62
 80025f6:	d80a      	bhi.n	800260e <_printf_i+0x32>
 80025f8:	2f00      	cmp	r7, #0
 80025fa:	f000 80d4 	beq.w	80027a6 <_printf_i+0x1ca>
 80025fe:	2f58      	cmp	r7, #88	; 0x58
 8002600:	f000 80c0 	beq.w	8002784 <_printf_i+0x1a8>
 8002604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800260c:	e03a      	b.n	8002684 <_printf_i+0xa8>
 800260e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002612:	2b15      	cmp	r3, #21
 8002614:	d8f6      	bhi.n	8002604 <_printf_i+0x28>
 8002616:	a101      	add	r1, pc, #4	; (adr r1, 800261c <_printf_i+0x40>)
 8002618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800261c:	08002675 	.word	0x08002675
 8002620:	08002689 	.word	0x08002689
 8002624:	08002605 	.word	0x08002605
 8002628:	08002605 	.word	0x08002605
 800262c:	08002605 	.word	0x08002605
 8002630:	08002605 	.word	0x08002605
 8002634:	08002689 	.word	0x08002689
 8002638:	08002605 	.word	0x08002605
 800263c:	08002605 	.word	0x08002605
 8002640:	08002605 	.word	0x08002605
 8002644:	08002605 	.word	0x08002605
 8002648:	0800278d 	.word	0x0800278d
 800264c:	080026b5 	.word	0x080026b5
 8002650:	08002747 	.word	0x08002747
 8002654:	08002605 	.word	0x08002605
 8002658:	08002605 	.word	0x08002605
 800265c:	080027af 	.word	0x080027af
 8002660:	08002605 	.word	0x08002605
 8002664:	080026b5 	.word	0x080026b5
 8002668:	08002605 	.word	0x08002605
 800266c:	08002605 	.word	0x08002605
 8002670:	0800274f 	.word	0x0800274f
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	1d1a      	adds	r2, r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	602a      	str	r2, [r5, #0]
 800267c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002684:	2301      	movs	r3, #1
 8002686:	e09f      	b.n	80027c8 <_printf_i+0x1ec>
 8002688:	6820      	ldr	r0, [r4, #0]
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	0607      	lsls	r7, r0, #24
 800268e:	f103 0104 	add.w	r1, r3, #4
 8002692:	6029      	str	r1, [r5, #0]
 8002694:	d501      	bpl.n	800269a <_printf_i+0xbe>
 8002696:	681e      	ldr	r6, [r3, #0]
 8002698:	e003      	b.n	80026a2 <_printf_i+0xc6>
 800269a:	0646      	lsls	r6, r0, #25
 800269c:	d5fb      	bpl.n	8002696 <_printf_i+0xba>
 800269e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80026a2:	2e00      	cmp	r6, #0
 80026a4:	da03      	bge.n	80026ae <_printf_i+0xd2>
 80026a6:	232d      	movs	r3, #45	; 0x2d
 80026a8:	4276      	negs	r6, r6
 80026aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026ae:	485a      	ldr	r0, [pc, #360]	; (8002818 <_printf_i+0x23c>)
 80026b0:	230a      	movs	r3, #10
 80026b2:	e012      	b.n	80026da <_printf_i+0xfe>
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	6820      	ldr	r0, [r4, #0]
 80026b8:	1d19      	adds	r1, r3, #4
 80026ba:	6029      	str	r1, [r5, #0]
 80026bc:	0605      	lsls	r5, r0, #24
 80026be:	d501      	bpl.n	80026c4 <_printf_i+0xe8>
 80026c0:	681e      	ldr	r6, [r3, #0]
 80026c2:	e002      	b.n	80026ca <_printf_i+0xee>
 80026c4:	0641      	lsls	r1, r0, #25
 80026c6:	d5fb      	bpl.n	80026c0 <_printf_i+0xe4>
 80026c8:	881e      	ldrh	r6, [r3, #0]
 80026ca:	4853      	ldr	r0, [pc, #332]	; (8002818 <_printf_i+0x23c>)
 80026cc:	2f6f      	cmp	r7, #111	; 0x6f
 80026ce:	bf0c      	ite	eq
 80026d0:	2308      	moveq	r3, #8
 80026d2:	230a      	movne	r3, #10
 80026d4:	2100      	movs	r1, #0
 80026d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026da:	6865      	ldr	r5, [r4, #4]
 80026dc:	60a5      	str	r5, [r4, #8]
 80026de:	2d00      	cmp	r5, #0
 80026e0:	bfa2      	ittt	ge
 80026e2:	6821      	ldrge	r1, [r4, #0]
 80026e4:	f021 0104 	bicge.w	r1, r1, #4
 80026e8:	6021      	strge	r1, [r4, #0]
 80026ea:	b90e      	cbnz	r6, 80026f0 <_printf_i+0x114>
 80026ec:	2d00      	cmp	r5, #0
 80026ee:	d04b      	beq.n	8002788 <_printf_i+0x1ac>
 80026f0:	4615      	mov	r5, r2
 80026f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80026f6:	fb03 6711 	mls	r7, r3, r1, r6
 80026fa:	5dc7      	ldrb	r7, [r0, r7]
 80026fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002700:	4637      	mov	r7, r6
 8002702:	42bb      	cmp	r3, r7
 8002704:	460e      	mov	r6, r1
 8002706:	d9f4      	bls.n	80026f2 <_printf_i+0x116>
 8002708:	2b08      	cmp	r3, #8
 800270a:	d10b      	bne.n	8002724 <_printf_i+0x148>
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	07de      	lsls	r6, r3, #31
 8002710:	d508      	bpl.n	8002724 <_printf_i+0x148>
 8002712:	6923      	ldr	r3, [r4, #16]
 8002714:	6861      	ldr	r1, [r4, #4]
 8002716:	4299      	cmp	r1, r3
 8002718:	bfde      	ittt	le
 800271a:	2330      	movle	r3, #48	; 0x30
 800271c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002724:	1b52      	subs	r2, r2, r5
 8002726:	6122      	str	r2, [r4, #16]
 8002728:	f8cd a000 	str.w	sl, [sp]
 800272c:	464b      	mov	r3, r9
 800272e:	aa03      	add	r2, sp, #12
 8002730:	4621      	mov	r1, r4
 8002732:	4640      	mov	r0, r8
 8002734:	f7ff fee4 	bl	8002500 <_printf_common>
 8002738:	3001      	adds	r0, #1
 800273a:	d14a      	bne.n	80027d2 <_printf_i+0x1f6>
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	b004      	add	sp, #16
 8002742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	f043 0320 	orr.w	r3, r3, #32
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	4833      	ldr	r0, [pc, #204]	; (800281c <_printf_i+0x240>)
 8002750:	2778      	movs	r7, #120	; 0x78
 8002752:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	6829      	ldr	r1, [r5, #0]
 800275a:	061f      	lsls	r7, r3, #24
 800275c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002760:	d402      	bmi.n	8002768 <_printf_i+0x18c>
 8002762:	065f      	lsls	r7, r3, #25
 8002764:	bf48      	it	mi
 8002766:	b2b6      	uxthmi	r6, r6
 8002768:	07df      	lsls	r7, r3, #31
 800276a:	bf48      	it	mi
 800276c:	f043 0320 	orrmi.w	r3, r3, #32
 8002770:	6029      	str	r1, [r5, #0]
 8002772:	bf48      	it	mi
 8002774:	6023      	strmi	r3, [r4, #0]
 8002776:	b91e      	cbnz	r6, 8002780 <_printf_i+0x1a4>
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	f023 0320 	bic.w	r3, r3, #32
 800277e:	6023      	str	r3, [r4, #0]
 8002780:	2310      	movs	r3, #16
 8002782:	e7a7      	b.n	80026d4 <_printf_i+0xf8>
 8002784:	4824      	ldr	r0, [pc, #144]	; (8002818 <_printf_i+0x23c>)
 8002786:	e7e4      	b.n	8002752 <_printf_i+0x176>
 8002788:	4615      	mov	r5, r2
 800278a:	e7bd      	b.n	8002708 <_printf_i+0x12c>
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	6826      	ldr	r6, [r4, #0]
 8002790:	6961      	ldr	r1, [r4, #20]
 8002792:	1d18      	adds	r0, r3, #4
 8002794:	6028      	str	r0, [r5, #0]
 8002796:	0635      	lsls	r5, r6, #24
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	d501      	bpl.n	80027a0 <_printf_i+0x1c4>
 800279c:	6019      	str	r1, [r3, #0]
 800279e:	e002      	b.n	80027a6 <_printf_i+0x1ca>
 80027a0:	0670      	lsls	r0, r6, #25
 80027a2:	d5fb      	bpl.n	800279c <_printf_i+0x1c0>
 80027a4:	8019      	strh	r1, [r3, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	6123      	str	r3, [r4, #16]
 80027aa:	4615      	mov	r5, r2
 80027ac:	e7bc      	b.n	8002728 <_printf_i+0x14c>
 80027ae:	682b      	ldr	r3, [r5, #0]
 80027b0:	1d1a      	adds	r2, r3, #4
 80027b2:	602a      	str	r2, [r5, #0]
 80027b4:	681d      	ldr	r5, [r3, #0]
 80027b6:	6862      	ldr	r2, [r4, #4]
 80027b8:	2100      	movs	r1, #0
 80027ba:	4628      	mov	r0, r5
 80027bc:	f7fd fd18 	bl	80001f0 <memchr>
 80027c0:	b108      	cbz	r0, 80027c6 <_printf_i+0x1ea>
 80027c2:	1b40      	subs	r0, r0, r5
 80027c4:	6060      	str	r0, [r4, #4]
 80027c6:	6863      	ldr	r3, [r4, #4]
 80027c8:	6123      	str	r3, [r4, #16]
 80027ca:	2300      	movs	r3, #0
 80027cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027d0:	e7aa      	b.n	8002728 <_printf_i+0x14c>
 80027d2:	6923      	ldr	r3, [r4, #16]
 80027d4:	462a      	mov	r2, r5
 80027d6:	4649      	mov	r1, r9
 80027d8:	4640      	mov	r0, r8
 80027da:	47d0      	blx	sl
 80027dc:	3001      	adds	r0, #1
 80027de:	d0ad      	beq.n	800273c <_printf_i+0x160>
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	079b      	lsls	r3, r3, #30
 80027e4:	d413      	bmi.n	800280e <_printf_i+0x232>
 80027e6:	68e0      	ldr	r0, [r4, #12]
 80027e8:	9b03      	ldr	r3, [sp, #12]
 80027ea:	4298      	cmp	r0, r3
 80027ec:	bfb8      	it	lt
 80027ee:	4618      	movlt	r0, r3
 80027f0:	e7a6      	b.n	8002740 <_printf_i+0x164>
 80027f2:	2301      	movs	r3, #1
 80027f4:	4632      	mov	r2, r6
 80027f6:	4649      	mov	r1, r9
 80027f8:	4640      	mov	r0, r8
 80027fa:	47d0      	blx	sl
 80027fc:	3001      	adds	r0, #1
 80027fe:	d09d      	beq.n	800273c <_printf_i+0x160>
 8002800:	3501      	adds	r5, #1
 8002802:	68e3      	ldr	r3, [r4, #12]
 8002804:	9903      	ldr	r1, [sp, #12]
 8002806:	1a5b      	subs	r3, r3, r1
 8002808:	42ab      	cmp	r3, r5
 800280a:	dcf2      	bgt.n	80027f2 <_printf_i+0x216>
 800280c:	e7eb      	b.n	80027e6 <_printf_i+0x20a>
 800280e:	2500      	movs	r5, #0
 8002810:	f104 0619 	add.w	r6, r4, #25
 8002814:	e7f5      	b.n	8002802 <_printf_i+0x226>
 8002816:	bf00      	nop
 8002818:	08002f19 	.word	0x08002f19
 800281c:	08002f2a 	.word	0x08002f2a

08002820 <__sflush_r>:
 8002820:	898a      	ldrh	r2, [r1, #12]
 8002822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002826:	4605      	mov	r5, r0
 8002828:	0710      	lsls	r0, r2, #28
 800282a:	460c      	mov	r4, r1
 800282c:	d458      	bmi.n	80028e0 <__sflush_r+0xc0>
 800282e:	684b      	ldr	r3, [r1, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	dc05      	bgt.n	8002840 <__sflush_r+0x20>
 8002834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	dc02      	bgt.n	8002840 <__sflush_r+0x20>
 800283a:	2000      	movs	r0, #0
 800283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002842:	2e00      	cmp	r6, #0
 8002844:	d0f9      	beq.n	800283a <__sflush_r+0x1a>
 8002846:	2300      	movs	r3, #0
 8002848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800284c:	682f      	ldr	r7, [r5, #0]
 800284e:	6a21      	ldr	r1, [r4, #32]
 8002850:	602b      	str	r3, [r5, #0]
 8002852:	d032      	beq.n	80028ba <__sflush_r+0x9a>
 8002854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	075a      	lsls	r2, r3, #29
 800285a:	d505      	bpl.n	8002868 <__sflush_r+0x48>
 800285c:	6863      	ldr	r3, [r4, #4]
 800285e:	1ac0      	subs	r0, r0, r3
 8002860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002862:	b10b      	cbz	r3, 8002868 <__sflush_r+0x48>
 8002864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002866:	1ac0      	subs	r0, r0, r3
 8002868:	2300      	movs	r3, #0
 800286a:	4602      	mov	r2, r0
 800286c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800286e:	6a21      	ldr	r1, [r4, #32]
 8002870:	4628      	mov	r0, r5
 8002872:	47b0      	blx	r6
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	89a3      	ldrh	r3, [r4, #12]
 8002878:	d106      	bne.n	8002888 <__sflush_r+0x68>
 800287a:	6829      	ldr	r1, [r5, #0]
 800287c:	291d      	cmp	r1, #29
 800287e:	d82b      	bhi.n	80028d8 <__sflush_r+0xb8>
 8002880:	4a29      	ldr	r2, [pc, #164]	; (8002928 <__sflush_r+0x108>)
 8002882:	410a      	asrs	r2, r1
 8002884:	07d6      	lsls	r6, r2, #31
 8002886:	d427      	bmi.n	80028d8 <__sflush_r+0xb8>
 8002888:	2200      	movs	r2, #0
 800288a:	6062      	str	r2, [r4, #4]
 800288c:	04d9      	lsls	r1, r3, #19
 800288e:	6922      	ldr	r2, [r4, #16]
 8002890:	6022      	str	r2, [r4, #0]
 8002892:	d504      	bpl.n	800289e <__sflush_r+0x7e>
 8002894:	1c42      	adds	r2, r0, #1
 8002896:	d101      	bne.n	800289c <__sflush_r+0x7c>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b903      	cbnz	r3, 800289e <__sflush_r+0x7e>
 800289c:	6560      	str	r0, [r4, #84]	; 0x54
 800289e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028a0:	602f      	str	r7, [r5, #0]
 80028a2:	2900      	cmp	r1, #0
 80028a4:	d0c9      	beq.n	800283a <__sflush_r+0x1a>
 80028a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028aa:	4299      	cmp	r1, r3
 80028ac:	d002      	beq.n	80028b4 <__sflush_r+0x94>
 80028ae:	4628      	mov	r0, r5
 80028b0:	f7ff fa92 	bl	8001dd8 <_free_r>
 80028b4:	2000      	movs	r0, #0
 80028b6:	6360      	str	r0, [r4, #52]	; 0x34
 80028b8:	e7c0      	b.n	800283c <__sflush_r+0x1c>
 80028ba:	2301      	movs	r3, #1
 80028bc:	4628      	mov	r0, r5
 80028be:	47b0      	blx	r6
 80028c0:	1c41      	adds	r1, r0, #1
 80028c2:	d1c8      	bne.n	8002856 <__sflush_r+0x36>
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0c5      	beq.n	8002856 <__sflush_r+0x36>
 80028ca:	2b1d      	cmp	r3, #29
 80028cc:	d001      	beq.n	80028d2 <__sflush_r+0xb2>
 80028ce:	2b16      	cmp	r3, #22
 80028d0:	d101      	bne.n	80028d6 <__sflush_r+0xb6>
 80028d2:	602f      	str	r7, [r5, #0]
 80028d4:	e7b1      	b.n	800283a <__sflush_r+0x1a>
 80028d6:	89a3      	ldrh	r3, [r4, #12]
 80028d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028dc:	81a3      	strh	r3, [r4, #12]
 80028de:	e7ad      	b.n	800283c <__sflush_r+0x1c>
 80028e0:	690f      	ldr	r7, [r1, #16]
 80028e2:	2f00      	cmp	r7, #0
 80028e4:	d0a9      	beq.n	800283a <__sflush_r+0x1a>
 80028e6:	0793      	lsls	r3, r2, #30
 80028e8:	680e      	ldr	r6, [r1, #0]
 80028ea:	bf08      	it	eq
 80028ec:	694b      	ldreq	r3, [r1, #20]
 80028ee:	600f      	str	r7, [r1, #0]
 80028f0:	bf18      	it	ne
 80028f2:	2300      	movne	r3, #0
 80028f4:	eba6 0807 	sub.w	r8, r6, r7
 80028f8:	608b      	str	r3, [r1, #8]
 80028fa:	f1b8 0f00 	cmp.w	r8, #0
 80028fe:	dd9c      	ble.n	800283a <__sflush_r+0x1a>
 8002900:	6a21      	ldr	r1, [r4, #32]
 8002902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002904:	4643      	mov	r3, r8
 8002906:	463a      	mov	r2, r7
 8002908:	4628      	mov	r0, r5
 800290a:	47b0      	blx	r6
 800290c:	2800      	cmp	r0, #0
 800290e:	dc06      	bgt.n	800291e <__sflush_r+0xfe>
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002916:	81a3      	strh	r3, [r4, #12]
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	e78e      	b.n	800283c <__sflush_r+0x1c>
 800291e:	4407      	add	r7, r0
 8002920:	eba8 0800 	sub.w	r8, r8, r0
 8002924:	e7e9      	b.n	80028fa <__sflush_r+0xda>
 8002926:	bf00      	nop
 8002928:	dfbffffe 	.word	0xdfbffffe

0800292c <_fflush_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	690b      	ldr	r3, [r1, #16]
 8002930:	4605      	mov	r5, r0
 8002932:	460c      	mov	r4, r1
 8002934:	b913      	cbnz	r3, 800293c <_fflush_r+0x10>
 8002936:	2500      	movs	r5, #0
 8002938:	4628      	mov	r0, r5
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	b118      	cbz	r0, 8002946 <_fflush_r+0x1a>
 800293e:	6a03      	ldr	r3, [r0, #32]
 8002940:	b90b      	cbnz	r3, 8002946 <_fflush_r+0x1a>
 8002942:	f7ff f921 	bl	8001b88 <__sinit>
 8002946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f3      	beq.n	8002936 <_fflush_r+0xa>
 800294e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002950:	07d0      	lsls	r0, r2, #31
 8002952:	d404      	bmi.n	800295e <_fflush_r+0x32>
 8002954:	0599      	lsls	r1, r3, #22
 8002956:	d402      	bmi.n	800295e <_fflush_r+0x32>
 8002958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800295a:	f7ff fa3a 	bl	8001dd2 <__retarget_lock_acquire_recursive>
 800295e:	4628      	mov	r0, r5
 8002960:	4621      	mov	r1, r4
 8002962:	f7ff ff5d 	bl	8002820 <__sflush_r>
 8002966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002968:	07da      	lsls	r2, r3, #31
 800296a:	4605      	mov	r5, r0
 800296c:	d4e4      	bmi.n	8002938 <_fflush_r+0xc>
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	059b      	lsls	r3, r3, #22
 8002972:	d4e1      	bmi.n	8002938 <_fflush_r+0xc>
 8002974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002976:	f7ff fa2d 	bl	8001dd4 <__retarget_lock_release_recursive>
 800297a:	e7dd      	b.n	8002938 <_fflush_r+0xc>

0800297c <__swbuf_r>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	460e      	mov	r6, r1
 8002980:	4614      	mov	r4, r2
 8002982:	4605      	mov	r5, r0
 8002984:	b118      	cbz	r0, 800298e <__swbuf_r+0x12>
 8002986:	6a03      	ldr	r3, [r0, #32]
 8002988:	b90b      	cbnz	r3, 800298e <__swbuf_r+0x12>
 800298a:	f7ff f8fd 	bl	8001b88 <__sinit>
 800298e:	69a3      	ldr	r3, [r4, #24]
 8002990:	60a3      	str	r3, [r4, #8]
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	071a      	lsls	r2, r3, #28
 8002996:	d525      	bpl.n	80029e4 <__swbuf_r+0x68>
 8002998:	6923      	ldr	r3, [r4, #16]
 800299a:	b31b      	cbz	r3, 80029e4 <__swbuf_r+0x68>
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	6922      	ldr	r2, [r4, #16]
 80029a0:	1a98      	subs	r0, r3, r2
 80029a2:	6963      	ldr	r3, [r4, #20]
 80029a4:	b2f6      	uxtb	r6, r6
 80029a6:	4283      	cmp	r3, r0
 80029a8:	4637      	mov	r7, r6
 80029aa:	dc04      	bgt.n	80029b6 <__swbuf_r+0x3a>
 80029ac:	4621      	mov	r1, r4
 80029ae:	4628      	mov	r0, r5
 80029b0:	f7ff ffbc 	bl	800292c <_fflush_r>
 80029b4:	b9e0      	cbnz	r0, 80029f0 <__swbuf_r+0x74>
 80029b6:	68a3      	ldr	r3, [r4, #8]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60a3      	str	r3, [r4, #8]
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	6022      	str	r2, [r4, #0]
 80029c2:	701e      	strb	r6, [r3, #0]
 80029c4:	6962      	ldr	r2, [r4, #20]
 80029c6:	1c43      	adds	r3, r0, #1
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d004      	beq.n	80029d6 <__swbuf_r+0x5a>
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	07db      	lsls	r3, r3, #31
 80029d0:	d506      	bpl.n	80029e0 <__swbuf_r+0x64>
 80029d2:	2e0a      	cmp	r6, #10
 80029d4:	d104      	bne.n	80029e0 <__swbuf_r+0x64>
 80029d6:	4621      	mov	r1, r4
 80029d8:	4628      	mov	r0, r5
 80029da:	f7ff ffa7 	bl	800292c <_fflush_r>
 80029de:	b938      	cbnz	r0, 80029f0 <__swbuf_r+0x74>
 80029e0:	4638      	mov	r0, r7
 80029e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e4:	4621      	mov	r1, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	f000 f806 	bl	80029f8 <__swsetup_r>
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d0d5      	beq.n	800299c <__swbuf_r+0x20>
 80029f0:	f04f 37ff 	mov.w	r7, #4294967295
 80029f4:	e7f4      	b.n	80029e0 <__swbuf_r+0x64>
	...

080029f8 <__swsetup_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <__swsetup_r+0xac>)
 80029fc:	4605      	mov	r5, r0
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	460c      	mov	r4, r1
 8002a02:	b118      	cbz	r0, 8002a0c <__swsetup_r+0x14>
 8002a04:	6a03      	ldr	r3, [r0, #32]
 8002a06:	b90b      	cbnz	r3, 8002a0c <__swsetup_r+0x14>
 8002a08:	f7ff f8be 	bl	8001b88 <__sinit>
 8002a0c:	89a3      	ldrh	r3, [r4, #12]
 8002a0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a12:	0718      	lsls	r0, r3, #28
 8002a14:	d422      	bmi.n	8002a5c <__swsetup_r+0x64>
 8002a16:	06d9      	lsls	r1, r3, #27
 8002a18:	d407      	bmi.n	8002a2a <__swsetup_r+0x32>
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	602b      	str	r3, [r5, #0]
 8002a1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a22:	81a3      	strh	r3, [r4, #12]
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	e034      	b.n	8002a94 <__swsetup_r+0x9c>
 8002a2a:	0758      	lsls	r0, r3, #29
 8002a2c:	d512      	bpl.n	8002a54 <__swsetup_r+0x5c>
 8002a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a30:	b141      	cbz	r1, 8002a44 <__swsetup_r+0x4c>
 8002a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a36:	4299      	cmp	r1, r3
 8002a38:	d002      	beq.n	8002a40 <__swsetup_r+0x48>
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f7ff f9cc 	bl	8001dd8 <_free_r>
 8002a40:	2300      	movs	r3, #0
 8002a42:	6363      	str	r3, [r4, #52]	; 0x34
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a4a:	81a3      	strh	r3, [r4, #12]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6063      	str	r3, [r4, #4]
 8002a50:	6923      	ldr	r3, [r4, #16]
 8002a52:	6023      	str	r3, [r4, #0]
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	f043 0308 	orr.w	r3, r3, #8
 8002a5a:	81a3      	strh	r3, [r4, #12]
 8002a5c:	6923      	ldr	r3, [r4, #16]
 8002a5e:	b94b      	cbnz	r3, 8002a74 <__swsetup_r+0x7c>
 8002a60:	89a3      	ldrh	r3, [r4, #12]
 8002a62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6a:	d003      	beq.n	8002a74 <__swsetup_r+0x7c>
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f000 f8a7 	bl	8002bc2 <__smakebuf_r>
 8002a74:	89a0      	ldrh	r0, [r4, #12]
 8002a76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a7a:	f010 0301 	ands.w	r3, r0, #1
 8002a7e:	d00a      	beq.n	8002a96 <__swsetup_r+0x9e>
 8002a80:	2300      	movs	r3, #0
 8002a82:	60a3      	str	r3, [r4, #8]
 8002a84:	6963      	ldr	r3, [r4, #20]
 8002a86:	425b      	negs	r3, r3
 8002a88:	61a3      	str	r3, [r4, #24]
 8002a8a:	6923      	ldr	r3, [r4, #16]
 8002a8c:	b943      	cbnz	r3, 8002aa0 <__swsetup_r+0xa8>
 8002a8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a92:	d1c4      	bne.n	8002a1e <__swsetup_r+0x26>
 8002a94:	bd38      	pop	{r3, r4, r5, pc}
 8002a96:	0781      	lsls	r1, r0, #30
 8002a98:	bf58      	it	pl
 8002a9a:	6963      	ldrpl	r3, [r4, #20]
 8002a9c:	60a3      	str	r3, [r4, #8]
 8002a9e:	e7f4      	b.n	8002a8a <__swsetup_r+0x92>
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e7f7      	b.n	8002a94 <__swsetup_r+0x9c>
 8002aa4:	20000060 	.word	0x20000060

08002aa8 <memmove>:
 8002aa8:	4288      	cmp	r0, r1
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	eb01 0402 	add.w	r4, r1, r2
 8002ab0:	d902      	bls.n	8002ab8 <memmove+0x10>
 8002ab2:	4284      	cmp	r4, r0
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	d807      	bhi.n	8002ac8 <memmove+0x20>
 8002ab8:	1e43      	subs	r3, r0, #1
 8002aba:	42a1      	cmp	r1, r4
 8002abc:	d008      	beq.n	8002ad0 <memmove+0x28>
 8002abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ac6:	e7f8      	b.n	8002aba <memmove+0x12>
 8002ac8:	4402      	add	r2, r0
 8002aca:	4601      	mov	r1, r0
 8002acc:	428a      	cmp	r2, r1
 8002ace:	d100      	bne.n	8002ad2 <memmove+0x2a>
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ada:	e7f7      	b.n	8002acc <memmove+0x24>

08002adc <_sbrk_r>:
 8002adc:	b538      	push	{r3, r4, r5, lr}
 8002ade:	4d06      	ldr	r5, [pc, #24]	; (8002af8 <_sbrk_r+0x1c>)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	602b      	str	r3, [r5, #0]
 8002ae8:	f7fe fd84 	bl	80015f4 <_sbrk>
 8002aec:	1c43      	adds	r3, r0, #1
 8002aee:	d102      	bne.n	8002af6 <_sbrk_r+0x1a>
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	b103      	cbz	r3, 8002af6 <_sbrk_r+0x1a>
 8002af4:	6023      	str	r3, [r4, #0]
 8002af6:	bd38      	pop	{r3, r4, r5, pc}
 8002af8:	20002170 	.word	0x20002170

08002afc <memcpy>:
 8002afc:	440a      	add	r2, r1
 8002afe:	4291      	cmp	r1, r2
 8002b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b04:	d100      	bne.n	8002b08 <memcpy+0xc>
 8002b06:	4770      	bx	lr
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b12:	4291      	cmp	r1, r2
 8002b14:	d1f9      	bne.n	8002b0a <memcpy+0xe>
 8002b16:	bd10      	pop	{r4, pc}

08002b18 <_realloc_r>:
 8002b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1c:	4680      	mov	r8, r0
 8002b1e:	4614      	mov	r4, r2
 8002b20:	460e      	mov	r6, r1
 8002b22:	b921      	cbnz	r1, 8002b2e <_realloc_r+0x16>
 8002b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b28:	4611      	mov	r1, r2
 8002b2a:	f7ff b9c1 	b.w	8001eb0 <_malloc_r>
 8002b2e:	b92a      	cbnz	r2, 8002b3c <_realloc_r+0x24>
 8002b30:	f7ff f952 	bl	8001dd8 <_free_r>
 8002b34:	4625      	mov	r5, r4
 8002b36:	4628      	mov	r0, r5
 8002b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b3c:	f000 f8a0 	bl	8002c80 <_malloc_usable_size_r>
 8002b40:	4284      	cmp	r4, r0
 8002b42:	4607      	mov	r7, r0
 8002b44:	d802      	bhi.n	8002b4c <_realloc_r+0x34>
 8002b46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b4a:	d812      	bhi.n	8002b72 <_realloc_r+0x5a>
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	4640      	mov	r0, r8
 8002b50:	f7ff f9ae 	bl	8001eb0 <_malloc_r>
 8002b54:	4605      	mov	r5, r0
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d0ed      	beq.n	8002b36 <_realloc_r+0x1e>
 8002b5a:	42bc      	cmp	r4, r7
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	4631      	mov	r1, r6
 8002b60:	bf28      	it	cs
 8002b62:	463a      	movcs	r2, r7
 8002b64:	f7ff ffca 	bl	8002afc <memcpy>
 8002b68:	4631      	mov	r1, r6
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f7ff f934 	bl	8001dd8 <_free_r>
 8002b70:	e7e1      	b.n	8002b36 <_realloc_r+0x1e>
 8002b72:	4635      	mov	r5, r6
 8002b74:	e7df      	b.n	8002b36 <_realloc_r+0x1e>

08002b76 <__swhatbuf_r>:
 8002b76:	b570      	push	{r4, r5, r6, lr}
 8002b78:	460c      	mov	r4, r1
 8002b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	b096      	sub	sp, #88	; 0x58
 8002b82:	4615      	mov	r5, r2
 8002b84:	461e      	mov	r6, r3
 8002b86:	da0d      	bge.n	8002ba4 <__swhatbuf_r+0x2e>
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002b98:	2340      	movne	r3, #64	; 0x40
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	6031      	str	r1, [r6, #0]
 8002b9e:	602b      	str	r3, [r5, #0]
 8002ba0:	b016      	add	sp, #88	; 0x58
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	466a      	mov	r2, sp
 8002ba6:	f000 f849 	bl	8002c3c <_fstat_r>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	dbec      	blt.n	8002b88 <__swhatbuf_r+0x12>
 8002bae:	9901      	ldr	r1, [sp, #4]
 8002bb0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002bb4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002bb8:	4259      	negs	r1, r3
 8002bba:	4159      	adcs	r1, r3
 8002bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc0:	e7eb      	b.n	8002b9a <__swhatbuf_r+0x24>

08002bc2 <__smakebuf_r>:
 8002bc2:	898b      	ldrh	r3, [r1, #12]
 8002bc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bc6:	079d      	lsls	r5, r3, #30
 8002bc8:	4606      	mov	r6, r0
 8002bca:	460c      	mov	r4, r1
 8002bcc:	d507      	bpl.n	8002bde <__smakebuf_r+0x1c>
 8002bce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bd2:	6023      	str	r3, [r4, #0]
 8002bd4:	6123      	str	r3, [r4, #16]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	6163      	str	r3, [r4, #20]
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}
 8002bde:	ab01      	add	r3, sp, #4
 8002be0:	466a      	mov	r2, sp
 8002be2:	f7ff ffc8 	bl	8002b76 <__swhatbuf_r>
 8002be6:	9900      	ldr	r1, [sp, #0]
 8002be8:	4605      	mov	r5, r0
 8002bea:	4630      	mov	r0, r6
 8002bec:	f7ff f960 	bl	8001eb0 <_malloc_r>
 8002bf0:	b948      	cbnz	r0, 8002c06 <__smakebuf_r+0x44>
 8002bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf6:	059a      	lsls	r2, r3, #22
 8002bf8:	d4ef      	bmi.n	8002bda <__smakebuf_r+0x18>
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	81a3      	strh	r3, [r4, #12]
 8002c04:	e7e3      	b.n	8002bce <__smakebuf_r+0xc>
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	6020      	str	r0, [r4, #0]
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0e:	81a3      	strh	r3, [r4, #12]
 8002c10:	9b00      	ldr	r3, [sp, #0]
 8002c12:	6163      	str	r3, [r4, #20]
 8002c14:	9b01      	ldr	r3, [sp, #4]
 8002c16:	6120      	str	r0, [r4, #16]
 8002c18:	b15b      	cbz	r3, 8002c32 <__smakebuf_r+0x70>
 8002c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c1e:	4630      	mov	r0, r6
 8002c20:	f000 f81e 	bl	8002c60 <_isatty_r>
 8002c24:	b128      	cbz	r0, 8002c32 <__smakebuf_r+0x70>
 8002c26:	89a3      	ldrh	r3, [r4, #12]
 8002c28:	f023 0303 	bic.w	r3, r3, #3
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	81a3      	strh	r3, [r4, #12]
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	431d      	orrs	r5, r3
 8002c36:	81a5      	strh	r5, [r4, #12]
 8002c38:	e7cf      	b.n	8002bda <__smakebuf_r+0x18>
	...

08002c3c <_fstat_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4d07      	ldr	r5, [pc, #28]	; (8002c5c <_fstat_r+0x20>)
 8002c40:	2300      	movs	r3, #0
 8002c42:	4604      	mov	r4, r0
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	602b      	str	r3, [r5, #0]
 8002c4a:	f7fe fcaa 	bl	80015a2 <_fstat>
 8002c4e:	1c43      	adds	r3, r0, #1
 8002c50:	d102      	bne.n	8002c58 <_fstat_r+0x1c>
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	b103      	cbz	r3, 8002c58 <_fstat_r+0x1c>
 8002c56:	6023      	str	r3, [r4, #0]
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20002170 	.word	0x20002170

08002c60 <_isatty_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4d06      	ldr	r5, [pc, #24]	; (8002c7c <_isatty_r+0x1c>)
 8002c64:	2300      	movs	r3, #0
 8002c66:	4604      	mov	r4, r0
 8002c68:	4608      	mov	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fe fca9 	bl	80015c2 <_isatty>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_isatty_r+0x1a>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_isatty_r+0x1a>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	20002170 	.word	0x20002170

08002c80 <_malloc_usable_size_r>:
 8002c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c84:	1f18      	subs	r0, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bfbc      	itt	lt
 8002c8a:	580b      	ldrlt	r3, [r1, r0]
 8002c8c:	18c0      	addlt	r0, r0, r3
 8002c8e:	4770      	bx	lr

08002c90 <_init>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr

08002c9c <_fini>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr
